{
    "sourceFile": "lib/note_editor_page.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 28,
            "patches": [
                {
                    "date": 1744897212837,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1744897304335,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,7 @@\n import 'package:flutter/material.dart';\r\n import 'package:flutter_riverpod/flutter_riverpod.dart';\r\n-import '../controllers/note_editor_controller.dart';\r\n-import '../../data/note_model.dart';\r\n+import 'package:drivenotes/features/notes/domain/models/note_model.dart';\r\n \r\n class NoteEditorPage extends ConsumerStatefulWidget {\r\n   final NoteModel? originalNote;\r\n   const NoteEditorPage({super.key, this.originalNote});\r\n@@ -33,27 +32,28 @@\n \r\n   Future<void> _save() async {\r\n     setState(() => _submitted = true);\r\n     if (_titleController.text.trim().isEmpty) return;\r\n-    final notifier = ref\r\n-        .read(noteEditorControllerProvider(widget.originalNote).notifier);\r\n-    await notifier.save(\r\n-      _titleController.text.trim(),\r\n-      _contentController.text,\r\n+    final notifier = ref.read(\r\n+      noteEditorControllerProvider(widget.originalNote).notifier,\r\n     );\r\n+    await notifier.save(_titleController.text.trim(), _contentController.text);\r\n     final state = ref.read(noteEditorControllerProvider(widget.originalNote));\r\n     state.when(\r\n       loading: () {},\r\n-      error: (e, _) => ScaffoldMessenger.of(context)\r\n-          .showSnackBar(SnackBar(content: Text('Error: $e'))),\r\n+      error:\r\n+          (e, _) => ScaffoldMessenger.of(\r\n+            context,\r\n+          ).showSnackBar(SnackBar(content: Text('Error: $e'))),\r\n       data: (_) => Navigator.of(context).pop(),\r\n     );\r\n   }\r\n \r\n   @override\r\n   Widget build(BuildContext context) {\r\n-    final asyncState =\r\n-        ref.watch(noteEditorControllerProvider(widget.originalNote));\r\n+    final asyncState = ref.watch(\r\n+      noteEditorControllerProvider(widget.originalNote),\r\n+    );\r\n     final isLoading = asyncState.isLoading;\r\n \r\n     return Scaffold(\r\n       appBar: AppBar(\r\n@@ -61,39 +61,41 @@\n         actions: [\r\n           IconButton(\r\n             icon: const Icon(Icons.save),\r\n             onPressed: isLoading ? null : _save,\r\n-          )\r\n+          ),\r\n         ],\r\n       ),\r\n       body: Padding(\r\n         padding: const EdgeInsets.all(16),\r\n-        child: Column(children: [\r\n-          TextField(\r\n-            controller: _titleController,\r\n-            decoration: InputDecoration(\r\n-              labelText: 'Title',\r\n-              errorText:\r\n-                  _submitted && _titleController.text.trim().isEmpty\r\n-                      ? 'Title cannot be empty'\r\n-                      : null,\r\n+        child: Column(\r\n+          children: [\r\n+            TextField(\r\n+              controller: _titleController,\r\n+              decoration: InputDecoration(\r\n+                labelText: 'Title',\r\n+                errorText:\r\n+                    _submitted && _titleController.text.trim().isEmpty\r\n+                        ? 'Title cannot be empty'\r\n+                        : null,\r\n+              ),\r\n             ),\r\n-          ),\r\n-          const SizedBox(height: 16),\r\n-          Expanded(\r\n-            child: TextField(\r\n-              controller: _contentController,\r\n-              maxLines: null,\r\n-              expands: true,\r\n-              decoration: const InputDecoration(\r\n-                labelText: 'Content',\r\n-                alignLabelWithHint: true,\r\n-                border: OutlineInputBorder(),\r\n+            const SizedBox(height: 16),\r\n+            Expanded(\r\n+              child: TextField(\r\n+                controller: _contentController,\r\n+                maxLines: null,\r\n+                expands: true,\r\n+                decoration: const InputDecoration(\r\n+                  labelText: 'Content',\r\n+                  alignLabelWithHint: true,\r\n+                  border: OutlineInputBorder(),\r\n+                ),\r\n               ),\r\n             ),\r\n-          ),\r\n-          if (isLoading) const LinearProgressIndicator(),\r\n-        ]),\r\n+            if (isLoading) const LinearProgressIndicator(),\r\n+          ],\r\n+        ),\r\n       ),\r\n     );\r\n   }\r\n }\r\n"
                },
                {
                    "date": 1744897316266,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,5 @@\n+import 'package:drivenotes/note_editor_controller.dart';\r\n import 'package:flutter/material.dart';\r\n import 'package:flutter_riverpod/flutter_riverpod.dart';\r\n import 'package:drivenotes/features/notes/domain/models/note_model.dart';\r\n \r\n"
                },
                {
                    "date": 1744897712267,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n-import 'package:drivenotes/note_editor_controller.dart';\r\n import 'package:flutter/material.dart';\r\n import 'package:flutter_riverpod/flutter_riverpod.dart';\r\n-import 'package:drivenotes/features/notes/domain/models/note_model.dart';\r\n+import '../controllers/note_editor_controller.dart';\r\n+import '../../data/note_model.dart';\r\n \r\n class NoteEditorPage extends ConsumerStatefulWidget {\r\n   final NoteModel? originalNote;\r\n   const NoteEditorPage({super.key, this.originalNote});\r\n@@ -11,92 +11,80 @@\n   ConsumerState<NoteEditorPage> createState() => _NoteEditorPageState();\r\n }\r\n \r\n class _NoteEditorPageState extends ConsumerState<NoteEditorPage> {\r\n-  late final TextEditingController _titleController;\r\n-  late final TextEditingController _contentController;\r\n+  late final TextEditingController _titleCtrl;\r\n+  late final TextEditingController _contentCtrl;\r\n   bool _submitted = false;\r\n \r\n   @override\r\n   void initState() {\r\n     super.initState();\r\n-    final n = widget.originalNote;\r\n-    _titleController = TextEditingController(text: n?.title ?? '');\r\n-    _contentController = TextEditingController(text: n?.content ?? '');\r\n+    final o = widget.originalNote;\r\n+    _titleCtrl = TextEditingController(text: o?.title ?? '');\r\n+    _contentCtrl = TextEditingController(text: o?.content ?? '');\r\n   }\r\n \r\n   @override\r\n   void dispose() {\r\n-    _titleController.dispose();\r\n-    _contentController.dispose();\r\n+    _titleCtrl.dispose();\r\n+    _contentCtrl.dispose();\r\n     super.dispose();\r\n   }\r\n \r\n   Future<void> _save() async {\r\n     setState(() => _submitted = true);\r\n-    if (_titleController.text.trim().isEmpty) return;\r\n-    final notifier = ref.read(\r\n-      noteEditorControllerProvider(widget.originalNote).notifier,\r\n-    );\r\n-    await notifier.save(_titleController.text.trim(), _contentController.text);\r\n-    final state = ref.read(noteEditorControllerProvider(widget.originalNote));\r\n-    state.when(\r\n+    if (_titleCtrl.text.trim().isEmpty) return;\r\n+    final ctrl = ref\r\n+        .read(noteEditorControllerProvider(widget.originalNote).notifier);\r\n+    await ctrl.save(_titleCtrl.text.trim(), _contentCtrl.text);\r\n+    ref.read(noteEditorControllerProvider(widget.originalNote)).when(\r\n+      data: (_) => Navigator.of(context).pop(),\r\n+      error: (e, _) =>\r\n+          ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text('Error: $e'))),\r\n       loading: () {},\r\n-      error:\r\n-          (e, _) => ScaffoldMessenger.of(\r\n-            context,\r\n-          ).showSnackBar(SnackBar(content: Text('Error: $e'))),\r\n-      data: (_) => Navigator.of(context).pop(),\r\n     );\r\n   }\r\n \r\n   @override\r\n   Widget build(BuildContext context) {\r\n-    final asyncState = ref.watch(\r\n-      noteEditorControllerProvider(widget.originalNote),\r\n-    );\r\n-    final isLoading = asyncState.isLoading;\r\n-\r\n+    final async = ref.watch(noteEditorControllerProvider(widget.originalNote));\r\n     return Scaffold(\r\n       appBar: AppBar(\r\n-        title: Text(widget.originalNote == null ? 'New Note' : 'Edit Note'),\r\n-        actions: [\r\n-          IconButton(\r\n-            icon: const Icon(Icons.save),\r\n-            onPressed: isLoading ? null : _save,\r\n-          ),\r\n-        ],\r\n-      ),\r\n+          title: Text(widget.originalNote == null ? 'New Note' : 'Edit Note'),\r\n+          actions: [\r\n+            IconButton(\r\n+              icon: const Icon(Icons.save),\r\n+              onPressed: async.isLoading ? null : _save,\r\n+            )\r\n+          ]),\r\n       body: Padding(\r\n         padding: const EdgeInsets.all(16),\r\n-        child: Column(\r\n-          children: [\r\n-            TextField(\r\n-              controller: _titleController,\r\n-              decoration: InputDecoration(\r\n-                labelText: 'Title',\r\n-                errorText:\r\n-                    _submitted && _titleController.text.trim().isEmpty\r\n-                        ? 'Title cannot be empty'\r\n-                        : null,\r\n-              ),\r\n+        child: Column(children: [\r\n+          TextField(\r\n+            controller: _titleCtrl,\r\n+            decoration: InputDecoration(\r\n+              labelText: 'Title',\r\n+              errorText: _submitted && _titleCtrl.text.trim().isEmpty\r\n+                  ? 'Required'\r\n+                  : null,\r\n             ),\r\n-            const SizedBox(height: 16),\r\n-            Expanded(\r\n-              child: TextField(\r\n-                controller: _contentController,\r\n-                maxLines: null,\r\n-                expands: true,\r\n-                decoration: const InputDecoration(\r\n-                  labelText: 'Content',\r\n-                  alignLabelWithHint: true,\r\n-                  border: OutlineInputBorder(),\r\n-                ),\r\n+          ),\r\n+          const SizedBox(height: 16),\r\n+          Expanded(\r\n+            child: TextField(\r\n+              controller: _contentCtrl,\r\n+              maxLines: null,\r\n+              expands: true,\r\n+              decoration: const InputDecoration(\r\n+                labelText: 'Content',\r\n+                alignLabelWithHint: true,\r\n+                border: OutlineInputBorder(),\r\n               ),\r\n             ),\r\n-            if (isLoading) const LinearProgressIndicator(),\r\n-          ],\r\n-        ),\r\n+          ),\r\n+          if (async.isLoading) const LinearProgressIndicator(),\r\n+        ]),\r\n       ),\r\n     );\r\n   }\r\n }\r\n"
                },
                {
                    "date": 1744897775034,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,8 @@\n import 'package:flutter/material.dart';\r\n import 'package:flutter_riverpod/flutter_riverpod.dart';\r\n-import '../controllers/note_editor_controller.dart';\r\n-import '../../data/note_model.dart';\r\n \r\n+\r\n class NoteEditorPage extends ConsumerStatefulWidget {\r\n   final NoteModel? originalNote;\r\n   const NoteEditorPage({super.key, this.originalNote});\r\n \r\n"
                },
                {
                    "date": 1744897788734,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,6 @@\n+import 'package:drivenotes/features/notes/domain/models/note_model.dart';\r\n+import 'package:drivenotes/note_editor_controller.dart';\r\n import 'package:flutter/material.dart';\r\n import 'package:flutter_riverpod/flutter_riverpod.dart';\r\n \r\n \r\n"
                },
                {
                    "date": 1744898001735,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,9 @@\n import 'package:drivenotes/features/notes/domain/models/note_model.dart';\r\n-import 'package:drivenotes/note_editor_controller.dart';\r\n+import 'package:drivenotes/features/notes/presentation/providers/note_editor_controller.dart';\r\n import 'package:flutter/material.dart';\r\n import 'package:flutter_riverpod/flutter_riverpod.dart';\r\n \r\n-\r\n class NoteEditorPage extends ConsumerStatefulWidget {\r\n   final NoteModel? originalNote;\r\n   const NoteEditorPage({super.key, this.originalNote});\r\n \r\n@@ -34,58 +33,67 @@\n \r\n   Future<void> _save() async {\r\n     setState(() => _submitted = true);\r\n     if (_titleCtrl.text.trim().isEmpty) return;\r\n-    final ctrl = ref\r\n-        .read(noteEditorControllerProvider(widget.originalNote).notifier);\r\n+    final ctrl = ref.read(\r\n+      noteEditorControllerProvider(widget.originalNote).notifier,\r\n+    );\r\n     await ctrl.save(_titleCtrl.text.trim(), _contentCtrl.text);\r\n-    ref.read(noteEditorControllerProvider(widget.originalNote)).when(\r\n-      data: (_) => Navigator.of(context).pop(),\r\n-      error: (e, _) =>\r\n-          ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text('Error: $e'))),\r\n-      loading: () {},\r\n-    );\r\n+    ref\r\n+        .read(noteEditorControllerProvider(widget.originalNote))\r\n+        .when(\r\n+          data: (_) => Navigator.of(context).pop(),\r\n+          error:\r\n+              (e, _) => ScaffoldMessenger.of(\r\n+                context,\r\n+              ).showSnackBar(SnackBar(content: Text('Error: $e'))),\r\n+          loading: () {},\r\n+        );\r\n   }\r\n \r\n   @override\r\n   Widget build(BuildContext context) {\r\n     final async = ref.watch(noteEditorControllerProvider(widget.originalNote));\r\n     return Scaffold(\r\n       appBar: AppBar(\r\n-          title: Text(widget.originalNote == null ? 'New Note' : 'Edit Note'),\r\n-          actions: [\r\n-            IconButton(\r\n-              icon: const Icon(Icons.save),\r\n-              onPressed: async.isLoading ? null : _save,\r\n-            )\r\n-          ]),\r\n+        title: Text(widget.originalNote == null ? 'New Note' : 'Edit Note'),\r\n+        actions: [\r\n+          IconButton(\r\n+            icon: const Icon(Icons.save),\r\n+            onPressed: async.isLoading ? null : _save,\r\n+          ),\r\n+        ],\r\n+      ),\r\n       body: Padding(\r\n         padding: const EdgeInsets.all(16),\r\n-        child: Column(children: [\r\n-          TextField(\r\n-            controller: _titleCtrl,\r\n-            decoration: InputDecoration(\r\n-              labelText: 'Title',\r\n-              errorText: _submitted && _titleCtrl.text.trim().isEmpty\r\n-                  ? 'Required'\r\n-                  : null,\r\n+        child: Column(\r\n+          children: [\r\n+            TextField(\r\n+              controller: _titleCtrl,\r\n+              decoration: InputDecoration(\r\n+                labelText: 'Title',\r\n+                errorText:\r\n+                    _submitted && _titleCtrl.text.trim().isEmpty\r\n+                        ? 'Required'\r\n+                        : null,\r\n+              ),\r\n             ),\r\n-          ),\r\n-          const SizedBox(height: 16),\r\n-          Expanded(\r\n-            child: TextField(\r\n-              controller: _contentCtrl,\r\n-              maxLines: null,\r\n-              expands: true,\r\n-              decoration: const InputDecoration(\r\n-                labelText: 'Content',\r\n-                alignLabelWithHint: true,\r\n-                border: OutlineInputBorder(),\r\n+            const SizedBox(height: 16),\r\n+            Expanded(\r\n+              child: TextField(\r\n+                controller: _contentCtrl,\r\n+                maxLines: null,\r\n+                expands: true,\r\n+                decoration: const InputDecoration(\r\n+                  labelText: 'Content',\r\n+                  alignLabelWithHint: true,\r\n+                  border: OutlineInputBorder(),\r\n+                ),\r\n               ),\r\n             ),\r\n-          ),\r\n-          if (async.isLoading) const LinearProgressIndicator(),\r\n-        ]),\r\n+            if (async.isLoading) const LinearProgressIndicator(),\r\n+          ],\r\n+        ),\r\n       ),\r\n     );\r\n   }\r\n }\r\n"
                },
                {
                    "date": 1744898958706,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n import 'package:drivenotes/features/notes/domain/models/note_model.dart';\r\n import 'package:drivenotes/features/notes/presentation/providers/note_editor_controller.dart';\r\n+import 'package:drivenotes/notes_controller.dart';\r\n import 'package:flutter/material.dart';\r\n import 'package:flutter_riverpod/flutter_riverpod.dart';\r\n \r\n class NoteEditorPage extends ConsumerStatefulWidget {\r\n@@ -33,22 +34,31 @@\n \r\n   Future<void> _save() async {\r\n     setState(() => _submitted = true);\r\n     if (_titleCtrl.text.trim().isEmpty) return;\r\n-    final ctrl = ref.read(\r\n-      noteEditorControllerProvider(widget.originalNote).notifier,\r\n-    );\r\n-    await ctrl.save(_titleCtrl.text.trim(), _contentCtrl.text);\r\n-    ref\r\n-        .read(noteEditorControllerProvider(widget.originalNote))\r\n-        .when(\r\n-          data: (_) => Navigator.of(context).pop(),\r\n-          error:\r\n-              (e, _) => ScaffoldMessenger.of(\r\n-                context,\r\n-              ).showSnackBar(SnackBar(content: Text('Error: $e'))),\r\n-          loading: () {},\r\n+\r\n+    try {\r\n+      final ctrl = ref.read(\r\n+        noteEditorControllerProvider(widget.originalNote).notifier,\r\n+      );\r\n+      await ctrl.save(_titleCtrl.text.trim(), _contentCtrl.text);\r\n+\r\n+      // Wait for the notes list to refresh\r\n+      await ref.read(notesControllerProvider.future);\r\n+\r\n+      if (mounted) {\r\n+        Navigator.of(context).pop();\r\n+        ScaffoldMessenger.of(context).showSnackBar(\r\n+          const SnackBar(content: Text('Note saved successfully!')),\r\n         );\r\n+      }\r\n+    } catch (e) {\r\n+      if (mounted) {\r\n+        ScaffoldMessenger.of(\r\n+          context,\r\n+        ).showSnackBar(SnackBar(content: Text('Error saving note: $e')));\r\n+      }\r\n+    }\r\n   }\r\n \r\n   @override\r\n   Widget build(BuildContext context) {\r\n"
                },
                {
                    "date": 1744912104890,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,24 +36,35 @@\n     setState(() => _submitted = true);\r\n     if (_titleCtrl.text.trim().isEmpty) return;\r\n \r\n     try {\r\n+      // Show loading indicator\r\n+      ScaffoldMessenger.of(\r\n+        context,\r\n+      ).showSnackBar(const SnackBar(content: Text('Saving note...')));\r\n+\r\n+      // Save the note\r\n       final ctrl = ref.read(\r\n         noteEditorControllerProvider(widget.originalNote).notifier,\r\n       );\r\n       await ctrl.save(_titleCtrl.text.trim(), _contentCtrl.text);\r\n \r\n-      // Wait for the notes list to refresh\r\n-      await ref.read(notesControllerProvider.future);\r\n+      // Explicitly refresh and wait for the notes list\r\n+      await ref.refresh(notesControllerProvider.future);\r\n \r\n       if (mounted) {\r\n-        Navigator.of(context).pop();\r\n+        // Clear the loading snackbar\r\n+        ScaffoldMessenger.of(context).clearSnackBars();\r\n+        // Show success message\r\n         ScaffoldMessenger.of(context).showSnackBar(\r\n           const SnackBar(content: Text('Note saved successfully!')),\r\n         );\r\n+        // Navigate back\r\n+        Navigator.of(context).pop();\r\n       }\r\n     } catch (e) {\r\n       if (mounted) {\r\n+        ScaffoldMessenger.of(context).clearSnackBars();\r\n         ScaffoldMessenger.of(\r\n           context,\r\n         ).showSnackBar(SnackBar(content: Text('Error saving note: $e')));\r\n       }\r\n"
                },
                {
                    "date": 1744912340450,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,17 +15,30 @@\n class _NoteEditorPageState extends ConsumerState<NoteEditorPage> {\r\n   late final TextEditingController _titleCtrl;\r\n   late final TextEditingController _contentCtrl;\r\n   bool _submitted = false;\r\n+  bool _isDirty = false;\r\n \r\n   @override\r\n   void initState() {\r\n     super.initState();\r\n     final o = widget.originalNote;\r\n-    _titleCtrl = TextEditingController(text: o?.title ?? '');\r\n+    // Remove .txt extension if present for display\r\n+    final title = o?.title.replaceAll(RegExp(r'\\.txt$'), '') ?? '';\r\n+    _titleCtrl = TextEditingController(text: title);\r\n     _contentCtrl = TextEditingController(text: o?.content ?? '');\r\n+\r\n+    // Listen for changes to mark the note as dirty\r\n+    _titleCtrl.addListener(_markDirty);\r\n+    _contentCtrl.addListener(_markDirty);\r\n   }\r\n \r\n+  void _markDirty() {\r\n+    if (!_isDirty) {\r\n+      setState(() => _isDirty = true);\r\n+    }\r\n+  }\r\n+\r\n   @override\r\n   void dispose() {\r\n     _titleCtrl.dispose();\r\n     _contentCtrl.dispose();\r\n@@ -57,8 +70,9 @@\n         // Show success message\r\n         ScaffoldMessenger.of(context).showSnackBar(\r\n           const SnackBar(content: Text('Note saved successfully!')),\r\n         );\r\n+        setState(() => _isDirty = false);\r\n         // Navigate back\r\n         Navigator.of(context).pop();\r\n       }\r\n     } catch (e) {\r\n@@ -70,50 +84,91 @@\n       }\r\n     }\r\n   }\r\n \r\n+  Future<bool> _onWillPop() async {\r\n+    if (!_isDirty) return true;\r\n+\r\n+    final result = await showDialog<bool>(\r\n+      context: context,\r\n+      builder:\r\n+          (context) => AlertDialog(\r\n+            title: const Text('Unsaved Changes'),\r\n+            content: const Text('Do you want to save your changes?'),\r\n+            actions: [\r\n+              TextButton(\r\n+                onPressed: () => Navigator.pop(context, false), // don't save\r\n+                child: const Text('DISCARD'),\r\n+              ),\r\n+              TextButton(\r\n+                onPressed: () => Navigator.pop(context, true), // save\r\n+                child: const Text('SAVE'),\r\n+              ),\r\n+            ],\r\n+          ),\r\n+    );\r\n+\r\n+    if (result == true) {\r\n+      await _save();\r\n+      return false; // _save will handle navigation\r\n+    }\r\n+    return true; // allow pop if not saving\r\n+  }\r\n+\r\n   @override\r\n   Widget build(BuildContext context) {\r\n     final async = ref.watch(noteEditorControllerProvider(widget.originalNote));\r\n-    return Scaffold(\r\n-      appBar: AppBar(\r\n-        title: Text(widget.originalNote == null ? 'New Note' : 'Edit Note'),\r\n-        actions: [\r\n-          IconButton(\r\n-            icon: const Icon(Icons.save),\r\n-            onPressed: async.isLoading ? null : _save,\r\n-          ),\r\n-        ],\r\n-      ),\r\n-      body: Padding(\r\n-        padding: const EdgeInsets.all(16),\r\n-        child: Column(\r\n-          children: [\r\n-            TextField(\r\n-              controller: _titleCtrl,\r\n-              decoration: InputDecoration(\r\n-                labelText: 'Title',\r\n-                errorText:\r\n-                    _submitted && _titleCtrl.text.trim().isEmpty\r\n-                        ? 'Required'\r\n-                        : null,\r\n+\r\n+    return WillPopScope(\r\n+      onWillPop: _onWillPop,\r\n+      child: Scaffold(\r\n+        appBar: AppBar(\r\n+          title: Text(widget.originalNote == null ? 'New Note' : 'Edit Note'),\r\n+          actions: [\r\n+            if (_isDirty)\r\n+              IconButton(\r\n+                icon: const Icon(Icons.save),\r\n+                onPressed: async.isLoading ? null : _save,\r\n+                tooltip: 'Save changes',\r\n               ),\r\n-            ),\r\n-            const SizedBox(height: 16),\r\n-            Expanded(\r\n-              child: TextField(\r\n-                controller: _contentCtrl,\r\n-                maxLines: null,\r\n-                expands: true,\r\n-                decoration: const InputDecoration(\r\n-                  labelText: 'Content',\r\n-                  alignLabelWithHint: true,\r\n-                  border: OutlineInputBorder(),\r\n+          ],\r\n+        ),\r\n+        body: Padding(\r\n+          padding: const EdgeInsets.all(16),\r\n+          child: Column(\r\n+            children: [\r\n+              TextField(\r\n+                controller: _titleCtrl,\r\n+                decoration: InputDecoration(\r\n+                  labelText: 'Title',\r\n+                  errorText:\r\n+                      _submitted && _titleCtrl.text.trim().isEmpty\r\n+                          ? 'Title is required'\r\n+                          : null,\r\n                 ),\r\n+                textCapitalization: TextCapitalization.sentences,\r\n               ),\r\n-            ),\r\n-            if (async.isLoading) const LinearProgressIndicator(),\r\n-          ],\r\n+              const SizedBox(height: 16),\r\n+              Expanded(\r\n+                child: TextField(\r\n+                  controller: _contentCtrl,\r\n+                  maxLines: null,\r\n+                  expands: true,\r\n+                  textCapitalization: TextCapitalization.sentences,\r\n+                  decoration: const InputDecoration(\r\n+                    labelText: 'Content',\r\n+                    alignLabelWithHint: true,\r\n+                    border: OutlineInputBorder(),\r\n+                  ),\r\n+                ),\r\n+              ),\r\n+              if (async.isLoading)\r\n+                const Padding(\r\n+                  padding: EdgeInsets.only(top: 8.0),\r\n+                  child: LinearProgressIndicator(),\r\n+                ),\r\n+            ],\r\n+          ),\r\n         ),\r\n       ),\r\n     );\r\n   }\r\n"
                },
                {
                    "date": 1744914063842,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,8 +16,10 @@\n   late final TextEditingController _titleCtrl;\r\n   late final TextEditingController _contentCtrl;\r\n   bool _submitted = false;\r\n   bool _isDirty = false;\r\n+  final FocusNode _titleFocus = FocusNode();\r\n+  final FocusNode _contentFocus = FocusNode();\r\n \r\n   @override\r\n   void initState() {\r\n     super.initState();\r\n@@ -29,8 +31,15 @@\n \r\n     // Listen for changes to mark the note as dirty\r\n     _titleCtrl.addListener(_markDirty);\r\n     _contentCtrl.addListener(_markDirty);\r\n+\r\n+    // Auto-focus title if new note\r\n+    if (o == null) {\r\n+      WidgetsBinding.instance.addPostFrameCallback((_) {\r\n+        _titleFocus.requestFocus();\r\n+      });\r\n+    }\r\n   }\r\n \r\n   void _markDirty() {\r\n     if (!_isDirty) {\r\n@@ -41,20 +50,39 @@\n   @override\r\n   void dispose() {\r\n     _titleCtrl.dispose();\r\n     _contentCtrl.dispose();\r\n+    _titleFocus.dispose();\r\n+    _contentFocus.dispose();\r\n     super.dispose();\r\n   }\r\n \r\n   Future<void> _save() async {\r\n     setState(() => _submitted = true);\r\n-    if (_titleCtrl.text.trim().isEmpty) return;\r\n+    if (_titleCtrl.text.trim().isEmpty) {\r\n+      _titleFocus.requestFocus();\r\n+      return;\r\n+    }\r\n \r\n     try {\r\n       // Show loading indicator\r\n-      ScaffoldMessenger.of(\r\n-        context,\r\n-      ).showSnackBar(const SnackBar(content: Text('Saving note...')));\r\n+      if (mounted) {\r\n+        ScaffoldMessenger.of(context).showSnackBar(\r\n+          const SnackBar(\r\n+            content: Row(\r\n+              children: [\r\n+                SizedBox(\r\n+                  height: 20,\r\n+                  width: 20,\r\n+                  child: CircularProgressIndicator(strokeWidth: 2),\r\n+                ),\r\n+                SizedBox(width: 16),\r\n+                Text('Saving note...'),\r\n+              ],\r\n+            ),\r\n+          ),\r\n+        );\r\n+      }\r\n \r\n       // Save the note\r\n       final ctrl = ref.read(\r\n         noteEditorControllerProvider(widget.originalNote).notifier,\r\n@@ -66,22 +94,50 @@\n \r\n       if (mounted) {\r\n         // Clear the loading snackbar\r\n         ScaffoldMessenger.of(context).clearSnackBars();\r\n-        // Show success message\r\n+        // Show success message with animation\r\n         ScaffoldMessenger.of(context).showSnackBar(\r\n-          const SnackBar(content: Text('Note saved successfully!')),\r\n+          SnackBar(\r\n+            content: Row(\r\n+              children: [\r\n+                const Icon(Icons.check_circle, color: Colors.white),\r\n+                const SizedBox(width: 16),\r\n+                const Text('Note saved successfully!'),\r\n+                const Spacer(),\r\n+                TextButton(\r\n+                  onPressed: () {\r\n+                    ScaffoldMessenger.of(context).hideCurrentSnackBar();\r\n+                    Navigator.of(context).pop();\r\n+                  },\r\n+                  child: const Text('DONE'),\r\n+                ),\r\n+              ],\r\n+            ),\r\n+            behavior: SnackBarBehavior.floating,\r\n+            shape: RoundedRectangleBorder(\r\n+              borderRadius: BorderRadius.circular(8),\r\n+            ),\r\n+          ),\r\n         );\r\n         setState(() => _isDirty = false);\r\n-        // Navigate back\r\n-        Navigator.of(context).pop();\r\n       }\r\n     } catch (e) {\r\n       if (mounted) {\r\n         ScaffoldMessenger.of(context).clearSnackBars();\r\n-        ScaffoldMessenger.of(\r\n-          context,\r\n-        ).showSnackBar(SnackBar(content: Text('Error saving note: $e')));\r\n+        ScaffoldMessenger.of(context).showSnackBar(\r\n+          SnackBar(\r\n+            content: Row(\r\n+              children: [\r\n+                const Icon(Icons.error_outline, color: Colors.white),\r\n+                const SizedBox(width: 16),\r\n+                Expanded(child: Text('Error saving note: $e')),\r\n+              ],\r\n+            ),\r\n+            behavior: SnackBarBehavior.floating,\r\n+            backgroundColor: Colors.red,\r\n+          ),\r\n+        );\r\n       }\r\n     }\r\n   }\r\n \r\n@@ -98,9 +154,9 @@\n               TextButton(\r\n                 onPressed: () => Navigator.pop(context, false), // don't save\r\n                 child: const Text('DISCARD'),\r\n               ),\r\n-              TextButton(\r\n+              FilledButton(\r\n                 onPressed: () => Navigator.pop(context, true), // save\r\n                 child: const Text('SAVE'),\r\n               ),\r\n             ],\r\n@@ -115,58 +171,90 @@\n   }\r\n \r\n   @override\r\n   Widget build(BuildContext context) {\r\n+    final theme = Theme.of(context);\r\n     final async = ref.watch(noteEditorControllerProvider(widget.originalNote));\r\n \r\n     return WillPopScope(\r\n       onWillPop: _onWillPop,\r\n       child: Scaffold(\r\n         appBar: AppBar(\r\n-          title: Text(widget.originalNote == null ? 'New Note' : 'Edit Note'),\r\n+          title: Text(\r\n+            widget.originalNote == null ? 'New Note' : 'Edit Note',\r\n+            style: theme.textTheme.titleLarge,\r\n+          ),\r\n           actions: [\r\n             if (_isDirty)\r\n-              IconButton(\r\n-                icon: const Icon(Icons.save),\r\n-                onPressed: async.isLoading ? null : _save,\r\n-                tooltip: 'Save changes',\r\n+              Padding(\r\n+                padding: const EdgeInsets.only(right: 8.0),\r\n+                child: FilledButton.icon(\r\n+                  onPressed: async.isLoading ? null : _save,\r\n+                  icon: const Icon(Icons.save),\r\n+                  label: const Text('Save'),\r\n+                ),\r\n               ),\r\n           ],\r\n         ),\r\n-        body: Padding(\r\n-          padding: const EdgeInsets.all(16),\r\n+        body: SafeArea(\r\n           child: Column(\r\n             children: [\r\n-              TextField(\r\n-                controller: _titleCtrl,\r\n-                decoration: InputDecoration(\r\n-                  labelText: 'Title',\r\n-                  errorText:\r\n-                      _submitted && _titleCtrl.text.trim().isEmpty\r\n-                          ? 'Title is required'\r\n-                          : null,\r\n-                ),\r\n-                textCapitalization: TextCapitalization.sentences,\r\n-              ),\r\n-              const SizedBox(height: 16),\r\n+              if (async.isLoading)\r\n+                const LinearProgressIndicator()\r\n+              else\r\n+                const SizedBox(height: 2), // Placeholder for consistent layout\r\n               Expanded(\r\n-                child: TextField(\r\n-                  controller: _contentCtrl,\r\n-                  maxLines: null,\r\n-                  expands: true,\r\n-                  textCapitalization: TextCapitalization.sentences,\r\n-                  decoration: const InputDecoration(\r\n-                    labelText: 'Content',\r\n-                    alignLabelWithHint: true,\r\n-                    border: OutlineInputBorder(),\r\n-                  ),\r\n+                child: CustomScrollView(\r\n+                  slivers: [\r\n+                    SliverToBoxAdapter(\r\n+                      child: Padding(\r\n+                        padding: const EdgeInsets.all(16),\r\n+                        child: Column(\r\n+                          children: [\r\n+                            TextField(\r\n+                              controller: _titleCtrl,\r\n+                              focusNode: _titleFocus,\r\n+                              style: theme.textTheme.headlineSmall,\r\n+                              decoration: InputDecoration(\r\n+                                hintText: 'Note title',\r\n+                                border: InputBorder.none,\r\n+                                errorText:\r\n+                                    _submitted && _titleCtrl.text.trim().isEmpty\r\n+                                        ? 'Title is required'\r\n+                                        : null,\r\n+                                errorStyle: const TextStyle(fontSize: 12),\r\n+                              ),\r\n+                              textCapitalization: TextCapitalization.sentences,\r\n+                              onSubmitted: (_) => _contentFocus.requestFocus(),\r\n+                            ),\r\n+                            const Divider(),\r\n+                          ],\r\n+                        ),\r\n+                      ),\r\n+                    ),\r\n+                    SliverFillRemaining(\r\n+                      hasScrollBody: true,\r\n+                      child: Container(\r\n+                        padding: const EdgeInsets.all(16),\r\n+                        child: TextField(\r\n+                          controller: _contentCtrl,\r\n+                          focusNode: _contentFocus,\r\n+                          maxLines: null,\r\n+                          style: theme.textTheme.bodyLarge,\r\n+                          decoration: InputDecoration(\r\n+                            hintText: 'Start typing your note...',\r\n+                            border: InputBorder.none,\r\n+                            hintStyle: theme.textTheme.bodyLarge?.copyWith(\r\n+                              color: theme.hintColor,\r\n+                            ),\r\n+                          ),\r\n+                          textCapitalization: TextCapitalization.sentences,\r\n+                        ),\r\n+                      ),\r\n+                    ),\r\n+                  ],\r\n                 ),\r\n               ),\r\n-              if (async.isLoading)\r\n-                const Padding(\r\n-                  padding: EdgeInsets.only(top: 8.0),\r\n-                  child: LinearProgressIndicator(),\r\n-                ),\r\n             ],\r\n           ),\r\n         ),\r\n       ),\r\n"
                },
                {
                    "date": 1744914265458,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,17 +18,29 @@\n   bool _submitted = false;\r\n   bool _isDirty = false;\r\n   final FocusNode _titleFocus = FocusNode();\r\n   final FocusNode _contentFocus = FocusNode();\r\n+  late String _selectedFont;\r\n \r\n+  // List of available fonts\r\n+  final List<String> _fonts = [\r\n+    'Roboto',\r\n+    'Lato',\r\n+    'OpenSans',\r\n+    'Montserrat',\r\n+    'PlayfairDisplay',\r\n+    'SourceCodePro',\r\n+  ];\r\n+\r\n   @override\r\n   void initState() {\r\n     super.initState();\r\n     final o = widget.originalNote;\r\n     // Remove .txt extension if present for display\r\n     final title = o?.title.replaceAll(RegExp(r'\\.txt$'), '') ?? '';\r\n     _titleCtrl = TextEditingController(text: title);\r\n     _contentCtrl = TextEditingController(text: o?.content ?? '');\r\n+    _selectedFont = o?.fontFamily ?? 'Roboto';\r\n \r\n     // Listen for changes to mark the note as dirty\r\n     _titleCtrl.addListener(_markDirty);\r\n     _contentCtrl.addListener(_markDirty);\r\n@@ -55,8 +67,40 @@\n     _contentFocus.dispose();\r\n     super.dispose();\r\n   }\r\n \r\n+  void _updateFont(String? font) {\r\n+    if (font != null && font != _selectedFont) {\r\n+      setState(() {\r\n+        _selectedFont = font;\r\n+        _isDirty = true;\r\n+      });\r\n+    }\r\n+  }\r\n+\r\n+  Widget _buildFontSelector() {\r\n+    return PopupMenuButton<String>(\r\n+      tooltip: 'Select font',\r\n+      initialValue: _selectedFont,\r\n+      itemBuilder:\r\n+          (context) =>\r\n+              _fonts.map((font) {\r\n+                return PopupMenuItem<String>(\r\n+                  value: font,\r\n+                  child: Text(\r\n+                    'Sample Text',\r\n+                    style: TextStyle(fontFamily: font),\r\n+                  ),\r\n+                );\r\n+              }).toList(),\r\n+      onSelected: _updateFont,\r\n+      child: Chip(\r\n+        avatar: const Icon(Icons.font_download),\r\n+        label: Text(_selectedFont, style: TextStyle(fontFamily: _selectedFont)),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n   Future<void> _save() async {\r\n     setState(() => _submitted = true);\r\n     if (_titleCtrl.text.trim().isEmpty) {\r\n       _titleFocus.requestFocus();\r\n@@ -86,9 +130,9 @@\n       // Save the note\r\n       final ctrl = ref.read(\r\n         noteEditorControllerProvider(widget.originalNote).notifier,\r\n       );\r\n-      await ctrl.save(_titleCtrl.text.trim(), _contentCtrl.text);\r\n+      await ctrl.save(_titleCtrl.text.trim(), _contentCtrl.text, _selectedFont);\r\n \r\n       // Explicitly refresh and wait for the notes list\r\n       await ref.refresh(notesControllerProvider.future);\r\n \r\n@@ -183,8 +227,12 @@\n             widget.originalNote == null ? 'New Note' : 'Edit Note',\r\n             style: theme.textTheme.titleLarge,\r\n           ),\r\n           actions: [\r\n+            Padding(\r\n+              padding: const EdgeInsets.symmetric(horizontal: 8.0),\r\n+              child: _buildFontSelector(),\r\n+            ),\r\n             if (_isDirty)\r\n               Padding(\r\n                 padding: const EdgeInsets.only(right: 8.0),\r\n                 child: FilledButton.icon(\r\n@@ -212,9 +260,11 @@\n                           children: [\r\n                             TextField(\r\n                               controller: _titleCtrl,\r\n                               focusNode: _titleFocus,\r\n-                              style: theme.textTheme.headlineSmall,\r\n+                              style: theme.textTheme.headlineSmall?.copyWith(\r\n+                                fontFamily: _selectedFont,\r\n+                              ),\r\n                               decoration: InputDecoration(\r\n                                 hintText: 'Note title',\r\n                                 border: InputBorder.none,\r\n                                 errorText:\r\n@@ -238,14 +288,17 @@\n                         child: TextField(\r\n                           controller: _contentCtrl,\r\n                           focusNode: _contentFocus,\r\n                           maxLines: null,\r\n-                          style: theme.textTheme.bodyLarge,\r\n+                          style: theme.textTheme.bodyLarge?.copyWith(\r\n+                            fontFamily: _selectedFont,\r\n+                          ),\r\n                           decoration: InputDecoration(\r\n                             hintText: 'Start typing your note...',\r\n                             border: InputBorder.none,\r\n                             hintStyle: theme.textTheme.bodyLarge?.copyWith(\r\n                               color: theme.hintColor,\r\n+                              fontFamily: _selectedFont,\r\n                             ),\r\n                           ),\r\n                           textCapitalization: TextCapitalization.sentences,\r\n                         ),\r\n"
                },
                {
                    "date": 1744914555658,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,9 @@\n import 'package:drivenotes/features/notes/presentation/providers/note_editor_controller.dart';\r\n import 'package:drivenotes/notes_controller.dart';\r\n import 'package:flutter/material.dart';\r\n import 'package:flutter_riverpod/flutter_riverpod.dart';\r\n+import 'package:google_fonts/google_fonts.dart';\r\n \r\n class NoteEditorPage extends ConsumerStatefulWidget {\r\n   final NoteModel? originalNote;\r\n   const NoteEditorPage({super.key, this.originalNote});\r\n@@ -20,18 +21,38 @@\n   final FocusNode _titleFocus = FocusNode();\r\n   final FocusNode _contentFocus = FocusNode();\r\n   late String _selectedFont;\r\n \r\n-  // List of available fonts\r\n-  final List<String> _fonts = [\r\n-    'Roboto',\r\n-    'Lato',\r\n-    'OpenSans',\r\n-    'Montserrat',\r\n-    'PlayfairDisplay',\r\n-    'SourceCodePro',\r\n+  // List of available fonts with their display names\r\n+  final List<Map<String, String>> _fonts = [\r\n+    {'name': 'Roboto', 'display': 'Roboto'},\r\n+    {'name': 'Lato', 'display': 'Lato'},\r\n+    {'name': 'Open Sans', 'display': 'OpenSans'},\r\n+    {'name': 'Montserrat', 'display': 'Montserrat'},\r\n+    {'name': 'Playfair Display', 'display': 'PlayfairDisplay'},\r\n+    {'name': 'Source Code Pro', 'display': 'SourceCodePro'},\r\n   ];\r\n \r\n+  TextStyle _getFontStyle(String fontName, [TextStyle? base]) {\r\n+    final style = base ?? const TextStyle();\r\n+    switch (fontName) {\r\n+      case 'Roboto':\r\n+        return GoogleFonts.roboto(textStyle: style);\r\n+      case 'Lato':\r\n+        return GoogleFonts.lato(textStyle: style);\r\n+      case 'OpenSans':\r\n+        return GoogleFonts.openSans(textStyle: style);\r\n+      case 'Montserrat':\r\n+        return GoogleFonts.montserrat(textStyle: style);\r\n+      case 'PlayfairDisplay':\r\n+        return GoogleFonts.playfairDisplay(textStyle: style);\r\n+      case 'SourceCodePro':\r\n+        return GoogleFonts.sourceCodePro(textStyle: style);\r\n+      default:\r\n+        return GoogleFonts.roboto(textStyle: style);\r\n+    }\r\n+  }\r\n+\r\n   @override\r\n   void initState() {\r\n     super.initState();\r\n     final o = widget.originalNote;\r\n@@ -84,19 +105,25 @@\n       itemBuilder:\r\n           (context) =>\r\n               _fonts.map((font) {\r\n                 return PopupMenuItem<String>(\r\n-                  value: font,\r\n+                  value: font['display'],\r\n                   child: Text(\r\n-                    'Sample Text',\r\n-                    style: TextStyle(fontFamily: font),\r\n+                    'The quick brown fox',\r\n+                    style: _getFontStyle(font['display']!),\r\n                   ),\r\n                 );\r\n               }).toList(),\r\n       onSelected: _updateFont,\r\n       child: Chip(\r\n         avatar: const Icon(Icons.font_download),\r\n-        label: Text(_selectedFont, style: TextStyle(fontFamily: _selectedFont)),\r\n+        label: Text(\r\n+          _fonts.firstWhere(\r\n+            (f) => f['display'] == _selectedFont,\r\n+            orElse: () => _fonts.first,\r\n+          )['name']!,\r\n+          style: _getFontStyle(_selectedFont),\r\n+        ),\r\n       ),\r\n     );\r\n   }\r\n \r\n@@ -260,10 +287,11 @@\n                           children: [\r\n                             TextField(\r\n                               controller: _titleCtrl,\r\n                               focusNode: _titleFocus,\r\n-                              style: theme.textTheme.headlineSmall?.copyWith(\r\n-                                fontFamily: _selectedFont,\r\n+                              style: _getFontStyle(\r\n+                                _selectedFont,\r\n+                                theme.textTheme.headlineSmall,\r\n                               ),\r\n                               decoration: InputDecoration(\r\n                                 hintText: 'Note title',\r\n                                 border: InputBorder.none,\r\n@@ -288,17 +316,20 @@\n                         child: TextField(\r\n                           controller: _contentCtrl,\r\n                           focusNode: _contentFocus,\r\n                           maxLines: null,\r\n-                          style: theme.textTheme.bodyLarge?.copyWith(\r\n-                            fontFamily: _selectedFont,\r\n+                          style: _getFontStyle(\r\n+                            _selectedFont,\r\n+                            theme.textTheme.bodyLarge,\r\n                           ),\r\n                           decoration: InputDecoration(\r\n                             hintText: 'Start typing your note...',\r\n                             border: InputBorder.none,\r\n-                            hintStyle: theme.textTheme.bodyLarge?.copyWith(\r\n-                              color: theme.hintColor,\r\n-                              fontFamily: _selectedFont,\r\n+                            hintStyle: _getFontStyle(\r\n+                              _selectedFont,\r\n+                              theme.textTheme.bodyLarge?.copyWith(\r\n+                                color: theme.hintColor,\r\n+                              ),\r\n                             ),\r\n                           ),\r\n                           textCapitalization: TextCapitalization.sentences,\r\n                         ),\r\n"
                },
                {
                    "date": 1744915182111,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,9 @@\n import 'package:drivenotes/notes_controller.dart';\r\n import 'package:flutter/material.dart';\r\n import 'package:flutter_riverpod/flutter_riverpod.dart';\r\n import 'package:google_fonts/google_fonts.dart';\r\n+import 'package:shared_preferences/shared_preferences.dart';\r\n \r\n class NoteEditorPage extends ConsumerStatefulWidget {\r\n   final NoteModel? originalNote;\r\n   const NoteEditorPage({super.key, this.originalNote});\r\n@@ -59,9 +60,9 @@\n     // Remove .txt extension if present for display\r\n     final title = o?.title.replaceAll(RegExp(r'\\.txt$'), '') ?? '';\r\n     _titleCtrl = TextEditingController(text: title);\r\n     _contentCtrl = TextEditingController(text: o?.content ?? '');\r\n-    _selectedFont = o?.fontFamily ?? 'Roboto';\r\n+    _loadLastUsedFont();\r\n \r\n     // Listen for changes to mark the note as dirty\r\n     _titleCtrl.addListener(_markDirty);\r\n     _contentCtrl.addListener(_markDirty);\r\n@@ -73,8 +74,20 @@\n       });\r\n     }\r\n   }\r\n \r\n+  Future<void> _loadLastUsedFont() async {\r\n+    final prefs = await SharedPreferences.getInstance();\r\n+    setState(() {\r\n+      _selectedFont = prefs.getString('last_used_font') ?? 'Roboto';\r\n+    });\r\n+  }\r\n+\r\n+  Future<void> _saveLastUsedFont(String font) async {\r\n+    final prefs = await SharedPreferences.getInstance();\r\n+    await prefs.setString('last_used_font', font);\r\n+  }\r\n+\r\n   void _markDirty() {\r\n     if (!_isDirty) {\r\n       setState(() => _isDirty = true);\r\n     }\r\n@@ -94,8 +107,9 @@\n       setState(() {\r\n         _selectedFont = font;\r\n         _isDirty = true;\r\n       });\r\n+      _saveLastUsedFont(font);\r\n     }\r\n   }\r\n \r\n   Widget _buildFontSelector() {\r\n@@ -157,41 +171,16 @@\n       // Save the note\r\n       final ctrl = ref.read(\r\n         noteEditorControllerProvider(widget.originalNote).notifier,\r\n       );\r\n-      await ctrl.save(_titleCtrl.text.trim(), _contentCtrl.text, _selectedFont);\r\n+      await ctrl.save(_titleCtrl.text.trim(), _contentCtrl.text);\r\n \r\n       // Explicitly refresh and wait for the notes list\r\n       await ref.refresh(notesControllerProvider.future);\r\n \r\n       if (mounted) {\r\n-        // Clear the loading snackbar\r\n-        ScaffoldMessenger.of(context).clearSnackBars();\r\n-        // Show success message with animation\r\n-        ScaffoldMessenger.of(context).showSnackBar(\r\n-          SnackBar(\r\n-            content: Row(\r\n-              children: [\r\n-                const Icon(Icons.check_circle, color: Colors.white),\r\n-                const SizedBox(width: 16),\r\n-                const Text('Note saved successfully!'),\r\n-                const Spacer(),\r\n-                TextButton(\r\n-                  onPressed: () {\r\n-                    ScaffoldMessenger.of(context).hideCurrentSnackBar();\r\n-                    Navigator.of(context).pop();\r\n-                  },\r\n-                  child: const Text('DONE'),\r\n-                ),\r\n-              ],\r\n-            ),\r\n-            behavior: SnackBarBehavior.floating,\r\n-            shape: RoundedRectangleBorder(\r\n-              borderRadius: BorderRadius.circular(8),\r\n-            ),\r\n-          ),\r\n-        );\r\n-        setState(() => _isDirty = false);\r\n+        // Navigate back to notes list\r\n+        Navigator.of(context).pop();\r\n       }\r\n     } catch (e) {\r\n       if (mounted) {\r\n         ScaffoldMessenger.of(context).clearSnackBars();\r\n"
                },
                {
                    "date": 1744915268617,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,336 +1,263 @@\n-import 'package:drivenotes/features/notes/domain/models/note_model.dart';\r\n-import 'package:drivenotes/features/notes/presentation/providers/note_editor_controller.dart';\r\n-import 'package:drivenotes/notes_controller.dart';\r\n-import 'package:flutter/material.dart';\r\n-import 'package:flutter_riverpod/flutter_riverpod.dart';\r\n-import 'package:google_fonts/google_fonts.dart';\r\n-import 'package:shared_preferences/shared_preferences.dart';\r\n-\r\n-class NoteEditorPage extends ConsumerStatefulWidget {\r\n-  final NoteModel? originalNote;\r\n-  const NoteEditorPage({super.key, this.originalNote});\r\n-\r\n-  @override\r\n-  ConsumerState<NoteEditorPage> createState() => _NoteEditorPageState();\r\n-}\r\n-\r\n-class _NoteEditorPageState extends ConsumerState<NoteEditorPage> {\r\n-  late final TextEditingController _titleCtrl;\r\n-  late final TextEditingController _contentCtrl;\r\n-  bool _submitted = false;\r\n-  bool _isDirty = false;\r\n-  final FocusNode _titleFocus = FocusNode();\r\n-  final FocusNode _contentFocus = FocusNode();\r\n-  late String _selectedFont;\r\n-\r\n-  // List of available fonts with their display names\r\n-  final List<Map<String, String>> _fonts = [\r\n-    {'name': 'Roboto', 'display': 'Roboto'},\r\n-    {'name': 'Lato', 'display': 'Lato'},\r\n-    {'name': 'Open Sans', 'display': 'OpenSans'},\r\n-    {'name': 'Montserrat', 'display': 'Montserrat'},\r\n-    {'name': 'Playfair Display', 'display': 'PlayfairDisplay'},\r\n-    {'name': 'Source Code Pro', 'display': 'SourceCodePro'},\r\n-  ];\r\n-\r\n-  TextStyle _getFontStyle(String fontName, [TextStyle? base]) {\r\n-    final style = base ?? const TextStyle();\r\n-    switch (fontName) {\r\n-      case 'Roboto':\r\n-        return GoogleFonts.roboto(textStyle: style);\r\n-      case 'Lato':\r\n-        return GoogleFonts.lato(textStyle: style);\r\n-      case 'OpenSans':\r\n-        return GoogleFonts.openSans(textStyle: style);\r\n-      case 'Montserrat':\r\n-        return GoogleFonts.montserrat(textStyle: style);\r\n-      case 'PlayfairDisplay':\r\n-        return GoogleFonts.playfairDisplay(textStyle: style);\r\n-      case 'SourceCodePro':\r\n-        return GoogleFonts.sourceCodePro(textStyle: style);\r\n-      default:\r\n-        return GoogleFonts.roboto(textStyle: style);\r\n-    }\r\n-  }\r\n-\r\n-  @override\r\n-  void initState() {\r\n-    super.initState();\r\n-    final o = widget.originalNote;\r\n-    // Remove .txt extension if present for display\r\n-    final title = o?.title.replaceAll(RegExp(r'\\.txt$'), '') ?? '';\r\n-    _titleCtrl = TextEditingController(text: title);\r\n-    _contentCtrl = TextEditingController(text: o?.content ?? '');\r\n-    _loadLastUsedFont();\r\n-\r\n-    // Listen for changes to mark the note as dirty\r\n-    _titleCtrl.addListener(_markDirty);\r\n-    _contentCtrl.addListener(_markDirty);\r\n-\r\n-    // Auto-focus title if new note\r\n-    if (o == null) {\r\n-      WidgetsBinding.instance.addPostFrameCallback((_) {\r\n-        _titleFocus.requestFocus();\r\n-      });\r\n-    }\r\n-  }\r\n-\r\n-  Future<void> _loadLastUsedFont() async {\r\n-    final prefs = await SharedPreferences.getInstance();\r\n-    setState(() {\r\n-      _selectedFont = prefs.getString('last_used_font') ?? 'Roboto';\r\n-    });\r\n-  }\r\n-\r\n-  Future<void> _saveLastUsedFont(String font) async {\r\n-    final prefs = await SharedPreferences.getInstance();\r\n-    await prefs.setString('last_used_font', font);\r\n-  }\r\n-\r\n-  void _markDirty() {\r\n-    if (!_isDirty) {\r\n-      setState(() => _isDirty = true);\r\n-    }\r\n-  }\r\n-\r\n-  @override\r\n-  void dispose() {\r\n-    _titleCtrl.dispose();\r\n-    _contentCtrl.dispose();\r\n-    _titleFocus.dispose();\r\n-    _contentFocus.dispose();\r\n-    super.dispose();\r\n-  }\r\n-\r\n-  void _updateFont(String? font) {\r\n-    if (font != null && font != _selectedFont) {\r\n-      setState(() {\r\n-        _selectedFont = font;\r\n-        _isDirty = true;\r\n-      });\r\n-      _saveLastUsedFont(font);\r\n-    }\r\n-  }\r\n-\r\n-  Widget _buildFontSelector() {\r\n-    return PopupMenuButton<String>(\r\n-      tooltip: 'Select font',\r\n-      initialValue: _selectedFont,\r\n-      itemBuilder:\r\n-          (context) =>\r\n-              _fonts.map((font) {\r\n-                return PopupMenuItem<String>(\r\n-                  value: font['display'],\r\n-                  child: Text(\r\n-                    'The quick brown fox',\r\n-                    style: _getFontStyle(font['display']!),\r\n-                  ),\r\n-                );\r\n-              }).toList(),\r\n-      onSelected: _updateFont,\r\n-      child: Chip(\r\n-        avatar: const Icon(Icons.font_download),\r\n-        label: Text(\r\n-          _fonts.firstWhere(\r\n-            (f) => f['display'] == _selectedFont,\r\n-            orElse: () => _fonts.first,\r\n-          )['name']!,\r\n-          style: _getFontStyle(_selectedFont),\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  Future<void> _save() async {\r\n-    setState(() => _submitted = true);\r\n-    if (_titleCtrl.text.trim().isEmpty) {\r\n-      _titleFocus.requestFocus();\r\n-      return;\r\n-    }\r\n-\r\n-    try {\r\n-      // Show loading indicator\r\n-      if (mounted) {\r\n-        ScaffoldMessenger.of(context).showSnackBar(\r\n-          const SnackBar(\r\n-            content: Row(\r\n-              children: [\r\n-                SizedBox(\r\n-                  height: 20,\r\n-                  width: 20,\r\n-                  child: CircularProgressIndicator(strokeWidth: 2),\r\n-                ),\r\n-                SizedBox(width: 16),\r\n-                Text('Saving note...'),\r\n-              ],\r\n-            ),\r\n-          ),\r\n-        );\r\n-      }\r\n-\r\n-      // Save the note\r\n-      final ctrl = ref.read(\r\n-        noteEditorControllerProvider(widget.originalNote).notifier,\r\n-      );\r\n-      await ctrl.save(_titleCtrl.text.trim(), _contentCtrl.text);\r\n-\r\n-      // Explicitly refresh and wait for the notes list\r\n-      await ref.refresh(notesControllerProvider.future);\r\n-\r\n-      if (mounted) {\r\n-        // Navigate back to notes list\r\n-        Navigator.of(context).pop();\r\n-      }\r\n-    } catch (e) {\r\n-      if (mounted) {\r\n-        ScaffoldMessenger.of(context).clearSnackBars();\r\n-        ScaffoldMessenger.of(context).showSnackBar(\r\n-          SnackBar(\r\n-            content: Row(\r\n-              children: [\r\n-                const Icon(Icons.error_outline, color: Colors.white),\r\n-                const SizedBox(width: 16),\r\n-                Expanded(child: Text('Error saving note: $e')),\r\n-              ],\r\n-            ),\r\n-            behavior: SnackBarBehavior.floating,\r\n-            backgroundColor: Colors.red,\r\n-          ),\r\n-        );\r\n-      }\r\n-    }\r\n-  }\r\n-\r\n-  Future<bool> _onWillPop() async {\r\n-    if (!_isDirty) return true;\r\n-\r\n-    final result = await showDialog<bool>(\r\n-      context: context,\r\n-      builder:\r\n-          (context) => AlertDialog(\r\n-            title: const Text('Unsaved Changes'),\r\n-            content: const Text('Do you want to save your changes?'),\r\n-            actions: [\r\n-              TextButton(\r\n-                onPressed: () => Navigator.pop(context, false), // don't save\r\n-                child: const Text('DISCARD'),\r\n-              ),\r\n-              FilledButton(\r\n-                onPressed: () => Navigator.pop(context, true), // save\r\n-                child: const Text('SAVE'),\r\n-              ),\r\n-            ],\r\n-          ),\r\n-    );\r\n-\r\n-    if (result == true) {\r\n-      await _save();\r\n-      return false; // _save will handle navigation\r\n-    }\r\n-    return true; // allow pop if not saving\r\n-  }\r\n-\r\n-  @override\r\n-  Widget build(BuildContext context) {\r\n-    final theme = Theme.of(context);\r\n-    final async = ref.watch(noteEditorControllerProvider(widget.originalNote));\r\n-\r\n-    return WillPopScope(\r\n-      onWillPop: _onWillPop,\r\n-      child: Scaffold(\r\n-        appBar: AppBar(\r\n-          title: Text(\r\n-            widget.originalNote == null ? 'New Note' : 'Edit Note',\r\n-            style: theme.textTheme.titleLarge,\r\n-          ),\r\n-          actions: [\r\n-            Padding(\r\n-              padding: const EdgeInsets.symmetric(horizontal: 8.0),\r\n-              child: _buildFontSelector(),\r\n-            ),\r\n-            if (_isDirty)\r\n-              Padding(\r\n-                padding: const EdgeInsets.only(right: 8.0),\r\n-                child: FilledButton.icon(\r\n-                  onPressed: async.isLoading ? null : _save,\r\n-                  icon: const Icon(Icons.save),\r\n-                  label: const Text('Save'),\r\n-                ),\r\n-              ),\r\n-          ],\r\n-        ),\r\n-        body: SafeArea(\r\n-          child: Column(\r\n-            children: [\r\n-              if (async.isLoading)\r\n-                const LinearProgressIndicator()\r\n-              else\r\n-                const SizedBox(height: 2), // Placeholder for consistent layout\r\n-              Expanded(\r\n-                child: CustomScrollView(\r\n-                  slivers: [\r\n-                    SliverToBoxAdapter(\r\n-                      child: Padding(\r\n-                        padding: const EdgeInsets.all(16),\r\n-                        child: Column(\r\n-                          children: [\r\n-                            TextField(\r\n-                              controller: _titleCtrl,\r\n-                              focusNode: _titleFocus,\r\n-                              style: _getFontStyle(\r\n-                                _selectedFont,\r\n-                                theme.textTheme.headlineSmall,\r\n-                              ),\r\n-                              decoration: InputDecoration(\r\n-                                hintText: 'Note title',\r\n-                                border: InputBorder.none,\r\n-                                errorText:\r\n-                                    _submitted && _titleCtrl.text.trim().isEmpty\r\n-                                        ? 'Title is required'\r\n-                                        : null,\r\n-                                errorStyle: const TextStyle(fontSize: 12),\r\n-                              ),\r\n-                              textCapitalization: TextCapitalization.sentences,\r\n-                              onSubmitted: (_) => _contentFocus.requestFocus(),\r\n-                            ),\r\n-                            const Divider(),\r\n-                          ],\r\n-                        ),\r\n-                      ),\r\n-                    ),\r\n-                    SliverFillRemaining(\r\n-                      hasScrollBody: true,\r\n-                      child: Container(\r\n-                        padding: const EdgeInsets.all(16),\r\n-                        child: TextField(\r\n-                          controller: _contentCtrl,\r\n-                          focusNode: _contentFocus,\r\n-                          maxLines: null,\r\n-                          style: _getFontStyle(\r\n-                            _selectedFont,\r\n-                            theme.textTheme.bodyLarge,\r\n-                          ),\r\n-                          decoration: InputDecoration(\r\n-                            hintText: 'Start typing your note...',\r\n-                            border: InputBorder.none,\r\n-                            hintStyle: _getFontStyle(\r\n-                              _selectedFont,\r\n-                              theme.textTheme.bodyLarge?.copyWith(\r\n-                                color: theme.hintColor,\r\n-                              ),\r\n-                            ),\r\n-                          ),\r\n-                          textCapitalization: TextCapitalization.sentences,\r\n-                        ),\r\n-                      ),\r\n-                    ),\r\n-                  ],\r\n-                ),\r\n-              ),\r\n-            ],\r\n-          ),\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-}\r\n+import 'package:drivenotes/features/notes/domain/models/note_model.dart';\n+import 'package:drivenotes/features/notes/presentation/providers/note_editor_controller.dart';\n+import 'package:drivenotes/notes_controller.dart';\n+import 'package:flutter/material.dart';\n+import 'package:flutter_riverpod/flutter_riverpod.dart';\n+\n+class NoteEditorPage extends ConsumerStatefulWidget {\n+  final NoteModel? originalNote;\n+  const NoteEditorPage({super.key, this.originalNote});\n+\n+  @override\n+  ConsumerState<NoteEditorPage> createState() => _NoteEditorPageState();\n+}\n+\n+class _NoteEditorPageState extends ConsumerState<NoteEditorPage> {\n+  late final TextEditingController _titleCtrl;\n+  late final TextEditingController _contentCtrl;\n+  bool _submitted = false;\n+  bool _isDirty = false;\n+  final FocusNode _titleFocus = FocusNode();\n+  final FocusNode _contentFocus = FocusNode();\n+\n+  @override\n+  void initState() {\n+    super.initState();\n+    final o = widget.originalNote;\n+    // Remove .txt extension if present for display\n+    final title = o?.title.replaceAll(RegExp(r'\\.txt$'), '') ?? '';\n+    _titleCtrl = TextEditingController(text: title);\n+    _contentCtrl = TextEditingController(text: o?.content ?? '');\n+\n+    // Listen for changes to mark the note as dirty\n+    _titleCtrl.addListener(_markDirty);\n+    _contentCtrl.addListener(_markDirty);\n+\n+    // Auto-focus title if new note\n+    if (o == null) {\n+      WidgetsBinding.instance.addPostFrameCallback((_) {\n+        _titleFocus.requestFocus();\n+      });\n+    }\n+  }\n+\n+  void _markDirty() {\n+    if (!_isDirty) {\n+      setState(() => _isDirty = true);\n+    }\n+  }\n+\n+  @override\n+  void dispose() {\n+    _titleCtrl.dispose();\n+    _contentCtrl.dispose();\n+    _titleFocus.dispose();\n+    _contentFocus.dispose();\n+    super.dispose();\n+  }\n+\n+  Future<void> _save() async {\n+    setState(() => _submitted = true);\n+    if (_titleCtrl.text.trim().isEmpty) {\n+      _titleFocus.requestFocus();\n+      return;\n+    }\n+\n+    try {\n+      // Show loading indicator\n+      if (mounted) {\n+        ScaffoldMessenger.of(context).showSnackBar(\n+          const SnackBar(\n+            content: Row(\n+              children: [\n+                SizedBox(\n+                  height: 20,\n+                  width: 20,\n+                  child: CircularProgressIndicator(strokeWidth: 2),\n+                ),\n+                SizedBox(width: 16),\n+                Text('Saving note...'),\n+              ],\n+            ),\n+          ),\n+        );\n+      }\n+\n+      // Save the note\n+      final ctrl = ref.read(\n+        noteEditorControllerProvider(widget.originalNote).notifier,\n+      );\n+      await ctrl.save(_titleCtrl.text.trim(), _contentCtrl.text);\n+\n+      // Explicitly refresh and wait for the notes list\n+      await ref.refresh(notesControllerProvider.future);\n+\n+      if (mounted) {\n+        // Clear the loading snackbar\n+        ScaffoldMessenger.of(context).clearSnackBars();\n+        // Show success message with animation\n+        ScaffoldMessenger.of(context).showSnackBar(\n+          SnackBar(\n+            content: Row(\n+              children: [\n+                const Icon(Icons.check_circle, color: Colors.white),\n+                const SizedBox(width: 16),\n+                const Text('Note saved successfully!'),\n+                const Spacer(),\n+                TextButton(\n+                  onPressed: () {\n+                    ScaffoldMessenger.of(context).hideCurrentSnackBar();\n+                    Navigator.of(context).pop();\n+                  },\n+                  child: const Text('DONE'),\n+                ),\n+              ],\n+            ),\n+            behavior: SnackBarBehavior.floating,\n+            shape: RoundedRectangleBorder(\n+              borderRadius: BorderRadius.circular(8),\n+            ),\n+          ),\n+        );\n+        setState(() => _isDirty = false);\n+      }\n+    } catch (e) {\n+      if (mounted) {\n+        ScaffoldMessenger.of(context).clearSnackBars();\n+        ScaffoldMessenger.of(context).showSnackBar(\n+          SnackBar(\n+            content: Row(\n+              children: [\n+                const Icon(Icons.error_outline, color: Colors.white),\n+                const SizedBox(width: 16),\n+                Expanded(child: Text('Error saving note: $e')),\n+              ],\n+            ),\n+            behavior: SnackBarBehavior.floating,\n+            backgroundColor: Colors.red,\n+          ),\n+        );\n+      }\n+    }\n+  }\n+\n+  Future<bool> _onWillPop() async {\n+    if (!_isDirty) return true;\n+\n+    final result = await showDialog<bool>(\n+      context: context,\n+      builder:\n+          (context) => AlertDialog(\n+            title: const Text('Unsaved Changes'),\n+            content: const Text('Do you want to save your changes?'),\n+            actions: [\n+              TextButton(\n+                onPressed: () => Navigator.pop(context, false), // don't save\n+                child: const Text('DISCARD'),\n+              ),\n+              FilledButton(\n+                onPressed: () => Navigator.pop(context, true), // save\n+                child: const Text('SAVE'),\n+              ),\n+            ],\n+          ),\n+    );\n+\n+    if (result == true) {\n+      await _save();\n+      return false; // _save will handle navigation\n+    }\n+    return true; // allow pop if not saving\n+  }\n+\n+  @override\n+  Widget build(BuildContext context) {\n+    final theme = Theme.of(context);\n+    final async = ref.watch(noteEditorControllerProvider(widget.originalNote));\n+\n+    return WillPopScope(\n+      onWillPop: _onWillPop,\n+      child: Scaffold(\n+        appBar: AppBar(\n+          title: Text(\n+            widget.originalNote == null ? 'New Note' : 'Edit Note',\n+            style: theme.textTheme.titleLarge,\n+          ),\n+          actions: [\n+            if (_isDirty)\n+              Padding(\n+                padding: const EdgeInsets.only(right: 8.0),\n+                child: FilledButton.icon(\n+                  onPressed: async.isLoading ? null : _save,\n+                  icon: const Icon(Icons.save),\n+                  label: const Text('Save'),\n+                ),\n+              ),\n+          ],\n+        ),\n+        body: SafeArea(\n+          child: Column(\n+            children: [\n+              if (async.isLoading)\n+                const LinearProgressIndicator()\n+              else\n+                const SizedBox(height: 2), // Placeholder for consistent layout\n+              Expanded(\n+                child: CustomScrollView(\n+                  slivers: [\n+                    SliverToBoxAdapter(\n+                      child: Padding(\n+                        padding: const EdgeInsets.all(16),\n+                        child: Column(\n+                          children: [\n+                            TextField(\n+                              controller: _titleCtrl,\n+                              focusNode: _titleFocus,\n+                              style: theme.textTheme.headlineSmall,\n+                              decoration: InputDecoration(\n+                                hintText: 'Note title',\n+                                border: InputBorder.none,\n+                                errorText:\n+                                    _submitted && _titleCtrl.text.trim().isEmpty\n+                                        ? 'Title is required'\n+                                        : null,\n+                                errorStyle: const TextStyle(fontSize: 12),\n+                              ),\n+                              textCapitalization: TextCapitalization.sentences,\n+                              onSubmitted: (_) => _contentFocus.requestFocus(),\n+                            ),\n+                            const Divider(),\n+                          ],\n+                        ),\n+                      ),\n+                    ),\n+                    SliverFillRemaining(\n+                      hasScrollBody: true,\n+                      child: Container(\n+                        padding: const EdgeInsets.all(16),\n+                        child: TextField(\n+                          controller: _contentCtrl,\n+                          focusNode: _contentFocus,\n+                          maxLines: null,\n+                          style: theme.textTheme.bodyLarge,\n+                          decoration: InputDecoration(\n+                            hintText: 'Start typing your note...',\n+                            border: InputBorder.none,\n+                            hintStyle: theme.textTheme.bodyLarge?.copyWith(\n+                              color: theme.hintColor,\n+                            ),\n+                          ),\n+                          textCapitalization: TextCapitalization.sentences,\n+                        ),\n+                      ),\n+                    ),\n+                  ],\n+                ),\n+              ),\n+            ],\n+          ),\n+        ),\n+      ),\n+    );\n+  }\n+}\n"
                },
                {
                    "date": 1744915441996,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,9 @@\n import 'package:drivenotes/features/notes/presentation/providers/note_editor_controller.dart';\n import 'package:drivenotes/notes_controller.dart';\n import 'package:flutter/material.dart';\n import 'package:flutter_riverpod/flutter_riverpod.dart';\n+import 'package:flutter/services.dart';\n \n class NoteEditorPage extends ConsumerStatefulWidget {\n   final NoteModel? originalNote;\n   const NoteEditorPage({super.key, this.originalNote});\n@@ -19,53 +20,183 @@\n   bool _isDirty = false;\n   final FocusNode _titleFocus = FocusNode();\n   final FocusNode _contentFocus = FocusNode();\n \n+  // Text selection controls\n+  TextSelection? _currentSelection;\n+  bool _showFormatBar = false;\n+  final LayerLink _formatBarLink = LayerLink();\n+  OverlayEntry? _formatBarEntry;\n+\n   @override\n   void initState() {\n     super.initState();\n     final o = widget.originalNote;\n     // Remove .txt extension if present for display\n     final title = o?.title.replaceAll(RegExp(r'\\.txt$'), '') ?? '';\n     _titleCtrl = TextEditingController(text: title);\n-    _contentCtrl = TextEditingController(text: o?.content ?? '');\n \n+    // Parse content for bold markers\n+    final content = o?.content ?? '';\n+    _contentCtrl = TextEditingController(text: _stripBoldMarkers(content));\n+\n     // Listen for changes to mark the note as dirty\n     _titleCtrl.addListener(_markDirty);\n     _contentCtrl.addListener(_markDirty);\n \n+    // Listen for selection changes\n+    _contentFocus.addListener(_onFocusChange);\n+\n     // Auto-focus title if new note\n     if (o == null) {\n       WidgetsBinding.instance.addPostFrameCallback((_) {\n         _titleFocus.requestFocus();\n       });\n     }\n   }\n \n-  void _markDirty() {\n-    if (!_isDirty) {\n-      setState(() => _isDirty = true);\n+  String _stripBoldMarkers(String text) {\n+    return text.replaceAll('**', '');\n+  }\n+\n+  void _onFocusChange() {\n+    if (!_contentFocus.hasFocus) {\n+      _hideFormatBar();\n     }\n   }\n \n+  void _hideFormatBar() {\n+    _formatBarEntry?.remove();\n+    _formatBarEntry = null;\n+    setState(() => _showFormatBar = false);\n+  }\n+\n+  void _showFormatBarOverlay() {\n+    _hideFormatBar();\n+\n+    final RenderBox renderBox = context.findRenderObject() as RenderBox;\n+    final Offset offset = renderBox.localToGlobal(Offset.zero);\n+\n+    _formatBarEntry = OverlayEntry(\n+      builder:\n+          (context) => Positioned(\n+            left: offset.dx + 16,\n+            top:\n+                offset.dy + 120, // Adjust this value to position the format bar\n+            child: CompositedTransformFollower(\n+              link: _formatBarLink,\n+              showWhenUnlinked: false,\n+              offset: const Offset(0, -50),\n+              child: Material(\n+                elevation: 8,\n+                borderRadius: BorderRadius.circular(8),\n+                child: Container(\n+                  padding: const EdgeInsets.symmetric(\n+                    horizontal: 8,\n+                    vertical: 4,\n+                  ),\n+                  decoration: BoxDecoration(\n+                    color: Theme.of(context).colorScheme.surface,\n+                    borderRadius: BorderRadius.circular(8),\n+                    border: Border.all(\n+                      color: Theme.of(\n+                        context,\n+                      ).colorScheme.outline.withOpacity(0.2),\n+                    ),\n+                  ),\n+                  child: Row(\n+                    mainAxisSize: MainAxisSize.min,\n+                    children: [\n+                      IconButton(\n+                        icon: const Icon(Icons.format_bold),\n+                        onPressed: _toggleBold,\n+                        tooltip: 'Bold (Ctrl+B)',\n+                      ),\n+                    ],\n+                  ),\n+                ),\n+              ),\n+            ),\n+          ),\n+    );\n+\n+    Overlay.of(context).insert(_formatBarEntry!);\n+    setState(() => _showFormatBar = true);\n+  }\n+\n+  void _toggleBold() {\n+    final text = _contentCtrl.text;\n+    final selection = _contentCtrl.selection;\n+    if (selection.isValid && selection.start != selection.end) {\n+      final selectedText = text.substring(selection.start, selection.end);\n+      final isBold =\n+          selectedText.startsWith('**') && selectedText.endsWith('**');\n+\n+      final newText =\n+          isBold\n+              ? text.replaceRange(\n+                selection.start,\n+                selection.end,\n+                selectedText.substring(2, selectedText.length - 2),\n+              )\n+              : text.replaceRange(\n+                selection.start,\n+                selection.end,\n+                '**$selectedText**',\n+              );\n+\n+      _contentCtrl.value = TextEditingValue(\n+        text: newText,\n+        selection: TextSelection(\n+          baseOffset: selection.start,\n+          extentOffset: selection.end + (isBold ? -4 : 4),\n+        ),\n+      );\n+    }\n+  }\n+\n   @override\n   void dispose() {\n     _titleCtrl.dispose();\n     _contentCtrl.dispose();\n     _titleFocus.dispose();\n     _contentFocus.dispose();\n+    _hideFormatBar();\n     super.dispose();\n   }\n \n+  void _handleKeyCommand(RawKeyEvent event) {\n+    if (event is RawKeyDownEvent) {\n+      if (event.isControlPressed &&\n+          event.logicalKey == LogicalKeyboardKey.keyB) {\n+        _toggleBold();\n+      }\n+    }\n+  }\n+\n+  void _onSelectionChanged(TextSelection selection) {\n+    _currentSelection = selection;\n+    if (selection.isValid && selection.start != selection.end) {\n+      _showFormatBarOverlay();\n+    } else {\n+      _hideFormatBar();\n+    }\n+  }\n+\n+  void _markDirty() {\n+    if (!_isDirty) {\n+      setState(() => _isDirty = true);\n+    }\n+  }\n+\n   Future<void> _save() async {\n     setState(() => _submitted = true);\n     if (_titleCtrl.text.trim().isEmpty) {\n       _titleFocus.requestFocus();\n       return;\n     }\n \n     try {\n-      // Show loading indicator\n       if (mounted) {\n         ScaffoldMessenger.of(context).showSnackBar(\n           const SnackBar(\n             content: Row(\n@@ -82,21 +213,17 @@\n           ),\n         );\n       }\n \n-      // Save the note\n       final ctrl = ref.read(\n         noteEditorControllerProvider(widget.originalNote).notifier,\n       );\n       await ctrl.save(_titleCtrl.text.trim(), _contentCtrl.text);\n \n-      // Explicitly refresh and wait for the notes list\n       await ref.refresh(notesControllerProvider.future);\n \n       if (mounted) {\n-        // Clear the loading snackbar\n         ScaffoldMessenger.of(context).clearSnackBars();\n-        // Show success message with animation\n         ScaffoldMessenger.of(context).showSnackBar(\n           SnackBar(\n             content: Row(\n               children: [\n@@ -200,9 +327,9 @@\n             children: [\n               if (async.isLoading)\n                 const LinearProgressIndicator()\n               else\n-                const SizedBox(height: 2), // Placeholder for consistent layout\n+                const SizedBox(height: 2),\n               Expanded(\n                 child: CustomScrollView(\n                   slivers: [\n                     SliverToBoxAdapter(\n@@ -234,21 +361,40 @@\n                     SliverFillRemaining(\n                       hasScrollBody: true,\n                       child: Container(\n                         padding: const EdgeInsets.all(16),\n-                        child: TextField(\n-                          controller: _contentCtrl,\n-                          focusNode: _contentFocus,\n-                          maxLines: null,\n-                          style: theme.textTheme.bodyLarge,\n-                          decoration: InputDecoration(\n-                            hintText: 'Start typing your note...',\n-                            border: InputBorder.none,\n-                            hintStyle: theme.textTheme.bodyLarge?.copyWith(\n-                              color: theme.hintColor,\n+                        child: CompositedTransformTarget(\n+                          link: _formatBarLink,\n+                          child: RawKeyboardListener(\n+                            focusNode: FocusNode(),\n+                            onKey: _handleKeyCommand,\n+                            child: TextField(\n+                              controller: _contentCtrl,\n+                              focusNode: _contentFocus,\n+                              maxLines: null,\n+                              style: theme.textTheme.bodyLarge,\n+                              decoration: InputDecoration(\n+                                hintText:\n+                                    'Start typing your note...\\nTip: Select text and use Ctrl+B for bold',\n+                                border: InputBorder.none,\n+                                hintStyle: theme.textTheme.bodyLarge?.copyWith(\n+                                  color: theme.hintColor,\n+                                ),\n+                              ),\n+                              textCapitalization: TextCapitalization.sentences,\n+                              onChanged: (text) => setState(() {}),\n+                              onTap: () {\n+                                if (_contentCtrl.selection.isValid &&\n+                                    _contentCtrl.selection.start !=\n+                                        _contentCtrl.selection.end) {\n+                                  _showFormatBarOverlay();\n+                                }\n+                              },\n+                              onSelectionChanged: (selection, __) {\n+                                _onSelectionChanged(selection);\n+                              },\n                             ),\n                           ),\n-                          textCapitalization: TextCapitalization.sentences,\n                         ),\n                       ),\n                     ),\n                   ],\n"
                },
                {
                    "date": 1744915461988,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -388,11 +388,12 @@\n                                         _contentCtrl.selection.end) {\n                                   _showFormatBarOverlay();\n                                 }\n                               },\n-                              onSelectionChanged: (selection, __) {\n-                                _onSelectionChanged(selection);\n-                              },\n+                              onTapOutside: (_) => _hideFormatBar(),\n+                              onSelectionChanged:\n+                                  (selection, cause) =>\n+                                      _onSelectionChanged(selection),\n                             ),\n                           ),\n                         ),\n                       ),\n"
                },
                {
                    "date": 1744915480107,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -380,20 +380,26 @@\n                                   color: theme.hintColor,\n                                 ),\n                               ),\n                               textCapitalization: TextCapitalization.sentences,\n-                              onChanged: (text) => setState(() {}),\n+                              onChanged: (text) {\n+                                setState(() {});\n+                                if (_contentCtrl.selection.isValid &&\n+                                    _contentCtrl.selection.start !=\n+                                        _contentCtrl.selection.end) {\n+                                  _showFormatBarOverlay();\n+                                } else {\n+                                  _hideFormatBar();\n+                                }\n+                              },\n                               onTap: () {\n                                 if (_contentCtrl.selection.isValid &&\n                                     _contentCtrl.selection.start !=\n                                         _contentCtrl.selection.end) {\n                                   _showFormatBarOverlay();\n                                 }\n                               },\n                               onTapOutside: (_) => _hideFormatBar(),\n-                              onSelectionChanged:\n-                                  (selection, cause) =>\n-                                      _onSelectionChanged(selection),\n                             ),\n                           ),\n                         ),\n                       ),\n"
                },
                {
                    "date": 1744915590813,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -373,9 +373,9 @@\n                               maxLines: null,\n                               style: theme.textTheme.bodyLarge,\n                               decoration: InputDecoration(\n                                 hintText:\n-                                    'Start typing your note...\\nTip: Select text and use Ctrl+B for bold',\n+                                    'Start typing your note...\\nTip: Select text and tap the B icon to make it bold',\n                                 border: InputBorder.none,\n                                 hintStyle: theme.textTheme.bodyLarge?.copyWith(\n                                   color: theme.hintColor,\n                                 ),\n@@ -398,8 +398,14 @@\n                                   _showFormatBarOverlay();\n                                 }\n                               },\n                               onTapOutside: (_) => _hideFormatBar(),\n+                              toolbarOptions: const ToolbarOptions(\n+                                copy: true,\n+                                cut: true,\n+                                paste: true,\n+                                selectAll: true,\n+                              ),\n                             ),\n                           ),\n                         ),\n                       ),\n"
                },
                {
                    "date": 1744915865199,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,9 @@\n import 'package:drivenotes/notes_controller.dart';\n import 'package:flutter/material.dart';\n import 'package:flutter_riverpod/flutter_riverpod.dart';\n import 'package:flutter/services.dart';\n+import 'package:drivenotes/features/notes/presentation/providers/note_save_provider.dart';\n \n class NoteEditorPage extends ConsumerStatefulWidget {\n   final NoteModel? originalNote;\n   const NoteEditorPage({super.key, this.originalNote});\n"
                },
                {
                    "date": 1744916103451,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -195,78 +195,17 @@\n       _titleFocus.requestFocus();\n       return;\n     }\n \n-    try {\n-      if (mounted) {\n-        ScaffoldMessenger.of(context).showSnackBar(\n-          const SnackBar(\n-            content: Row(\n-              children: [\n-                SizedBox(\n-                  height: 20,\n-                  width: 20,\n-                  child: CircularProgressIndicator(strokeWidth: 2),\n-                ),\n-                SizedBox(width: 16),\n-                Text('Saving note...'),\n-              ],\n-            ),\n-          ),\n-        );\n-      }\n+    // Start save operation and navigate back immediately\n+    final ctrl = ref.read(\n+      noteEditorControllerProvider(widget.originalNote).notifier,\n+    );\n+    ctrl.save(_titleCtrl.text.trim(), _contentCtrl.text);\n \n-      final ctrl = ref.read(\n-        noteEditorControllerProvider(widget.originalNote).notifier,\n-      );\n-      await ctrl.save(_titleCtrl.text.trim(), _contentCtrl.text);\n-\n-      await ref.refresh(notesControllerProvider.future);\n-\n-      if (mounted) {\n-        ScaffoldMessenger.of(context).clearSnackBars();\n-        ScaffoldMessenger.of(context).showSnackBar(\n-          SnackBar(\n-            content: Row(\n-              children: [\n-                const Icon(Icons.check_circle, color: Colors.white),\n-                const SizedBox(width: 16),\n-                const Text('Note saved successfully!'),\n-                const Spacer(),\n-                TextButton(\n-                  onPressed: () {\n-                    ScaffoldMessenger.of(context).hideCurrentSnackBar();\n-                    Navigator.of(context).pop();\n-                  },\n-                  child: const Text('DONE'),\n-                ),\n-              ],\n-            ),\n-            behavior: SnackBarBehavior.floating,\n-            shape: RoundedRectangleBorder(\n-              borderRadius: BorderRadius.circular(8),\n-            ),\n-          ),\n-        );\n-        setState(() => _isDirty = false);\n-      }\n-    } catch (e) {\n-      if (mounted) {\n-        ScaffoldMessenger.of(context).clearSnackBars();\n-        ScaffoldMessenger.of(context).showSnackBar(\n-          SnackBar(\n-            content: Row(\n-              children: [\n-                const Icon(Icons.error_outline, color: Colors.white),\n-                const SizedBox(width: 16),\n-                Expanded(child: Text('Error saving note: $e')),\n-              ],\n-            ),\n-            behavior: SnackBarBehavior.floating,\n-            backgroundColor: Colors.red,\n-          ),\n-        );\n-      }\n+    // Navigate back immediately\n+    if (mounted) {\n+      Navigator.of(context).pop();\n     }\n   }\n \n   Future<bool> _onWillPop() async {\n"
                },
                {
                    "date": 1744916230380,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,17 +7,24 @@\n import 'package:drivenotes/features/notes/presentation/providers/note_save_provider.dart';\n \n class NoteEditorPage extends ConsumerStatefulWidget {\n   final NoteModel? originalNote;\n-  const NoteEditorPage({super.key, this.originalNote});\n+  final String? heroTag;\n \n+  const NoteEditorPage({super.key, this.originalNote, this.heroTag});\n+\n   @override\n   ConsumerState<NoteEditorPage> createState() => _NoteEditorPageState();\n }\n \n-class _NoteEditorPageState extends ConsumerState<NoteEditorPage> {\n+class _NoteEditorPageState extends ConsumerState<NoteEditorPage>\n+    with SingleTickerProviderStateMixin {\n   late final TextEditingController _titleCtrl;\n   late final TextEditingController _contentCtrl;\n+  late final AnimationController _animationController;\n+  late final Animation<double> _fadeAnimation;\n+  late final Animation<Offset> _slideAnimation;\n+\n   bool _submitted = false;\n   bool _isDirty = false;\n   final FocusNode _titleFocus = FocusNode();\n   final FocusNode _contentFocus = FocusNode();\n@@ -30,8 +37,25 @@\n \n   @override\n   void initState() {\n     super.initState();\n+    _animationController = AnimationController(\n+      vsync: this,\n+      duration: const Duration(milliseconds: 300),\n+    );\n+\n+    _fadeAnimation = CurvedAnimation(\n+      parent: _animationController,\n+      curve: Curves.easeOut,\n+    );\n+\n+    _slideAnimation = Tween<Offset>(\n+      begin: const Offset(0, 0.1),\n+      end: Offset.zero,\n+    ).animate(\n+      CurvedAnimation(parent: _animationController, curve: Curves.easeOut),\n+    );\n+\n     final o = widget.originalNote;\n     // Remove .txt extension if present for display\n     final title = o?.title.replaceAll(RegExp(r'\\.txt$'), '') ?? '';\n     _titleCtrl = TextEditingController(text: title);\n@@ -52,8 +76,10 @@\n       WidgetsBinding.instance.addPostFrameCallback((_) {\n         _titleFocus.requestFocus();\n       });\n     }\n+\n+    _animationController.forward();\n   }\n \n   String _stripBoldMarkers(String text) {\n     return text.replaceAll('**', '');\n@@ -156,8 +182,9 @@\n   }\n \n   @override\n   void dispose() {\n+    _animationController.dispose();\n     _titleCtrl.dispose();\n     _contentCtrl.dispose();\n     _titleFocus.dispose();\n     _contentFocus.dispose();\n@@ -188,27 +215,8 @@\n       setState(() => _isDirty = true);\n     }\n   }\n \n-  Future<void> _save() async {\n-    setState(() => _submitted = true);\n-    if (_titleCtrl.text.trim().isEmpty) {\n-      _titleFocus.requestFocus();\n-      return;\n-    }\n-\n-    // Start save operation and navigate back immediately\n-    final ctrl = ref.read(\n-      noteEditorControllerProvider(widget.originalNote).notifier,\n-    );\n-    ctrl.save(_titleCtrl.text.trim(), _contentCtrl.text);\n-\n-    // Navigate back immediately\n-    if (mounted) {\n-      Navigator.of(context).pop();\n-    }\n-  }\n-\n   Future<bool> _onWillPop() async {\n     if (!_isDirty) return true;\n \n     final result = await showDialog<bool>(\n@@ -236,125 +244,176 @@\n     }\n     return true; // allow pop if not saving\n   }\n \n+  Future<void> _save() async {\n+    setState(() => _submitted = true);\n+    if (_titleCtrl.text.trim().isEmpty) {\n+      _titleFocus.requestFocus();\n+      return;\n+    }\n+\n+    // Start save operation\n+    final ctrl = ref.read(\n+      noteEditorControllerProvider(widget.originalNote).notifier,\n+    );\n+    ctrl.save(_titleCtrl.text.trim(), _contentCtrl.text);\n+\n+    // Animate out and navigate back\n+    await _animationController.reverse();\n+    if (mounted) {\n+      Navigator.of(context).pop();\n+    }\n+  }\n+\n   @override\n   Widget build(BuildContext context) {\n     final theme = Theme.of(context);\n     final async = ref.watch(noteEditorControllerProvider(widget.originalNote));\n \n     return WillPopScope(\n-      onWillPop: _onWillPop,\n+      onWillPop: () async {\n+        if (await _onWillPop()) {\n+          await _animationController.reverse();\n+          return true;\n+        }\n+        return false;\n+      },\n       child: Scaffold(\n         appBar: AppBar(\n-          title: Text(\n-            widget.originalNote == null ? 'New Note' : 'Edit Note',\n-            style: theme.textTheme.titleLarge,\n+          title: Hero(\n+            tag: widget.heroTag ?? 'note_title',\n+            child: Material(\n+              color: Colors.transparent,\n+              child: Text(\n+                widget.originalNote == null ? 'New Note' : 'Edit Note',\n+                style: theme.textTheme.titleLarge,\n+              ),\n+            ),\n           ),\n           actions: [\n             if (_isDirty)\n-              Padding(\n-                padding: const EdgeInsets.only(right: 8.0),\n-                child: FilledButton.icon(\n-                  onPressed: async.isLoading ? null : _save,\n-                  icon: const Icon(Icons.save),\n-                  label: const Text('Save'),\n+              FadeTransition(\n+                opacity: _fadeAnimation,\n+                child: Padding(\n+                  padding: const EdgeInsets.only(right: 8.0),\n+                  child: FilledButton.icon(\n+                    onPressed: async.isLoading ? null : _save,\n+                    icon: const Icon(Icons.save),\n+                    label: const Text('Save'),\n+                  ),\n                 ),\n               ),\n           ],\n         ),\n         body: SafeArea(\n-          child: Column(\n-            children: [\n-              if (async.isLoading)\n-                const LinearProgressIndicator()\n-              else\n-                const SizedBox(height: 2),\n-              Expanded(\n-                child: CustomScrollView(\n-                  slivers: [\n-                    SliverToBoxAdapter(\n-                      child: Padding(\n-                        padding: const EdgeInsets.all(16),\n-                        child: Column(\n-                          children: [\n-                            TextField(\n-                              controller: _titleCtrl,\n-                              focusNode: _titleFocus,\n-                              style: theme.textTheme.headlineSmall,\n-                              decoration: InputDecoration(\n-                                hintText: 'Note title',\n-                                border: InputBorder.none,\n-                                errorText:\n-                                    _submitted && _titleCtrl.text.trim().isEmpty\n-                                        ? 'Title is required'\n-                                        : null,\n-                                errorStyle: const TextStyle(fontSize: 12),\n-                              ),\n-                              textCapitalization: TextCapitalization.sentences,\n-                              onSubmitted: (_) => _contentFocus.requestFocus(),\n+          child: FadeTransition(\n+            opacity: _fadeAnimation,\n+            child: SlideTransition(\n+              position: _slideAnimation,\n+              child: Column(\n+                children: [\n+                  if (async.isLoading)\n+                    const LinearProgressIndicator()\n+                  else\n+                    const SizedBox(height: 2),\n+                  Expanded(\n+                    child: CustomScrollView(\n+                      slivers: [\n+                        SliverToBoxAdapter(\n+                          child: Padding(\n+                            padding: const EdgeInsets.all(16),\n+                            child: Column(\n+                              children: [\n+                                Hero(\n+                                  tag:\n+                                      widget.heroTag != null\n+                                          ? '${widget.heroTag}_input'\n+                                          : 'note_input',\n+                                  child: Material(\n+                                    color: Colors.transparent,\n+                                    child: TextField(\n+                                      controller: _titleCtrl,\n+                                      focusNode: _titleFocus,\n+                                      style: theme.textTheme.headlineSmall,\n+                                      decoration: InputDecoration(\n+                                        hintText: 'Note title',\n+                                        border: InputBorder.none,\n+                                        errorText:\n+                                            _submitted &&\n+                                                    _titleCtrl.text\n+                                                        .trim()\n+                                                        .isEmpty\n+                                                ? 'Title is required'\n+                                                : null,\n+                                        errorStyle: const TextStyle(\n+                                          fontSize: 12,\n+                                        ),\n+                                      ),\n+                                      textCapitalization:\n+                                          TextCapitalization.sentences,\n+                                      onSubmitted:\n+                                          (_) => _contentFocus.requestFocus(),\n+                                    ),\n+                                  ),\n+                                ),\n+                                const Divider(),\n+                              ],\n                             ),\n-                            const Divider(),\n-                          ],\n+                          ),\n                         ),\n-                      ),\n-                    ),\n-                    SliverFillRemaining(\n-                      hasScrollBody: true,\n-                      child: Container(\n-                        padding: const EdgeInsets.all(16),\n-                        child: CompositedTransformTarget(\n-                          link: _formatBarLink,\n-                          child: RawKeyboardListener(\n-                            focusNode: FocusNode(),\n-                            onKey: _handleKeyCommand,\n-                            child: TextField(\n-                              controller: _contentCtrl,\n-                              focusNode: _contentFocus,\n-                              maxLines: null,\n-                              style: theme.textTheme.bodyLarge,\n-                              decoration: InputDecoration(\n-                                hintText:\n-                                    'Start typing your note...\\nTip: Select text and tap the B icon to make it bold',\n-                                border: InputBorder.none,\n-                                hintStyle: theme.textTheme.bodyLarge?.copyWith(\n-                                  color: theme.hintColor,\n+                        SliverFillRemaining(\n+                          hasScrollBody: true,\n+                          child: Container(\n+                            padding: const EdgeInsets.all(16),\n+                            child: CompositedTransformTarget(\n+                              link: _formatBarLink,\n+                              child: RawKeyboardListener(\n+                                focusNode: FocusNode(),\n+                                onKey: _handleKeyCommand,\n+                                child: TextField(\n+                                  controller: _contentCtrl,\n+                                  focusNode: _contentFocus,\n+                                  maxLines: null,\n+                                  style: theme.textTheme.bodyLarge,\n+                                  decoration: InputDecoration(\n+                                    hintText:\n+                                        'Start typing your note...\\nTip: Select text and tap the B icon to make it bold',\n+                                    border: InputBorder.none,\n+                                    hintStyle: theme.textTheme.bodyLarge\n+                                        ?.copyWith(color: theme.hintColor),\n+                                  ),\n+                                  textCapitalization:\n+                                      TextCapitalization.sentences,\n+                                  onChanged: (text) {\n+                                    setState(() {});\n+                                    if (_contentCtrl.selection.isValid &&\n+                                        _contentCtrl.selection.start !=\n+                                            _contentCtrl.selection.end) {\n+                                      _showFormatBarOverlay();\n+                                    } else {\n+                                      _hideFormatBar();\n+                                    }\n+                                  },\n+                                  onTap: () {\n+                                    if (_contentCtrl.selection.isValid &&\n+                                        _contentCtrl.selection.start !=\n+                                            _contentCtrl.selection.end) {\n+                                      _showFormatBarOverlay();\n+                                    }\n+                                  },\n+                                  onTapOutside: (_) => _hideFormatBar(),\n                                 ),\n                               ),\n-                              textCapitalization: TextCapitalization.sentences,\n-                              onChanged: (text) {\n-                                setState(() {});\n-                                if (_contentCtrl.selection.isValid &&\n-                                    _contentCtrl.selection.start !=\n-                                        _contentCtrl.selection.end) {\n-                                  _showFormatBarOverlay();\n-                                } else {\n-                                  _hideFormatBar();\n-                                }\n-                              },\n-                              onTap: () {\n-                                if (_contentCtrl.selection.isValid &&\n-                                    _contentCtrl.selection.start !=\n-                                        _contentCtrl.selection.end) {\n-                                  _showFormatBarOverlay();\n-                                }\n-                              },\n-                              onTapOutside: (_) => _hideFormatBar(),\n-                              toolbarOptions: const ToolbarOptions(\n-                                copy: true,\n-                                cut: true,\n-                                paste: true,\n-                                selectAll: true,\n-                              ),\n                             ),\n                           ),\n                         ),\n-                      ),\n+                      ],\n                     ),\n-                  ],\n-                ),\n+                  ),\n+                ],\n               ),\n-            ],\n+            ),\n           ),\n         ),\n       ),\n     );\n"
                },
                {
                    "date": 1744916370242,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -280,9 +280,9 @@\n       },\n       child: Scaffold(\n         appBar: AppBar(\n           title: Hero(\n-            tag: widget.heroTag ?? 'note_title',\n+            tag: widget.heroTag ?? 'new_note',\n             child: Material(\n               color: Colors.transparent,\n               child: Text(\n                 widget.originalNote == null ? 'New Note' : 'Edit Note',\n@@ -323,39 +323,26 @@\n                           child: Padding(\n                             padding: const EdgeInsets.all(16),\n                             child: Column(\n                               children: [\n-                                Hero(\n-                                  tag:\n-                                      widget.heroTag != null\n-                                          ? '${widget.heroTag}_input'\n-                                          : 'note_input',\n-                                  child: Material(\n-                                    color: Colors.transparent,\n-                                    child: TextField(\n-                                      controller: _titleCtrl,\n-                                      focusNode: _titleFocus,\n-                                      style: theme.textTheme.headlineSmall,\n-                                      decoration: InputDecoration(\n-                                        hintText: 'Note title',\n-                                        border: InputBorder.none,\n-                                        errorText:\n-                                            _submitted &&\n-                                                    _titleCtrl.text\n-                                                        .trim()\n-                                                        .isEmpty\n-                                                ? 'Title is required'\n-                                                : null,\n-                                        errorStyle: const TextStyle(\n-                                          fontSize: 12,\n-                                        ),\n-                                      ),\n-                                      textCapitalization:\n-                                          TextCapitalization.sentences,\n-                                      onSubmitted:\n-                                          (_) => _contentFocus.requestFocus(),\n-                                    ),\n+                                TextField(\n+                                  controller: _titleCtrl,\n+                                  focusNode: _titleFocus,\n+                                  style: theme.textTheme.headlineSmall,\n+                                  decoration: InputDecoration(\n+                                    hintText: 'Note title',\n+                                    border: InputBorder.none,\n+                                    errorText:\n+                                        _submitted &&\n+                                                _titleCtrl.text.trim().isEmpty\n+                                            ? 'Title is required'\n+                                            : null,\n+                                    errorStyle: const TextStyle(fontSize: 12),\n                                   ),\n+                                  textCapitalization:\n+                                      TextCapitalization.sentences,\n+                                  onSubmitted:\n+                                      (_) => _contentFocus.requestFocus(),\n                                 ),\n                                 const Divider(),\n                               ],\n                             ),\n"
                },
                {
                    "date": 1744916865016,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -245,8 +245,10 @@\n     return true; // allow pop if not saving\n   }\n \n   Future<void> _save() async {\n+    if (!mounted) return;\n+\n     setState(() => _submitted = true);\n     if (_titleCtrl.text.trim().isEmpty) {\n       _titleFocus.requestFocus();\n       return;\n@@ -255,14 +257,25 @@\n     // Start save operation\n     final ctrl = ref.read(\n       noteEditorControllerProvider(widget.originalNote).notifier,\n     );\n-    ctrl.save(_titleCtrl.text.trim(), _contentCtrl.text);\n \n-    // Animate out and navigate back\n-    await _animationController.reverse();\n-    if (mounted) {\n-      Navigator.of(context).pop();\n+    try {\n+      await ctrl.save(_titleCtrl.text.trim(), _contentCtrl.text);\n+\n+      // Animate out and navigate back\n+      if (mounted) {\n+        await _animationController.reverse();\n+        if (mounted) {\n+          Navigator.of(context).pop();\n+        }\n+      }\n+    } catch (e) {\n+      if (mounted) {\n+        ScaffoldMessenger.of(\n+          context,\n+        ).showSnackBar(SnackBar(content: Text('Error saving note: $e')));\n+      }\n     }\n   }\n \n   @override\n"
                },
                {
                    "date": 1744916890735,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -299,8 +299,9 @@\n               color: Colors.transparent,\n               child: Text(\n                 widget.originalNote == null ? 'New Note' : 'Edit Note',\n                 style: theme.textTheme.titleLarge,\n+                overflow: TextOverflow.ellipsis,\n               ),\n             ),\n           ),\n           actions: [\n@@ -352,8 +353,10 @@\n                                     errorStyle: const TextStyle(fontSize: 12),\n                                   ),\n                                   textCapitalization:\n                                       TextCapitalization.sentences,\n+                                  maxLines: 1,\n+                                  overflow: TextOverflow.ellipsis,\n                                   onSubmitted:\n                                       (_) => _contentFocus.requestFocus(),\n                                 ),\n                                 const Divider(),\n@@ -373,15 +376,18 @@\n                                 child: TextField(\n                                   controller: _contentCtrl,\n                                   focusNode: _contentFocus,\n                                   maxLines: null,\n+                                  expands: true,\n+                                  textAlignVertical: TextAlignVertical.top,\n                                   style: theme.textTheme.bodyLarge,\n                                   decoration: InputDecoration(\n                                     hintText:\n                                         'Start typing your note...\\nTip: Select text and tap the B icon to make it bold',\n                                     border: InputBorder.none,\n                                     hintStyle: theme.textTheme.bodyLarge\n                                         ?.copyWith(color: theme.hintColor),\n+                                    contentPadding: EdgeInsets.zero,\n                                   ),\n                                   textCapitalization:\n                                       TextCapitalization.sentences,\n                                   onChanged: (text) {\n"
                },
                {
                    "date": 1744916898046,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -299,9 +299,8 @@\n               color: Colors.transparent,\n               child: Text(\n                 widget.originalNote == null ? 'New Note' : 'Edit Note',\n                 style: theme.textTheme.titleLarge,\n-                overflow: TextOverflow.ellipsis,\n               ),\n             ),\n           ),\n           actions: [\n"
                },
                {
                    "date": 1744916920262,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -353,9 +353,8 @@\n                                   ),\n                                   textCapitalization:\n                                       TextCapitalization.sentences,\n                                   maxLines: 1,\n-                                  overflow: TextOverflow.ellipsis,\n                                   onSubmitted:\n                                       (_) => _contentFocus.requestFocus(),\n                                 ),\n                                 const Divider(),\n"
                },
                {
                    "date": 1744969668788,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,11 +1,9 @@\n import 'package:drivenotes/features/notes/domain/models/note_model.dart';\n import 'package:drivenotes/features/notes/presentation/providers/note_editor_controller.dart';\n-import 'package:drivenotes/notes_controller.dart';\n import 'package:flutter/material.dart';\n import 'package:flutter_riverpod/flutter_riverpod.dart';\n import 'package:flutter/services.dart';\n-import 'package:drivenotes/features/notes/presentation/providers/note_save_provider.dart';\n \n class NoteEditorPage extends ConsumerStatefulWidget {\n   final NoteModel? originalNote;\n   final String? heroTag;\n"
                },
                {
                    "date": 1744972664736,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +1,423 @@\n- \n\\ No newline at end of file\n+import 'package:drivenotes/features/notes/domain/models/note_model.dart';\n+import 'package:drivenotes/features/notes/presentation/providers/note_editor_controller.dart';\n+import 'package:flutter/material.dart';\n+import 'package:flutter_riverpod/flutter_riverpod.dart';\n+import 'package:flutter/services.dart';\n+\n+class NoteEditorPage extends ConsumerStatefulWidget {\n+  final NoteModel? originalNote;\n+  final String? heroTag;\n+\n+  const NoteEditorPage({super.key, this.originalNote, this.heroTag});\n+\n+  @override\n+  ConsumerState<NoteEditorPage> createState() => _NoteEditorPageState();\n+}\n+\n+class _NoteEditorPageState extends ConsumerState<NoteEditorPage>\n+    with SingleTickerProviderStateMixin {\n+  late final TextEditingController _titleCtrl;\n+  late final TextEditingController _contentCtrl;\n+  late final AnimationController _animationController;\n+  late final Animation<double> _fadeAnimation;\n+  late final Animation<Offset> _slideAnimation;\n+\n+  bool _submitted = false;\n+  bool _isDirty = false;\n+  final FocusNode _titleFocus = FocusNode();\n+  final FocusNode _contentFocus = FocusNode();\n+\n+  // Text selection controls\n+  TextSelection? _currentSelection;\n+  bool _showFormatBar = false;\n+  final LayerLink _formatBarLink = LayerLink();\n+  OverlayEntry? _formatBarEntry;\n+\n+  @override\n+  void initState() {\n+    super.initState();\n+    _animationController = AnimationController(\n+      vsync: this,\n+      duration: const Duration(milliseconds: 300),\n+    );\n+\n+    _fadeAnimation = CurvedAnimation(\n+      parent: _animationController,\n+      curve: Curves.easeOut,\n+    );\n+\n+    _slideAnimation = Tween<Offset>(\n+      begin: const Offset(0, 0.1),\n+      end: Offset.zero,\n+    ).animate(\n+      CurvedAnimation(parent: _animationController, curve: Curves.easeOut),\n+    );\n+\n+    final o = widget.originalNote;\n+    // Remove .txt extension if present for display\n+    final title = o?.title.replaceAll(RegExp(r'\\.txt$'), '') ?? '';\n+    _titleCtrl = TextEditingController(text: title);\n+\n+    // Parse content for bold markers\n+    final content = o?.content ?? '';\n+    _contentCtrl = TextEditingController(text: _stripBoldMarkers(content));\n+\n+    // Listen for changes to mark the note as dirty\n+    _titleCtrl.addListener(_markDirty);\n+    _contentCtrl.addListener(_markDirty);\n+\n+    // Listen for selection changes\n+    _contentFocus.addListener(_onFocusChange);\n+\n+    // Auto-focus title if new note\n+    if (o == null) {\n+      WidgetsBinding.instance.addPostFrameCallback((_) {\n+        _titleFocus.requestFocus();\n+      });\n+    }\n+\n+    _animationController.forward();\n+  }\n+\n+  String _stripBoldMarkers(String text) {\n+    return text.replaceAll('**', '');\n+  }\n+\n+  void _onFocusChange() {\n+    if (!_contentFocus.hasFocus) {\n+      _hideFormatBar();\n+    }\n+  }\n+\n+  void _hideFormatBar() {\n+    _formatBarEntry?.remove();\n+    _formatBarEntry = null;\n+    setState(() => _showFormatBar = false);\n+  }\n+\n+  void _showFormatBarOverlay() {\n+    _hideFormatBar();\n+\n+    final RenderBox renderBox = context.findRenderObject() as RenderBox;\n+    final Offset offset = renderBox.localToGlobal(Offset.zero);\n+\n+    _formatBarEntry = OverlayEntry(\n+      builder:\n+          (context) => Positioned(\n+            left: offset.dx + 16,\n+            top:\n+                offset.dy + 120, // Adjust this value to position the format bar\n+            child: CompositedTransformFollower(\n+              link: _formatBarLink,\n+              showWhenUnlinked: false,\n+              offset: const Offset(0, -50),\n+              child: Material(\n+                elevation: 8,\n+                borderRadius: BorderRadius.circular(8),\n+                child: Container(\n+                  padding: const EdgeInsets.symmetric(\n+                    horizontal: 8,\n+                    vertical: 4,\n+                  ),\n+                  decoration: BoxDecoration(\n+                    color: Theme.of(context).colorScheme.surface,\n+                    borderRadius: BorderRadius.circular(8),\n+                    border: Border.all(\n+                      color: Theme.of(\n+                        context,\n+                      ).colorScheme.outline.withOpacity(0.2),\n+                    ),\n+                  ),\n+                  child: Row(\n+                    mainAxisSize: MainAxisSize.min,\n+                    children: [\n+                      IconButton(\n+                        icon: const Icon(Icons.format_bold),\n+                        onPressed: _toggleBold,\n+                        tooltip: 'Bold (Ctrl+B)',\n+                      ),\n+                    ],\n+                  ),\n+                ),\n+              ),\n+            ),\n+          ),\n+    );\n+\n+    Overlay.of(context).insert(_formatBarEntry!);\n+    setState(() => _showFormatBar = true);\n+  }\n+\n+  void _toggleBold() {\n+    final text = _contentCtrl.text;\n+    final selection = _contentCtrl.selection;\n+    if (selection.isValid && selection.start != selection.end) {\n+      final selectedText = text.substring(selection.start, selection.end);\n+      final isBold =\n+          selectedText.startsWith('**') && selectedText.endsWith('**');\n+\n+      final newText =\n+          isBold\n+              ? text.replaceRange(\n+                selection.start,\n+                selection.end,\n+                selectedText.substring(2, selectedText.length - 2),\n+              )\n+              : text.replaceRange(\n+                selection.start,\n+                selection.end,\n+                '**$selectedText**',\n+              );\n+\n+      _contentCtrl.value = TextEditingValue(\n+        text: newText,\n+        selection: TextSelection(\n+          baseOffset: selection.start,\n+          extentOffset: selection.end + (isBold ? -4 : 4),\n+        ),\n+      );\n+    }\n+  }\n+\n+  @override\n+  void dispose() {\n+    _animationController.dispose();\n+    _titleCtrl.dispose();\n+    _contentCtrl.dispose();\n+    _titleFocus.dispose();\n+    _contentFocus.dispose();\n+    _hideFormatBar();\n+    super.dispose();\n+  }\n+\n+  void _handleKeyCommand(RawKeyEvent event) {\n+    if (event is RawKeyDownEvent) {\n+      if (event.isControlPressed &&\n+          event.logicalKey == LogicalKeyboardKey.keyB) {\n+        _toggleBold();\n+      }\n+    }\n+  }\n+\n+  void _onSelectionChanged(TextSelection selection) {\n+    _currentSelection = selection;\n+    if (selection.isValid && selection.start != selection.end) {\n+      _showFormatBarOverlay();\n+    } else {\n+      _hideFormatBar();\n+    }\n+  }\n+\n+  void _markDirty() {\n+    if (!_isDirty) {\n+      setState(() => _isDirty = true);\n+    }\n+  }\n+\n+  Future<bool> _onWillPop() async {\n+    if (!_isDirty) return true;\n+\n+    final result = await showDialog<bool>(\n+      context: context,\n+      builder:\n+          (context) => AlertDialog(\n+            title: const Text('Unsaved Changes'),\n+            content: const Text('Do you want to save your changes?'),\n+            actions: [\n+              TextButton(\n+                onPressed: () => Navigator.pop(context, false), // don't save\n+                child: const Text('DISCARD'),\n+              ),\n+              FilledButton(\n+                onPressed: () => Navigator.pop(context, true), // save\n+                child: const Text('SAVE'),\n+              ),\n+            ],\n+          ),\n+    );\n+\n+    if (result == true) {\n+      await _save();\n+      return false; // _save will handle navigation\n+    }\n+    return true; // allow pop if not saving\n+  }\n+\n+  Future<void> _save() async {\n+    if (!mounted) return;\n+\n+    setState(() => _submitted = true);\n+    if (_titleCtrl.text.trim().isEmpty) {\n+      _titleFocus.requestFocus();\n+      return;\n+    }\n+\n+    // Start save operation\n+    final ctrl = ref.read(\n+      noteEditorControllerProvider(widget.originalNote).notifier,\n+    );\n+\n+    try {\n+      await ctrl.save(_titleCtrl.text.trim(), _contentCtrl.text);\n+\n+      // Animate out and navigate back\n+      if (mounted) {\n+        await _animationController.reverse();\n+        if (mounted) {\n+          Navigator.of(context).pop();\n+        }\n+      }\n+    } catch (e) {\n+      if (mounted) {\n+        ScaffoldMessenger.of(\n+          context,\n+        ).showSnackBar(SnackBar(content: Text('Error saving note: $e')));\n+      }\n+    }\n+  }\n+\n+  @override\n+  Widget build(BuildContext context) {\n+    final theme = Theme.of(context);\n+    final async = ref.watch(noteEditorControllerProvider(widget.originalNote));\n+\n+    return WillPopScope(\n+      onWillPop: () async {\n+        if (await _onWillPop()) {\n+          await _animationController.reverse();\n+          return true;\n+        }\n+        return false;\n+      },\n+      child: Scaffold(\n+        appBar: AppBar(\n+          title: Hero(\n+            tag: widget.heroTag ?? 'new_note',\n+            child: Material(\n+              color: Colors.transparent,\n+              child: Text(\n+                widget.originalNote == null ? 'New Note' : 'Edit Note',\n+                style: theme.textTheme.titleLarge,\n+              ),\n+            ),\n+          ),\n+          actions: [\n+            if (_isDirty)\n+              FadeTransition(\n+                opacity: _fadeAnimation,\n+                child: Padding(\n+                  padding: const EdgeInsets.only(right: 8.0),\n+                  child: FilledButton.icon(\n+                    onPressed: async.isLoading ? null : _save,\n+                    icon: const Icon(Icons.save),\n+                    label: const Text('Save'),\n+                  ),\n+                ),\n+              ),\n+          ],\n+        ),\n+        body: SafeArea(\n+          child: FadeTransition(\n+            opacity: _fadeAnimation,\n+            child: SlideTransition(\n+              position: _slideAnimation,\n+              child: Column(\n+                children: [\n+                  if (async.isLoading)\n+                    const LinearProgressIndicator()\n+                  else\n+                    const SizedBox(height: 2),\n+                  Expanded(\n+                    child: CustomScrollView(\n+                      slivers: [\n+                        SliverToBoxAdapter(\n+                          child: Padding(\n+                            padding: const EdgeInsets.all(16),\n+                            child: Column(\n+                              children: [\n+                                TextField(\n+                                  controller: _titleCtrl,\n+                                  focusNode: _titleFocus,\n+                                  style: theme.textTheme.headlineSmall,\n+                                  decoration: InputDecoration(\n+                                    hintText: 'Note title',\n+                                    border: InputBorder.none,\n+                                    errorText:\n+                                        _submitted &&\n+                                                _titleCtrl.text.trim().isEmpty\n+                                            ? 'Title is required'\n+                                            : null,\n+                                    errorStyle: const TextStyle(fontSize: 12),\n+                                  ),\n+                                  textCapitalization:\n+                                      TextCapitalization.sentences,\n+                                  maxLines: 1,\n+                                  onSubmitted:\n+                                      (_) => _contentFocus.requestFocus(),\n+                                ),\n+                                const Divider(),\n+                              ],\n+                            ),\n+                          ),\n+                        ),\n+                        SliverFillRemaining(\n+                          hasScrollBody: true,\n+                          child: Container(\n+                            padding: const EdgeInsets.all(16),\n+                            child: CompositedTransformTarget(\n+                              link: _formatBarLink,\n+                              child: RawKeyboardListener(\n+                                focusNode: FocusNode(),\n+                                onKey: _handleKeyCommand,\n+                                child: TextField(\n+                                  controller: _contentCtrl,\n+                                  focusNode: _contentFocus,\n+                                  maxLines: null,\n+                                  expands: true,\n+                                  textAlignVertical: TextAlignVertical.top,\n+                                  style: theme.textTheme.bodyLarge,\n+                                  decoration: InputDecoration(\n+                                    hintText:\n+                                        'Start typing your note...\\nTip: Select text and tap the B icon to make it bold',\n+                                    border: InputBorder.none,\n+                                    hintStyle: theme.textTheme.bodyLarge\n+                                        ?.copyWith(color: theme.hintColor),\n+                                    contentPadding: EdgeInsets.zero,\n+                                  ),\n+                                  textCapitalization:\n+                                      TextCapitalization.sentences,\n+                                  onChanged: (text) {\n+                                    setState(() {});\n+                                    if (_contentCtrl.selection.isValid &&\n+                                        _contentCtrl.selection.start !=\n+                                            _contentCtrl.selection.end) {\n+                                      _showFormatBarOverlay();\n+                                    } else {\n+                                      _hideFormatBar();\n+                                    }\n+                                  },\n+                                  onTap: () {\n+                                    if (_contentCtrl.selection.isValid &&\n+                                        _contentCtrl.selection.start !=\n+                                            _contentCtrl.selection.end) {\n+                                      _showFormatBarOverlay();\n+                                    }\n+                                  },\n+                                  onTapOutside: (_) => _hideFormatBar(),\n+                                ),\n+                              ),\n+                            ),\n+                          ),\n+                        ),\n+                      ],\n+                    ),\n+                  ),\n+                ],\n+              ),\n+            ),\n+          ),\n+        ),\n+      ),\n+    );\n+  }\n+}\n"
                }
            ],
            "date": 1744897212837,
            "name": "Commit-0",
            "content": "import 'package:flutter/material.dart';\r\nimport 'package:flutter_riverpod/flutter_riverpod.dart';\r\nimport '../controllers/note_editor_controller.dart';\r\nimport '../../data/note_model.dart';\r\n\r\nclass NoteEditorPage extends ConsumerStatefulWidget {\r\n  final NoteModel? originalNote;\r\n  const NoteEditorPage({super.key, this.originalNote});\r\n\r\n  @override\r\n  ConsumerState<NoteEditorPage> createState() => _NoteEditorPageState();\r\n}\r\n\r\nclass _NoteEditorPageState extends ConsumerState<NoteEditorPage> {\r\n  late final TextEditingController _titleController;\r\n  late final TextEditingController _contentController;\r\n  bool _submitted = false;\r\n\r\n  @override\r\n  void initState() {\r\n    super.initState();\r\n    final n = widget.originalNote;\r\n    _titleController = TextEditingController(text: n?.title ?? '');\r\n    _contentController = TextEditingController(text: n?.content ?? '');\r\n  }\r\n\r\n  @override\r\n  void dispose() {\r\n    _titleController.dispose();\r\n    _contentController.dispose();\r\n    super.dispose();\r\n  }\r\n\r\n  Future<void> _save() async {\r\n    setState(() => _submitted = true);\r\n    if (_titleController.text.trim().isEmpty) return;\r\n    final notifier = ref\r\n        .read(noteEditorControllerProvider(widget.originalNote).notifier);\r\n    await notifier.save(\r\n      _titleController.text.trim(),\r\n      _contentController.text,\r\n    );\r\n    final state = ref.read(noteEditorControllerProvider(widget.originalNote));\r\n    state.when(\r\n      loading: () {},\r\n      error: (e, _) => ScaffoldMessenger.of(context)\r\n          .showSnackBar(SnackBar(content: Text('Error: $e'))),\r\n      data: (_) => Navigator.of(context).pop(),\r\n    );\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    final asyncState =\r\n        ref.watch(noteEditorControllerProvider(widget.originalNote));\r\n    final isLoading = asyncState.isLoading;\r\n\r\n    return Scaffold(\r\n      appBar: AppBar(\r\n        title: Text(widget.originalNote == null ? 'New Note' : 'Edit Note'),\r\n        actions: [\r\n          IconButton(\r\n            icon: const Icon(Icons.save),\r\n            onPressed: isLoading ? null : _save,\r\n          )\r\n        ],\r\n      ),\r\n      body: Padding(\r\n        padding: const EdgeInsets.all(16),\r\n        child: Column(children: [\r\n          TextField(\r\n            controller: _titleController,\r\n            decoration: InputDecoration(\r\n              labelText: 'Title',\r\n              errorText:\r\n                  _submitted && _titleController.text.trim().isEmpty\r\n                      ? 'Title cannot be empty'\r\n                      : null,\r\n            ),\r\n          ),\r\n          const SizedBox(height: 16),\r\n          Expanded(\r\n            child: TextField(\r\n              controller: _contentController,\r\n              maxLines: null,\r\n              expands: true,\r\n              decoration: const InputDecoration(\r\n                labelText: 'Content',\r\n                alignLabelWithHint: true,\r\n                border: OutlineInputBorder(),\r\n              ),\r\n            ),\r\n          ),\r\n          if (isLoading) const LinearProgressIndicator(),\r\n        ]),\r\n      ),\r\n    );\r\n  }\r\n}\r\n"
        }
    ]
}