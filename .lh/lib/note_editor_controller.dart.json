{
    "sourceFile": "lib/note_editor_controller.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 8,
            "patches": [
                {
                    "date": 1744897183607,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1744897247382,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,5 @@\n import 'package:flutter_riverpod/flutter_riverpod.dart';\r\n-import '../../data/note_model.dart';\r\n-import '../../../core/services/drive_service.dart';\r\n \r\n /// Handles create/update of a single note.  \r\n /// If [original] is null, we're creating a new note.\r\n final noteEditorControllerProvider = AsyncNotifierProviderFamily<\r\n"
                },
                {
                    "date": 1744897368241,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,5 @@\n+import 'package:drivenotes/features/notes/domain/models/note_model.dart';\r\n import 'package:flutter_riverpod/flutter_riverpod.dart';\r\n \r\n /// Handles create/update of a single note.  \r\n /// If [original] is null, we're creating a new note.\r\n"
                },
                {
                    "date": 1744897378341,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,13 +5,17 @@\n /// If [original] is null, we're creating a new note.\r\n final noteEditorControllerProvider = AsyncNotifierProviderFamily<\r\n     NoteEditorController, void, NoteModel?>(NoteEditorController.new);\r\n \r\n-class NoteEditorController extends AsyncNotifier<void> {\r\n-  final NoteModel? original;\r\n-  NoteEditorController(this.original);\r\n+class NoteEditorController extends FamilyAsyncNotifier<void, NoteModel?> {\r\n+  late final NoteModel? original;\r\n \r\n   @override\r\n+  void initialize(NoteModel? arg) {\r\n+    original = arg;\r\n+  }\r\n+\r\n+  @override\r\n   Future<void> build() async {\r\n     // nothing to preload\r\n   }\r\n \r\n"
                },
                {
                    "date": 1744897396009,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,5 @@\n+import 'package:drivenotes/features/notes/data/drive_service.dart';\r\n import 'package:drivenotes/features/notes/domain/models/note_model.dart';\r\n import 'package:flutter_riverpod/flutter_riverpod.dart';\r\n \r\n /// Handles create/update of a single note.  \r\n"
                },
                {
                    "date": 1744897417897,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,18 +9,10 @@\n \r\n class NoteEditorController extends FamilyAsyncNotifier<void, NoteModel?> {\r\n   late final NoteModel? original;\r\n \r\n-  @override\r\n-  void initialize(NoteModel? arg) {\r\n-    original = arg;\r\n-  }\r\n+ \r\n \r\n-  @override\r\n-  Future<void> build() async {\r\n-    // nothing to preload\r\n-  }\r\n-\r\n   Future<void> save(String title, String content) async {\r\n     state = const AsyncValue.loading();\r\n     try {\r\n       if (original == null) {\r\n"
                },
                {
                    "date": 1744897423618,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,17 +1,22 @@\n import 'package:drivenotes/features/notes/data/drive_service.dart';\r\n import 'package:drivenotes/features/notes/domain/models/note_model.dart';\r\n import 'package:flutter_riverpod/flutter_riverpod.dart';\r\n \r\n-/// Handles create/update of a single note.  \r\n+/// Handles create/update of a single note.\r\n /// If [original] is null, we're creating a new note.\r\n-final noteEditorControllerProvider = AsyncNotifierProviderFamily<\r\n-    NoteEditorController, void, NoteModel?>(NoteEditorController.new);\r\n+final noteEditorControllerProvider =\r\n+    AsyncNotifierProviderFamily<NoteEditorController, void, NoteModel?>(\r\n+      NoteEditorController.new,\r\n+    );\r\n \r\n class NoteEditorController extends FamilyAsyncNotifier<void, NoteModel?> {\r\n   late final NoteModel? original;\r\n \r\n- \r\n+  @override\r\n+  Future<void> build(NoteModel? arg) async {\r\n+    original = arg;\r\n+  }\r\n \r\n   Future<void> save(String title, String content) async {\r\n     state = const AsyncValue.loading();\r\n     try {\r\n"
                },
                {
                    "date": 1744897622476,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,36 +1,30 @@\n-import 'package:drivenotes/features/notes/data/drive_service.dart';\r\n-import 'package:drivenotes/features/notes/domain/models/note_model.dart';\r\n import 'package:flutter_riverpod/flutter_riverpod.dart';\r\n+import '../../data/note_model.dart';\r\n+import '../../../core/services/drive_service.dart';\r\n \r\n-/// Handles create/update of a single note.\r\n-/// If [original] is null, we're creating a new note.\r\n-final noteEditorControllerProvider =\r\n-    AsyncNotifierProviderFamily<NoteEditorController, void, NoteModel?>(\r\n-      NoteEditorController.new,\r\n-    );\r\n+final notesControllerProvider =\r\n+    AsyncNotifierProvider<NotesController, List<NoteModel>>(NotesController.new);\r\n \r\n-class NoteEditorController extends FamilyAsyncNotifier<void, NoteModel?> {\r\n-  late final NoteModel? original;\r\n-\r\n+class NotesController extends AsyncNotifier<List<NoteModel>> {\r\n   @override\r\n-  Future<void> build(NoteModel? arg) async {\r\n-    original = arg;\r\n+  Future<List<NoteModel>> build() async {\r\n+    await DriveService.instance.ensureFolderExists();\r\n+    final files = await DriveService.instance.listRawFiles();\r\n+    final out = <NoteModel>[];\r\n+    for (var f in files) {\r\n+      final c = await DriveService.instance.fetchContent(f.id!);\r\n+      out.add(NoteModel.fromDrive(id: f.id!, name: f.name!, content: c));\r\n+    }\r\n+    return out;\r\n   }\r\n \r\n-  Future<void> save(String title, String content) async {\r\n+  Future<void> delete(String id) async {\r\n     state = const AsyncValue.loading();\r\n     try {\r\n-      if (original == null) {\r\n-        await DriveService.instance.createNote(title, content);\r\n-      } else {\r\n-        await DriveService.instance.updateNote(\r\n-          fileId: original!.id,\r\n-          newTitle: title,\r\n-          newContent: content,\r\n-        );\r\n-      }\r\n-      state = const AsyncValue.data(null);\r\n+      await DriveService.instance.deleteNote(id);\r\n+      final remain = state.value!.where((n) => n.id != id).toList();\r\n+      state = AsyncValue.data(remain);\r\n     } catch (e, st) {\r\n       state = AsyncValue.error(e, st);\r\n     }\r\n   }\r\n"
                },
                {
                    "date": 1744897749542,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,30 +1,32 @@\n import 'package:flutter_riverpod/flutter_riverpod.dart';\r\n-import '../../data/note_model.dart';\r\n-import '../../../core/services/drive_service.dart';\r\n \r\n-final notesControllerProvider =\r\n-    AsyncNotifierProvider<NotesController, List<NoteModel>>(NotesController.new);\r\n \r\n-class NotesController extends AsyncNotifier<List<NoteModel>> {\r\n+final noteEditorControllerProvider = AsyncNotifierProviderFamily<\r\n+    NoteEditorController, void, NoteModel?>(NoteEditorController.new);\r\n+\r\n+class NoteEditorController extends AsyncNotifier<void> {\r\n+  final NoteModel? original;\r\n+  NoteEditorController(this.original);\r\n+\r\n   @override\r\n-  Future<List<NoteModel>> build() async {\r\n-    await DriveService.instance.ensureFolderExists();\r\n-    final files = await DriveService.instance.listRawFiles();\r\n-    final out = <NoteModel>[];\r\n-    for (var f in files) {\r\n-      final c = await DriveService.instance.fetchContent(f.id!);\r\n-      out.add(NoteModel.fromDrive(id: f.id!, name: f.name!, content: c));\r\n-    }\r\n-    return out;\r\n+  Future<void> build() async {\r\n+    // nothing to preload\r\n   }\r\n \r\n-  Future<void> delete(String id) async {\r\n+  Future<void> save(String title, String content) async {\r\n     state = const AsyncValue.loading();\r\n     try {\r\n-      await DriveService.instance.deleteNote(id);\r\n-      final remain = state.value!.where((n) => n.id != id).toList();\r\n-      state = AsyncValue.data(remain);\r\n+      if (original == null) {\r\n+        await DriveService.instance.createNote(title, content);\r\n+      } else {\r\n+        await DriveService.instance.updateNote(\r\n+          fileId: original!.id,\r\n+          newTitle: title,\r\n+          newContent: content,\r\n+        );\r\n+      }\r\n+      state = const AsyncValue.data(null);\r\n     } catch (e, st) {\r\n       state = AsyncValue.error(e, st);\r\n     }\r\n   }\r\n"
                }
            ],
            "date": 1744897183607,
            "name": "Commit-0",
            "content": "import 'package:flutter_riverpod/flutter_riverpod.dart';\r\nimport '../../data/note_model.dart';\r\nimport '../../../core/services/drive_service.dart';\r\n\r\n/// Handles create/update of a single note.  \r\n/// If [original] is null, we're creating a new note.\r\nfinal noteEditorControllerProvider = AsyncNotifierProviderFamily<\r\n    NoteEditorController, void, NoteModel?>(NoteEditorController.new);\r\n\r\nclass NoteEditorController extends AsyncNotifier<void> {\r\n  final NoteModel? original;\r\n  NoteEditorController(this.original);\r\n\r\n  @override\r\n  Future<void> build() async {\r\n    // nothing to preload\r\n  }\r\n\r\n  Future<void> save(String title, String content) async {\r\n    state = const AsyncValue.loading();\r\n    try {\r\n      if (original == null) {\r\n        await DriveService.instance.createNote(title, content);\r\n      } else {\r\n        await DriveService.instance.updateNote(\r\n          fileId: original!.id,\r\n          newTitle: title,\r\n          newContent: content,\r\n        );\r\n      }\r\n      state = const AsyncValue.data(null);\r\n    } catch (e, st) {\r\n      state = AsyncValue.error(e, st);\r\n    }\r\n  }\r\n}\r\n"
        }
    ]
}