{
    "sourceFile": "lib/features/auth/data/services/auth_service.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1744894002932,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1744894419715,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,8 @@\n import 'package:googleapis_auth/auth_io.dart';\r\n import 'package:flutter_secure_storage/flutter_secure_storage.dart';\r\n+import 'package:google_sign_in/google_sign_in.dart';\r\n+import 'package:http/http.dart' as http;\r\n import 'package:drivenotes/core/constants/app_constants.dart';\r\n \r\n class AuthService {\r\n   final FlutterSecureStorage _secureStorage = const FlutterSecureStorage();\r\n@@ -19,5 +21,5 @@\n   Future<bool> isSignedIn() async {\r\n     final token = await _secureStorage.read(key: _tokenKey);\r\n     return token != null;\r\n   }\r\n-} \n\\ No newline at end of file\n+}\r\n"
                },
                {
                    "date": 1744894440687,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,20 +6,66 @@\n \r\n class AuthService {\r\n   final FlutterSecureStorage _secureStorage = const FlutterSecureStorage();\r\n   static const _tokenKey = 'google_auth_token';\r\n+  final GoogleSignIn _googleSignIn = GoogleSignIn(\r\n+    scopes: [\r\n+      'https://www.googleapis.com/auth/drive.file',\r\n+      'https://www.googleapis.com/auth/drive.appdata',\r\n+    ],\r\n+  );\r\n \r\n   Future<AutoRefreshingAuthClient> signIn() async {\r\n-    // TODO: Implement proper OAuth2 flow with Google Sign-In\r\n-    // This is a placeholder - you'll need to implement the actual OAuth2 flow\r\n-    throw UnimplementedError('OAuth2 authentication not implemented');\r\n+    try {\r\n+      final GoogleSignInAccount? account = await _googleSignIn.signIn();\r\n+      if (account == null) {\r\n+        throw Exception('Sign in cancelled by user');\r\n+      }\r\n+\r\n+      final GoogleSignInAuthentication auth = await account.authentication;\r\n+      final accessToken = auth.accessToken;\r\n+\r\n+      if (accessToken == null) {\r\n+        throw Exception('Failed to get access token');\r\n+      }\r\n+\r\n+      final client = http.Client();\r\n+      final credentials = AccessCredentials(\r\n+        AccessToken(\r\n+          'Bearer',\r\n+          accessToken,\r\n+          DateTime.now().add(const Duration(hours: 1)),\r\n+        ),\r\n+        null, // No refresh token needed as GoogleSignIn handles refresh\r\n+        [\r\n+          'https://www.googleapis.com/auth/drive.file',\r\n+          'https://www.googleapis.com/auth/drive.appdata',\r\n+        ],\r\n+      );\r\n+\r\n+      return AutoRefreshingAuthClient(client, credentials, (credentials) async {\r\n+        // Refresh is handled by GoogleSignIn\r\n+        final newAuth = await account.authentication;\r\n+        return AccessCredentials(\r\n+          AccessToken(\r\n+            'Bearer',\r\n+            newAuth.accessToken!,\r\n+            DateTime.now().add(const Duration(hours: 1)),\r\n+          ),\r\n+          null,\r\n+          credentials.scopes,\r\n+        );\r\n+      });\r\n+    } catch (e) {\r\n+      throw Exception('Failed to sign in: $e');\r\n+    }\r\n   }\r\n \r\n   Future<void> signOut() async {\r\n     await _secureStorage.delete(key: _tokenKey);\r\n+    await _googleSignIn.signOut();\r\n   }\r\n \r\n   Future<bool> isSignedIn() async {\r\n-    final token = await _secureStorage.read(key: _tokenKey);\r\n-    return token != null;\r\n+    return _googleSignIn.currentUser != null;\r\n   }\r\n }\r\n"
                },
                {
                    "date": 1744895502107,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n import 'package:googleapis_auth/auth_io.dart';\r\n import 'package:flutter_secure_storage/flutter_secure_storage.dart';\r\n import 'package:google_sign_in/google_sign_in.dart';\r\n import 'package:http/http.dart' as http;\r\n-import 'package:drivenotes/core/constants/app_constants.dart';\r\n+import 'package:firebase_auth/firebase_auth.dart';\r\n \r\n class AuthService {\r\n   final FlutterSecureStorage _secureStorage = const FlutterSecureStorage();\r\n   static const _tokenKey = 'google_auth_token';\r\n@@ -13,22 +13,29 @@\n       'https://www.googleapis.com/auth/drive.appdata',\r\n     ],\r\n   );\r\n \r\n-  Future<AutoRefreshingAuthClient> signIn() async {\r\n+  Future<AuthClient> signIn() async {\r\n     try {\r\n       final GoogleSignInAccount? account = await _googleSignIn.signIn();\r\n       if (account == null) {\r\n         throw Exception('Sign in cancelled by user');\r\n       }\r\n \r\n       final GoogleSignInAuthentication auth = await account.authentication;\r\n       final accessToken = auth.accessToken;\r\n-\r\n+      \r\n       if (accessToken == null) {\r\n         throw Exception('Failed to get access token');\r\n       }\r\n \r\n+      // Sign in to Firebase\r\n+      final credential = GoogleAuthProvider.credential(\r\n+        accessToken: auth.accessToken,\r\n+        idToken: auth.idToken,\r\n+      );\r\n+      await FirebaseAuth.instance.signInWithCredential(credential);\r\n+\r\n       final client = http.Client();\r\n       final credentials = AccessCredentials(\r\n         AccessToken(\r\n           'Bearer',\r\n@@ -41,31 +48,20 @@\n           'https://www.googleapis.com/auth/drive.appdata',\r\n         ],\r\n       );\r\n \r\n-      return AutoRefreshingAuthClient(client, credentials, (credentials) async {\r\n-        // Refresh is handled by GoogleSignIn\r\n-        final newAuth = await account.authentication;\r\n-        return AccessCredentials(\r\n-          AccessToken(\r\n-            'Bearer',\r\n-            newAuth.accessToken!,\r\n-            DateTime.now().add(const Duration(hours: 1)),\r\n-          ),\r\n-          null,\r\n-          credentials.scopes,\r\n-        );\r\n-      });\r\n+      return authenticatedClient(client, credentials);\r\n     } catch (e) {\r\n       throw Exception('Failed to sign in: $e');\r\n     }\r\n   }\r\n \r\n   Future<void> signOut() async {\r\n     await _secureStorage.delete(key: _tokenKey);\r\n     await _googleSignIn.signOut();\r\n+    await FirebaseAuth.instance.signOut();\r\n   }\r\n \r\n   Future<bool> isSignedIn() async {\r\n-    return _googleSignIn.currentUser != null;\r\n+    return _googleSignIn.currentUser != null && FirebaseAuth.instance.currentUser != null;\r\n   }\r\n-}\r\n+} \n\\ No newline at end of file\n"
                }
            ],
            "date": 1744894002932,
            "name": "Commit-0",
            "content": "import 'package:googleapis_auth/auth_io.dart';\r\nimport 'package:flutter_secure_storage/flutter_secure_storage.dart';\r\nimport 'package:drivenotes/core/constants/app_constants.dart';\r\n\r\nclass AuthService {\r\n  final FlutterSecureStorage _secureStorage = const FlutterSecureStorage();\r\n  static const _tokenKey = 'google_auth_token';\r\n\r\n  Future<AutoRefreshingAuthClient> signIn() async {\r\n    // TODO: Implement proper OAuth2 flow with Google Sign-In\r\n    // This is a placeholder - you'll need to implement the actual OAuth2 flow\r\n    throw UnimplementedError('OAuth2 authentication not implemented');\r\n  }\r\n\r\n  Future<void> signOut() async {\r\n    await _secureStorage.delete(key: _tokenKey);\r\n  }\r\n\r\n  Future<bool> isSignedIn() async {\r\n    final token = await _secureStorage.read(key: _tokenKey);\r\n    return token != null;\r\n  }\r\n} "
        }
    ]
}