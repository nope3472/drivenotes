{
    "sourceFile": "lib/features/notes/domain/services/drive_service.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 7,
            "patches": [
                {
                    "date": 1744969855411,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1744970889663,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,22 +9,20 @@\n   Future<String> uploadNote({\r\n     required NoteModel note,\r\n     required String folderId,\r\n   }) async {\r\n-    final file = drive.File()\r\n-      ..name = '${note.id}.json'\r\n-      ..parents = [folderId]\r\n-      ..mimeType = 'application/json';\r\n+    final file =\r\n+        drive.File()\r\n+          ..name = '${note.id}.json'\r\n+          ..parents = [folderId]\r\n+          ..mimeType = 'application/json';\r\n \r\n     final media = drive.Media(\r\n-      note.toJson().toString().codeUnits,\r\n+      note.toJson().toString().codeUnits as Stream<List<int>>,\r\n       'application/json',\r\n     );\r\n \r\n-    final response = await _driveApi.files.create(\r\n-      file,\r\n-      uploadMedia: media,\r\n-    );\r\n+    final response = await _driveApi.files.create(file, uploadMedia: media);\r\n \r\n     return response.id!;\r\n   }\r\n \r\n@@ -38,16 +36,18 @@\n     );\r\n \r\n     final notes = <NoteModel>[];\r\n     for (final file in response.files ?? []) {\r\n-      final media = await _driveApi.files.get(\r\n-        file.id!,\r\n-        downloadOptions: drive.DownloadOptions.fullMedia,\r\n-      ) as drive.Media;\r\n+      final media =\r\n+          await _driveApi.files.get(\r\n+                file.id!,\r\n+                downloadOptions: drive.DownloadOptions.fullMedia,\r\n+              )\r\n+              as drive.Media;\r\n \r\n       final content = String.fromCharCodes(await media.stream.toBytes());\r\n\\ No newline at end of file\n       notes.add(NoteModel.fromJson(content));\r\n     }\r\n \r\n     return notes;\r\n   }\r\n-} \n+}\r\n"
                },
                {
                    "date": 1744970896720,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n           ..mimeType = 'application/json';\r\n \r\n     final media = drive.Media(\r\n       note.toJson().toString().codeUnits as Stream<List<int>>,\r\n-      'application/json',\r\n+      'application/json' as int?,\r\n     );\r\n \r\n     final response = await _driveApi.files.create(file, uploadMedia: media);\r\n \r\n@@ -49,5 +49,5 @@\n     }\r\n \r\n     return notes;\r\n   }\r\n-}\n\\ No newline at end of file\n+}\r\n"
                },
                {
                    "date": 1744970907726,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,9 +44,9 @@\n               )\r\n               as drive.Media;\r\n \r\n       final content = String.fromCharCodes(await media.stream.toBytes());\r\n-      notes.add(NoteModel.fromJson(content));\r\n+      notes.add(NoteModel.fromJson(content as Map<String, dynamic>));\r\n     }\r\n \r\n     return notes;\r\n   }\r\n"
                },
                {
                    "date": 1744971047252,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,53 +1,53 @@\n-import 'package:googleapis/drive/v3.dart' as drive;\r\n-import 'package:drivenotes/features/notes/domain/models/note_model.dart';\r\n-\r\n-class DriveService {\r\n-  final drive.DriveApi _driveApi;\r\n-\r\n-  DriveService(this._driveApi);\r\n-\r\n-  Future<String> uploadNote({\r\n-    required NoteModel note,\r\n-    required String folderId,\r\n-  }) async {\r\n-    final file =\r\n-        drive.File()\r\n-          ..name = '${note.id}.json'\r\n-          ..parents = [folderId]\r\n-          ..mimeType = 'application/json';\r\n-\r\n-    final media = drive.Media(\r\n-      note.toJson().toString().codeUnits as Stream<List<int>>,\r\n-      'application/json' as int?,\r\n-    );\r\n-\r\n-    final response = await _driveApi.files.create(file, uploadMedia: media);\r\n-\r\n-    return response.id!;\r\n-  }\r\n-\r\n-  Future<void> deleteNote(String fileId) async {\r\n-    await _driveApi.files.delete(fileId);\r\n-  }\r\n-\r\n-  Future<List<NoteModel>> getNotes(String folderId) async {\r\n-    final response = await _driveApi.files.list(\r\n-      q: \"'$folderId' in parents and mimeType='application/json'\",\r\n-    );\r\n-\r\n-    final notes = <NoteModel>[];\r\n-    for (final file in response.files ?? []) {\r\n-      final media =\r\n-          await _driveApi.files.get(\r\n-                file.id!,\r\n-                downloadOptions: drive.DownloadOptions.fullMedia,\r\n-              )\r\n-              as drive.Media;\r\n-\r\n-      final content = String.fromCharCodes(await media.stream.toBytes());\r\n-      notes.add(NoteModel.fromJson(content as Map<String, dynamic>));\r\n-    }\r\n-\r\n-    return notes;\r\n-  }\r\n-}\r\n+import 'package:googleapis/drive/v3.dart' as drive;\n+import 'package:drivenotes/features/notes/domain/models/note_model.dart';\n+\n+class DriveService {\n+  final drive.DriveApi _driveApi;\n+\n+  DriveService(this._driveApi);\n+\n+  Future<String> uploadNote({\n+    required NoteModel note,\n+    required String folderId,\n+  }) async {\n+    final file =\n+        drive.File()\n+          ..name = '${note.id}.json'\n+          ..parents = [folderId]\n+          ..mimeType = 'application/json';\n+\n+    final media = drive.Media(\n+      note.toJson().toString().codeUnits,\n+      'application/json',\n+    );\n+\n+    final response = await _driveApi.files.create(file, uploadMedia: media);\n+\n+    return response.id!;\n+  }\n+\n+  Future<void> deleteNote(String fileId) async {\n+    await _driveApi.files.delete(fileId);\n+  }\n+\n+  Future<List<NoteModel>> getNotes(String folderId) async {\n+    final response = await _driveApi.files.list(\n+      q: \"'$folderId' in parents and mimeType='application/json'\",\n+    );\n+\n+    final notes = <NoteModel>[];\n+    for (final file in response.files ?? []) {\n+      final media =\n+          await _driveApi.files.get(\n+                file.id!,\n+                downloadOptions: drive.DownloadOptions.fullMedia,\n+              )\n+              as drive.Media;\n+\n+      final content = String.fromCharCodes(await media.stream.toBytes());\n+      notes.add(NoteModel.fromJson(content));\n+    }\n+\n+    return notes;\n+  }\n+}\n"
                },
                {
                    "date": 1744971083578,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n           ..mimeType = 'application/json';\n \n     final media = drive.Media(\n       note.toJson().toString().codeUnits,\n-      'application/json',\n+      'application/json' as int?,\n     );\n \n     final response = await _driveApi.files.create(file, uploadMedia: media);\n \n"
                },
                {
                    "date": 1744971089247,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n           ..parents = [folderId]\n           ..mimeType = 'application/json';\n \n     final media = drive.Media(\n-      note.toJson().toString().codeUnits,\n+      note.toJson().toString().codeUnits as Stream<List<int>>,\n       'application/json' as int?,\n     );\n \n     final response = await _driveApi.files.create(file, uploadMedia: media);\n"
                },
                {
                    "date": 1744971104934,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n import 'package:googleapis/drive/v3.dart' as drive;\n import 'package:drivenotes/features/notes/domain/models/note_model.dart';\n+import 'dart:convert';\n \n class DriveService {\n   final drive.DriveApi _driveApi;\n \n@@ -36,17 +37,17 @@\n     );\n \n     final notes = <NoteModel>[];\n     for (final file in response.files ?? []) {\n-      final media =\n-          await _driveApi.files.get(\n+      final media = await _driveApi.files.get(\n                 file.id!,\n                 downloadOptions: drive.DownloadOptions.fullMedia,\n               )\n               as drive.Media;\n \n-      final content = String.fromCharCodes(await media.stream.toBytes());\n-      notes.add(NoteModel.fromJson(content as Map<String, dynamic>));\n+      final bytes = await media.stream.expand((x) => x).toList();\n+      final content = String.fromCharCodes(bytes);\n+      notes.add(NoteModel.fromJson(jsonDecode(content)));\n     }\n \n     return notes;\n   }\n"
                }
            ],
            "date": 1744969855411,
            "name": "Commit-0",
            "content": "import 'package:googleapis/drive/v3.dart' as drive;\r\nimport 'package:drivenotes/features/notes/domain/models/note_model.dart';\r\n\r\nclass DriveService {\r\n  final drive.DriveApi _driveApi;\r\n\r\n  DriveService(this._driveApi);\r\n\r\n  Future<String> uploadNote({\r\n    required NoteModel note,\r\n    required String folderId,\r\n  }) async {\r\n    final file = drive.File()\r\n      ..name = '${note.id}.json'\r\n      ..parents = [folderId]\r\n      ..mimeType = 'application/json';\r\n\r\n    final media = drive.Media(\r\n      note.toJson().toString().codeUnits,\r\n      'application/json',\r\n    );\r\n\r\n    final response = await _driveApi.files.create(\r\n      file,\r\n      uploadMedia: media,\r\n    );\r\n\r\n    return response.id!;\r\n  }\r\n\r\n  Future<void> deleteNote(String fileId) async {\r\n    await _driveApi.files.delete(fileId);\r\n  }\r\n\r\n  Future<List<NoteModel>> getNotes(String folderId) async {\r\n    final response = await _driveApi.files.list(\r\n      q: \"'$folderId' in parents and mimeType='application/json'\",\r\n    );\r\n\r\n    final notes = <NoteModel>[];\r\n    for (final file in response.files ?? []) {\r\n      final media = await _driveApi.files.get(\r\n        file.id!,\r\n        downloadOptions: drive.DownloadOptions.fullMedia,\r\n      ) as drive.Media;\r\n\r\n      final content = String.fromCharCodes(await media.stream.toBytes());\r\n      notes.add(NoteModel.fromJson(content));\r\n    }\r\n\r\n    return notes;\r\n  }\r\n} "
        }
    ]
}