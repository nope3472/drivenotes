{
    "sourceFile": "lib/features/notes/data/services/drive_service.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1744893754594,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1744894482614,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n   final drive.DriveApi _driveApi;\r\n \r\n   DriveService(this._driveApi);\r\n \r\n-  static Future<DriveService> create(AutoRefreshingAuthClient client) async {\r\n+  static Future<DriveService> create(AuthClient client) async {\r\n     final driveApi = drive.DriveApi(client);\r\n     return DriveService(driveApi);\r\n   }\r\n \r\n@@ -32,11 +32,12 @@\n   }\r\n \r\n   Future<String> createDriveNotesFolder() async {\r\n     try {\r\n-      final folder = drive.File()\r\n-        ..name = AppConstants.driveNotesFolderName\r\n-        ..mimeType = 'application/vnd.google-apps.folder';\r\n+      final folder =\r\n+          drive.File()\r\n+            ..name = AppConstants.driveNotesFolderName\r\n+            ..mimeType = 'application/vnd.google-apps.folder';\r\n \r\n       final response = await _driveApi.files.create(folder);\r\n       return response.id!;\r\n     } catch (e) {\r\n@@ -45,10 +46,11 @@\n   }\r\n \r\n   Future<List<drive.File>> getNotes() async {\r\n     try {\r\n-      final folderId = await getDriveNotesFolderId() ?? await createDriveNotesFolder();\r\n-      \r\n+      final folderId =\r\n+          await getDriveNotesFolderId() ?? await createDriveNotesFolder();\r\n+\r\n       final response = await _driveApi.files.list(\r\n         q: \"'$folderId' in parents and mimeType='text/plain' and trashed=false\",\r\n         spaces: 'drive',\r\n       );\r\n@@ -60,24 +62,23 @@\n   }\r\n \r\n   Future<String> createNote(String title, String content) async {\r\n     try {\r\n-      final folderId = await getDriveNotesFolderId() ?? await createDriveNotesFolder();\r\n-      \r\n-      final file = drive.File()\r\n-        ..name = '$title.txt'\r\n-        ..parents = [folderId]\r\n-        ..mimeType = 'text/plain';\r\n+      final folderId =\r\n+          await getDriveNotesFolderId() ?? await createDriveNotesFolder();\r\n \r\n+      final file =\r\n+          drive.File()\r\n+            ..name = '$title.txt'\r\n+            ..parents = [folderId]\r\n+            ..mimeType = 'text/plain';\r\n+\r\n       final media = drive.Media(\r\n         Stream.value(utf8.encode(content)),\r\n         content.length,\r\n       );\r\n \r\n-      final response = await _driveApi.files.create(\r\n-        file,\r\n-        uploadMedia: media,\r\n-      );\r\n+      final response = await _driveApi.files.create(file, uploadMedia: media);\r\n \r\n       return response.id!;\r\n     } catch (e) {\r\n       throw Exception('Failed to create note: $e');\r\n@@ -90,13 +91,9 @@\n         Stream.value(utf8.encode(content)),\r\n         content.length,\r\n       );\r\n \r\n-      await _driveApi.files.update(\r\n-        drive.File(),\r\n-        fileId,\r\n-        uploadMedia: media,\r\n-      );\r\n+      await _driveApi.files.update(drive.File(), fileId, uploadMedia: media);\r\n     } catch (e) {\r\n       throw Exception('Failed to update note: $e');\r\n     }\r\n   }\r\n@@ -125,5 +122,5 @@\n     } catch (e) {\r\n       throw Exception('Failed to get note content: $e');\r\n     }\r\n   }\r\n-} \n\\ No newline at end of file\n+}\r\n"
                }
            ],
            "date": 1744893754594,
            "name": "Commit-0",
            "content": "import 'dart:convert';\r\nimport 'package:googleapis/drive/v3.dart' as drive;\r\nimport 'package:googleapis_auth/auth_io.dart';\r\nimport 'package:flutter_secure_storage/flutter_secure_storage.dart';\r\nimport 'package:drivenotes/core/constants/app_constants.dart';\r\n\r\nclass DriveService {\r\n  final FlutterSecureStorage _secureStorage = const FlutterSecureStorage();\r\n  final drive.DriveApi _driveApi;\r\n\r\n  DriveService(this._driveApi);\r\n\r\n  static Future<DriveService> create(AutoRefreshingAuthClient client) async {\r\n    final driveApi = drive.DriveApi(client);\r\n    return DriveService(driveApi);\r\n  }\r\n\r\n  Future<String?> getDriveNotesFolderId() async {\r\n    try {\r\n      final response = await _driveApi.files.list(\r\n        q: \"name='${AppConstants.driveNotesFolderName}' and mimeType='application/vnd.google-apps.folder' and trashed=false\",\r\n        spaces: 'drive',\r\n      );\r\n\r\n      if (response.files != null && response.files!.isNotEmpty) {\r\n        return response.files!.first.id;\r\n      }\r\n      return null;\r\n    } catch (e) {\r\n      throw Exception('Failed to get DriveNotes folder: $e');\r\n    }\r\n  }\r\n\r\n  Future<String> createDriveNotesFolder() async {\r\n    try {\r\n      final folder = drive.File()\r\n        ..name = AppConstants.driveNotesFolderName\r\n        ..mimeType = 'application/vnd.google-apps.folder';\r\n\r\n      final response = await _driveApi.files.create(folder);\r\n      return response.id!;\r\n    } catch (e) {\r\n      throw Exception('Failed to create DriveNotes folder: $e');\r\n    }\r\n  }\r\n\r\n  Future<List<drive.File>> getNotes() async {\r\n    try {\r\n      final folderId = await getDriveNotesFolderId() ?? await createDriveNotesFolder();\r\n      \r\n      final response = await _driveApi.files.list(\r\n        q: \"'$folderId' in parents and mimeType='text/plain' and trashed=false\",\r\n        spaces: 'drive',\r\n      );\r\n\r\n      return response.files ?? [];\r\n    } catch (e) {\r\n      throw Exception('Failed to get notes: $e');\r\n    }\r\n  }\r\n\r\n  Future<String> createNote(String title, String content) async {\r\n    try {\r\n      final folderId = await getDriveNotesFolderId() ?? await createDriveNotesFolder();\r\n      \r\n      final file = drive.File()\r\n        ..name = '$title.txt'\r\n        ..parents = [folderId]\r\n        ..mimeType = 'text/plain';\r\n\r\n      final media = drive.Media(\r\n        Stream.value(utf8.encode(content)),\r\n        content.length,\r\n      );\r\n\r\n      final response = await _driveApi.files.create(\r\n        file,\r\n        uploadMedia: media,\r\n      );\r\n\r\n      return response.id!;\r\n    } catch (e) {\r\n      throw Exception('Failed to create note: $e');\r\n    }\r\n  }\r\n\r\n  Future<void> updateNote(String fileId, String content) async {\r\n    try {\r\n      final media = drive.Media(\r\n        Stream.value(utf8.encode(content)),\r\n        content.length,\r\n      );\r\n\r\n      await _driveApi.files.update(\r\n        drive.File(),\r\n        fileId,\r\n        uploadMedia: media,\r\n      );\r\n    } catch (e) {\r\n      throw Exception('Failed to update note: $e');\r\n    }\r\n  }\r\n\r\n  Future<void> deleteNote(String fileId) async {\r\n    try {\r\n      await _driveApi.files.delete(fileId);\r\n    } catch (e) {\r\n      throw Exception('Failed to delete note: $e');\r\n    }\r\n  }\r\n\r\n  Future<String> getNoteContent(String fileId) async {\r\n    try {\r\n      final response = await _driveApi.files.get(\r\n        fileId,\r\n        downloadOptions: drive.DownloadOptions.fullMedia,\r\n      );\r\n\r\n      if (response is! drive.Media) {\r\n        throw Exception('Failed to get note content');\r\n      }\r\n\r\n      final content = await response.stream.transform(utf8.decoder).join();\r\n      return content;\r\n    } catch (e) {\r\n      throw Exception('Failed to get note content: $e');\r\n    }\r\n  }\r\n} "
        }
    ]
}