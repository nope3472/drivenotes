{
    "sourceFile": "lib/features/notes/data/sync_service.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 7,
            "patches": [
                {
                    "date": 1744969846425,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1744969958522,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n     // Get unsynced notes from local database\r\n     final unsyncedNotes = await _localDatabase.getUnsyncedNotes();\r\n \r\n     // Ensure DriveNotes folder exists\r\n-    final folderId = await _folderService.ensureDriveNotesFolder();\r\n+    final folderId = await _folderService.getOrCreateFolder();\r\n \r\n     // Upload each unsynced note to Google Drive\r\n     for (final note in unsyncedNotes) {\r\n       try {\r\n"
                },
                {
                    "date": 1744970028031,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,11 +11,11 @@\n   SyncService({\r\n     required LocalDatabase localDatabase,\r\n     required DriveService driveService,\r\n     required FolderService folderService,\r\n-  })  : _localDatabase = localDatabase,\r\n-        _driveService = driveService,\r\n-        _folderService = folderService;\r\n+  }) : _localDatabase = localDatabase,\r\n+       _driveService = driveService,\r\n+       _folderService = folderService;\r\n \r\n   Future<void> syncNotes() async {\r\n     // Get unsynced notes from local database\r\n     final unsyncedNotes = await _localDatabase.getUnsyncedNotes();\r\n@@ -29,9 +29,9 @@\n         final driveId = await _driveService.uploadNote(\r\n           note: note,\r\n           folderId: folderId,\r\n         );\r\n-        \r\n+\r\n         // Mark note as synced in local database\r\n         await _localDatabase.markNoteAsSynced(note.id, driveId);\r\n       } catch (e) {\r\n         print('Error syncing note ${note.id}: $e');\r\n@@ -43,9 +43,9 @@\n \r\n   Future<List<NoteModel>> getNotes() async {\r\n     // First try to get notes from local database\r\n     final localNotes = await _localDatabase.getAllNotes();\r\n-    \r\n+\r\n     // If we have unsynced notes, try to sync them\r\n     if (localNotes.any((note) => note.isSynced == false)) {\r\n       await syncNotes();\r\n     }\r\n@@ -56,9 +56,9 @@\n \r\n   Future<void> saveNote(NoteModel note) async {\r\n     // Save to local database first\r\n     await _localDatabase.insertNote(note);\r\n-    \r\n+\r\n     // Try to sync immediately\r\n     try {\r\n       await syncNotes();\r\n     } catch (e) {\r\n@@ -69,17 +69,17 @@\n \r\n   Future<void> deleteNote(String id) async {\r\n     // Delete from local database\r\n     await _localDatabase.deleteNote(id);\r\n-    \r\n+\r\n     // Try to delete from Drive if synced\r\n     try {\r\n       final note = await _localDatabase.getNoteById(id);\r\n-      if (note?.driveId != null) {\r\n-        await _driveService.deleteNote(note!.driveId!);\r\n+      if (note?.fileId != null) {\r\n+        await _driveService.deleteNote(note!.fileId!);\r\n       }\r\n     } catch (e) {\r\n       print('Error deleting from Drive: $e');\r\n       // Note is deleted locally, will handle Drive deletion next sync\r\n\\ No newline at end of file\n     }\r\n   }\r\n-} \n+}\r\n"
                },
                {
                    "date": 1744970341147,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -81,5 +81,5 @@\n       print('Error deleting from Drive: $e');\r\n       // Note is deleted locally, will handle Drive deletion next sync\r\n     }\r\n   }\r\n-}\n\\ No newline at end of file\n+}\r\n"
                },
                {
                    "date": 1744970458674,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,14 +57,16 @@\n   Future<void> saveNote(NoteModel note) async {\r\n     // Save to local database first\r\n     await _localDatabase.insertNote(note);\r\n \r\n-    // Try to sync immediately\r\n+    // Try to sync immediately only if we have internet\r\n     try {\r\n+      // Check if we can reach Google's servers\r\n+      await Future.delayed(Duration.zero); // This will throw if we're offline\r\n       await syncNotes();\r\n     } catch (e) {\r\n-      print('Error syncing after save: $e');\r\n-      // Note is saved locally, will sync next time\r\n+      print('Note saved locally. Will sync when online: $e');\r\n+      // Note is saved locally, will sync next time we're online\r\n     }\r\n   }\r\n \r\n   Future<void> deleteNote(String id) async {\r\n"
                },
                {
                    "date": 1744971277516,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,18 +3,16 @@\n import 'package:drivenotes/features/notes/domain/services/drive_service.dart';\r\n import 'package:drivenotes/features/notes/domain/services/folder_service.dart';\r\n \r\n class SyncService {\r\n-  final LocalDatabase _localDatabase;\r\n+  final LocalDatabase _localDatabase = LocalDatabase.instance;\r\n   final DriveService _driveService;\r\n   final FolderService _folderService;\r\n \r\n   SyncService({\r\n-    required LocalDatabase localDatabase,\r\n     required DriveService driveService,\r\n     required FolderService folderService,\r\n-  }) : _localDatabase = localDatabase,\r\n-       _driveService = driveService,\r\n+  }) : _driveService = driveService,\r\n        _folderService = folderService;\r\n \r\n   Future<void> syncNotes() async {\r\n     // Get unsynced notes from local database\r\n"
                },
                {
                    "date": 1744971444178,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,73 +13,16 @@\n     required FolderService folderService,\r\n   }) : _driveService = driveService,\r\n        _folderService = folderService;\r\n \r\n-  Future<void> syncNotes() async {\r\n-    // Get unsynced notes from local database\r\n-    final unsyncedNotes = await _localDatabase.getUnsyncedNotes();\r\n-\r\n-    // Ensure DriveNotes folder exists\r\n-    final folderId = await _folderService.getOrCreateFolder();\r\n-\r\n-    // Upload each unsynced note to Google Drive\r\n-    for (final note in unsyncedNotes) {\r\n-      try {\r\n-        final driveId = await _driveService.uploadNote(\r\n-          note: note,\r\n-          folderId: folderId,\r\n-        );\r\n-\r\n-        // Mark note as synced in local database\r\n-        await _localDatabase.markNoteAsSynced(note.id, driveId);\r\n-      } catch (e) {\r\n-        print('Error syncing note ${note.id}: $e');\r\n-        // Continue with next note even if one fails\r\n-        continue;\r\n-      }\r\n-    }\r\n-  }\r\n-\r\n   Future<List<NoteModel>> getNotes() async {\r\n-    // First try to get notes from local database\r\n-    final localNotes = await _localDatabase.getAllNotes();\r\n-\r\n-    // If we have unsynced notes, try to sync them\r\n-    if (localNotes.any((note) => note.isSynced == false)) {\r\n-      await syncNotes();\r\n-    }\r\n-\r\n-    // Return the updated local notes\r\n     return await _localDatabase.getAllNotes();\r\n   }\r\n \r\n   Future<void> saveNote(NoteModel note) async {\r\n-    // Save to local database first\r\n     await _localDatabase.insertNote(note);\r\n-\r\n-    // Try to sync immediately only if we have internet\r\n-    try {\r\n-      // Check if we can reach Google's servers\r\n-      await Future.delayed(Duration.zero); // This will throw if we're offline\r\n-      await syncNotes();\r\n-    } catch (e) {\r\n-      print('Note saved locally. Will sync when online: $e');\r\n-      // Note is saved locally, will sync next time we're online\r\n-    }\r\n   }\r\n \r\n   Future<void> deleteNote(String id) async {\r\n-    // Delete from local database\r\n     await _localDatabase.deleteNote(id);\r\n-\r\n-    // Try to delete from Drive if synced\r\n-    try {\r\n-      final note = await _localDatabase.getNoteById(id);\r\n-      if (note?.fileId != null) {\r\n-        await _driveService.deleteNote(note!.fileId!);\r\n-      }\r\n-    } catch (e) {\r\n-      print('Error deleting from Drive: $e');\r\n-      // Note is deleted locally, will handle Drive deletion next sync\r\n-    }\r\n   }\r\n }\r\n"
                },
                {
                    "date": 1744971479810,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,28 +1,85 @@\n-import 'package:drivenotes/features/notes/data/local_database.dart';\r\n-import 'package:drivenotes/features/notes/domain/models/note_model.dart';\r\n-import 'package:drivenotes/features/notes/domain/services/drive_service.dart';\r\n-import 'package:drivenotes/features/notes/domain/services/folder_service.dart';\r\n-\r\n-class SyncService {\r\n-  final LocalDatabase _localDatabase = LocalDatabase.instance;\r\n-  final DriveService _driveService;\r\n-  final FolderService _folderService;\r\n-\r\n-  SyncService({\r\n-    required DriveService driveService,\r\n-    required FolderService folderService,\r\n-  }) : _driveService = driveService,\r\n-       _folderService = folderService;\r\n-\r\n-  Future<List<NoteModel>> getNotes() async {\r\n-    return await _localDatabase.getAllNotes();\r\n-  }\r\n-\r\n-  Future<void> saveNote(NoteModel note) async {\r\n-    await _localDatabase.insertNote(note);\r\n-  }\r\n-\r\n-  Future<void> deleteNote(String id) async {\r\n-    await _localDatabase.deleteNote(id);\r\n-  }\r\n-}\r\n+import 'package:drivenotes/features/notes/data/local_database.dart';\n+import 'package:drivenotes/features/notes/domain/models/note_model.dart';\n+import 'package:drivenotes/features/notes/domain/services/drive_service.dart';\n+import 'package:drivenotes/features/notes/domain/services/folder_service.dart';\n+\n+class SyncService {\n+  final LocalDatabase _localDatabase = LocalDatabase.instance;\n+  final DriveService _driveService;\n+  final FolderService _folderService;\n+\n+  SyncService({\n+    required DriveService driveService,\n+    required FolderService folderService,\n+  }) : _driveService = driveService,\n+       _folderService = folderService;\n+\n+  Future<void> syncNotes() async {\n+    // Get unsynced notes from local database\n+    final unsyncedNotes = await _localDatabase.getUnsyncedNotes();\n+\n+    // Ensure DriveNotes folder exists\n+    final folderId = await _folderService.getOrCreateFolder();\n+\n+    // Upload each unsynced note to Google Drive\n+    for (final note in unsyncedNotes) {\n+      try {\n+        final driveId = await _driveService.uploadNote(\n+          note: note,\n+          folderId: folderId,\n+        );\n+\n+        // Mark note as synced in local database\n+        await _localDatabase.markNoteAsSynced(note.id, driveId);\n+      } catch (e) {\n+        print('Error syncing note ${note.id}: $e');\n+        // Continue with next note even if one fails\n+        continue;\n+      }\n+    }\n+  }\n+\n+  Future<List<NoteModel>> getNotes() async {\n+    // First try to get notes from local database\n+    final localNotes = await _localDatabase.getAllNotes();\n+\n+    // If we have unsynced notes, try to sync them\n+    if (localNotes.any((note) => note.isSynced == false)) {\n+      await syncNotes();\n+    }\n+\n+    // Return the updated local notes\n+    return await _localDatabase.getAllNotes();\n+  }\n+\n+  Future<void> saveNote(NoteModel note) async {\n+    // Save to local database first\n+    await _localDatabase.insertNote(note);\n+\n+    // Try to sync immediately only if we have internet\n+    try {\n+      // Check if we can reach Google's servers\n+      await Future.delayed(Duration.zero); // This will throw if we're offline\n+      await syncNotes();\n+    } catch (e) {\n+      print('Note saved locally. Will sync when online: $e');\n+      // Note is saved locally, will sync next time we're online\n+    }\n+  }\n+\n+  Future<void> deleteNote(String id) async {\n+    // Delete from local database\n+    await _localDatabase.deleteNote(id);\n+\n+    // Try to delete from Drive if synced\n+    try {\n+      final note = await _localDatabase.getNoteById(id);\n+      if (note?.fileId != null) {\n+        await _driveService.deleteNote(note!.fileId!);\n+      }\n+    } catch (e) {\n+      print('Error deleting from Drive: $e');\n+      // Note is deleted locally, will handle Drive deletion next sync\n+    }\n+  }\n+}\n"
                }
            ],
            "date": 1744969846425,
            "name": "Commit-0",
            "content": "import 'package:drivenotes/features/notes/data/local_database.dart';\r\nimport 'package:drivenotes/features/notes/domain/models/note_model.dart';\r\nimport 'package:drivenotes/features/notes/domain/services/drive_service.dart';\r\nimport 'package:drivenotes/features/notes/domain/services/folder_service.dart';\r\n\r\nclass SyncService {\r\n  final LocalDatabase _localDatabase;\r\n  final DriveService _driveService;\r\n  final FolderService _folderService;\r\n\r\n  SyncService({\r\n    required LocalDatabase localDatabase,\r\n    required DriveService driveService,\r\n    required FolderService folderService,\r\n  })  : _localDatabase = localDatabase,\r\n        _driveService = driveService,\r\n        _folderService = folderService;\r\n\r\n  Future<void> syncNotes() async {\r\n    // Get unsynced notes from local database\r\n    final unsyncedNotes = await _localDatabase.getUnsyncedNotes();\r\n\r\n    // Ensure DriveNotes folder exists\r\n    final folderId = await _folderService.ensureDriveNotesFolder();\r\n\r\n    // Upload each unsynced note to Google Drive\r\n    for (final note in unsyncedNotes) {\r\n      try {\r\n        final driveId = await _driveService.uploadNote(\r\n          note: note,\r\n          folderId: folderId,\r\n        );\r\n        \r\n        // Mark note as synced in local database\r\n        await _localDatabase.markNoteAsSynced(note.id, driveId);\r\n      } catch (e) {\r\n        print('Error syncing note ${note.id}: $e');\r\n        // Continue with next note even if one fails\r\n        continue;\r\n      }\r\n    }\r\n  }\r\n\r\n  Future<List<NoteModel>> getNotes() async {\r\n    // First try to get notes from local database\r\n    final localNotes = await _localDatabase.getAllNotes();\r\n    \r\n    // If we have unsynced notes, try to sync them\r\n    if (localNotes.any((note) => note.isSynced == false)) {\r\n      await syncNotes();\r\n    }\r\n\r\n    // Return the updated local notes\r\n    return await _localDatabase.getAllNotes();\r\n  }\r\n\r\n  Future<void> saveNote(NoteModel note) async {\r\n    // Save to local database first\r\n    await _localDatabase.insertNote(note);\r\n    \r\n    // Try to sync immediately\r\n    try {\r\n      await syncNotes();\r\n    } catch (e) {\r\n      print('Error syncing after save: $e');\r\n      // Note is saved locally, will sync next time\r\n    }\r\n  }\r\n\r\n  Future<void> deleteNote(String id) async {\r\n    // Delete from local database\r\n    await _localDatabase.deleteNote(id);\r\n    \r\n    // Try to delete from Drive if synced\r\n    try {\r\n      final note = await _localDatabase.getNoteById(id);\r\n      if (note?.driveId != null) {\r\n        await _driveService.deleteNote(note!.driveId!);\r\n      }\r\n    } catch (e) {\r\n      print('Error deleting from Drive: $e');\r\n      // Note is deleted locally, will handle Drive deletion next sync\r\n    }\r\n  }\r\n} "
        }
    ]
}