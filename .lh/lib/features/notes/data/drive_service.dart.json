{
    "sourceFile": "lib/features/notes/data/drive_service.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 34,
            "patches": [
                {
                    "date": 1744897345236,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1744897410679,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,12 +18,24 @@\n \r\n   Future<void> deleteNote(String fileId) async {\r\n     // TODO: Implement note deletion\r\n   }\r\n+\r\n+  Future<void> createNote(String title, String content) async {\r\n+    // TODO: Implement note creation\r\n+  }\r\n+\r\n+  Future<void> updateNote({\r\n+    required String fileId,\r\n+    required String newTitle,\r\n\\ No newline at end of file\n+    required String newContent,\r\n+  }) async {\r\n+    // TODO: Implement note update\r\n+  }\r\n }\r\n \r\n class DriveFile {\r\n   final String? id;\r\n   final String? name;\r\n \r\n   DriveFile({this.id, this.name});\r\n-} \n+}\r\n"
                },
                {
                    "date": 1744898200137,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,5 +37,5 @@\n   final String? id;\r\n   final String? name;\r\n \r\n   DriveFile({this.id, this.name});\r\n-}\n\\ No newline at end of file\n+}\r\n"
                },
                {
                    "date": 1744898216703,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,36 +1,127 @@\n+import 'dart:convert';\r\n+import 'package:googleapis/drive/v3.dart' as drive;\r\n+import 'package:googleapis_auth/auth_io.dart';\r\n+import 'package:flutter_secure_storage/flutter_secure_storage.dart';\r\n+import 'package:http/http.dart' as http;\r\n+\r\n class DriveService {\r\n   static final DriveService instance = DriveService._();\r\n   DriveService._();\r\n \r\n+  static const _storage = FlutterSecureStorage();\r\n+  static const _folderName = 'DriveNotes';\r\n+  static const _scopes = [drive.DriveApi.driveFileScope];\r\n+  \r\n+  late drive.DriveApi _driveApi;\r\n+  String? _folderId;\r\n+\r\n+  Future<void> _ensureAuthenticated() async {\r\n+    final token = await _storage.read(key: 'auth_token');\r\n+    if (token == null) throw Exception('Not authenticated');\r\n+    \r\n+    final credentials = AccessCredentials(\r\n+      AccessToken('Bearer', token, DateTime.now().add(const Duration(hours: 1))),\r\n+      null,\r\n+      _scopes,\r\n+    );\r\n+    \r\n+    final client = authenticatedClient(\r\n+      http.Client(),\r\n+      credentials,\r\n+      identifier: 'DriveNotes',\r\n+    );\r\n+    \r\n+    _driveApi = drive.DriveApi(client);\r\n+  }\r\n+\r\n   Future<void> ensureFolderExists() async {\r\n-    // TODO: Implement folder creation\r\n+    await _ensureAuthenticated();\r\n+    if (_folderId != null) return;\r\n+\r\n+    final query = \"name = '$_folderName' and mimeType = 'application/vnd.google-apps.folder' and trashed = false\";\r\n+    final response = await _driveApi.files.list(\r\n+      q: query,\r\n+      spaces: 'drive',\r\n+    );\r\n+\r\n+    if (response.files?.isNotEmpty == true) {\r\n+      _folderId = response.files!.first.id;\r\n+      return;\r\n+    }\r\n+\r\n+    final folder = drive.File()\r\n+      ..name = _folderName\r\n+      ..mimeType = 'application/vnd.google-apps.folder';\r\n+    \r\n+    final created = await _driveApi.files.create(folder);\r\n+    _folderId = created.id;\r\n   }\r\n \r\n   Future<List<DriveFile>> listRawFiles() async {\r\n-    // TODO: Implement file listing\r\n-    return [];\r\n+    await _ensureAuthenticated();\r\n+    final query = \"'$_folderId' in parents and mimeType = 'text/plain' and trashed = false\";\r\n+    final response = await _driveApi.files.list(\r\n+      q: query,\r\n+      spaces: 'drive',\r\n+    );\r\n+    \r\n+    return response.files?.map((f) => DriveFile(id: f.id, name: f.name)).toList() ?? [];\r\n   }\r\n \r\n   Future<String> fetchContent(String fileId) async {\r\n-    // TODO: Implement content fetching\r\n-    return '';\r\n+    await _ensureAuthenticated();\r\n+    final media = await _driveApi.files.get(\r\n+      fileId,\r\n+      downloadOptions: drive.DownloadOptions.fullMedia,\r\n+    ) as drive.Media;\r\n+    \r\n+    return utf8.decode(await media.stream.toBytes());\r\n   }\r\n \r\n   Future<void> deleteNote(String fileId) async {\r\n-    // TODO: Implement note deletion\r\n+    await _ensureAuthenticated();\r\n+    await _driveApi.files.delete(fileId);\r\n   }\r\n \r\n   Future<void> createNote(String title, String content) async {\r\n-    // TODO: Implement note creation\r\n+    await _ensureAuthenticated();\r\n+    final file = drive.File()\r\n+      ..name = '$title.txt'\r\n+      ..mimeType = 'text/plain'\r\n+      ..parents = [_folderId!];\r\n+    \r\n+    final media = drive.Media(\r\n+      Stream.value(utf8.encode(content)),\r\n+      content.length,\r\n+    );\r\n+    \r\n+    await _driveApi.files.create(\r\n+      file,\r\n+      uploadMedia: media,\r\n+    );\r\n   }\r\n \r\n   Future<void> updateNote({\r\n     required String fileId,\r\n     required String newTitle,\r\n     required String newContent,\r\n   }) async {\r\n-    // TODO: Implement note update\r\n+    await _ensureAuthenticated();\r\n+    final file = drive.File()\r\n+      ..name = '$newTitle.txt'\r\n+      ..mimeType = 'text/plain';\r\n+    \r\n+    final media = drive.Media(\r\n+      Stream.value(utf8.encode(newContent)),\r\n+      newContent.length,\r\n+    );\r\n+    \r\n+    await _driveApi.files.update(\r\n+      file,\r\n+      fileId,\r\n+      uploadMedia: media,\r\n+    );\r\n   }\r\n }\r\n \r\n class DriveFile {\r\n"
                },
                {
                    "date": 1744898320452,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import 'dart:convert';\r\n import 'package:googleapis/drive/v3.dart' as drive;\r\n-import 'package:googleapis_auth/auth_io.dart';\r\n+import 'package:googleapis_auth/googleapis_auth.dart';\r\n import 'package:flutter_secure_storage/flutter_secure_storage.dart';\r\n import 'package:http/http.dart' as http;\r\n \r\n class DriveService {\r\n@@ -10,73 +10,105 @@\n \r\n   static const _storage = FlutterSecureStorage();\r\n   static const _folderName = 'DriveNotes';\r\n   static const _scopes = [drive.DriveApi.driveFileScope];\r\n-  \r\n+\r\n   late drive.DriveApi _driveApi;\r\n   String? _folderId;\r\n \r\n   Future<void> _ensureAuthenticated() async {\r\n-    final token = await _storage.read(key: 'auth_token');\r\n-    if (token == null) throw Exception('Not authenticated');\r\n+    final accessToken = await _storage.read(key: 'access_token');\r\n+    final refreshToken = await _storage.read(key: 'refresh_token');\r\n+    final expiryStr = await _storage.read(key: 'token_expiry');\r\n     \r\n-    final credentials = AccessCredentials(\r\n-      AccessToken('Bearer', token, DateTime.now().add(const Duration(hours: 1))),\r\n-      null,\r\n-      _scopes,\r\n-    );\r\n-    \r\n-    final client = authenticatedClient(\r\n-      http.Client(),\r\n-      credentials,\r\n-      identifier: 'DriveNotes',\r\n-    );\r\n-    \r\n-    _driveApi = drive.DriveApi(client);\r\n+    if (accessToken == null || refreshToken == null || expiryStr == null) {\r\n+      throw Exception('Not authenticated');\r\n+    }\r\n+\r\n+    final expiry = DateTime.parse(expiryStr);\r\n+    if (expiry.isBefore(DateTime.now())) {\r\n+      // Token expired, refresh it\r\n+      final client = http.Client();\r\n+      try {\r\n+        final credentials = await refreshCredentials(\r\n+          ClientId('your-client-id', 'your-client-secret'),\r\n+          AccessCredentials(\r\n+            AccessToken('Bearer', accessToken, expiry),\r\n+            refreshToken,\r\n+            _scopes,\r\n+          ),\r\n+          client,\r\n+        );\r\n+\r\n+        // Save new tokens\r\n+        await _storage.write(key: 'access_token', value: credentials.accessToken.data);\r\n+        await _storage.write(key: 'token_expiry', value: credentials.accessToken.expiry.toIso8601String());\r\n+        \r\n+        _driveApi = drive.DriveApi(authenticatedClient(client, credentials));\r\n+      } catch (e) {\r\n+        client.close();\r\n+        rethrow;\r\n+      }\r\n+    } else {\r\n+      // Token still valid\r\n+      final credentials = AccessCredentials(\r\n+        AccessToken('Bearer', accessToken, expiry),\r\n+        refreshToken,\r\n+        _scopes,\r\n+      );\r\n+      \r\n+      _driveApi = drive.DriveApi(authenticatedClient(http.Client(), credentials));\r\n+    }\r\n   }\r\n \r\n   Future<void> ensureFolderExists() async {\r\n     await _ensureAuthenticated();\r\n     if (_folderId != null) return;\r\n \r\n-    final query = \"name = '$_folderName' and mimeType = 'application/vnd.google-apps.folder' and trashed = false\";\r\n-    final response = await _driveApi.files.list(\r\n-      q: query,\r\n-      spaces: 'drive',\r\n-    );\r\n+    final query =\r\n+        \"name = '$_folderName' and mimeType = 'application/vnd.google-apps.folder' and trashed = false\";\r\n+    final response = await _driveApi.files.list(q: query, spaces: 'drive');\r\n \r\n     if (response.files?.isNotEmpty == true) {\r\n       _folderId = response.files!.first.id;\r\n       return;\r\n     }\r\n \r\n-    final folder = drive.File()\r\n-      ..name = _folderName\r\n-      ..mimeType = 'application/vnd.google-apps.folder';\r\n-    \r\n+    final folder =\r\n+        drive.File()\r\n+          ..name = _folderName\r\n+          ..mimeType = 'application/vnd.google-apps.folder';\r\n+\r\n     final created = await _driveApi.files.create(folder);\r\n     _folderId = created.id;\r\n   }\r\n \r\n   Future<List<DriveFile>> listRawFiles() async {\r\n     await _ensureAuthenticated();\r\n-    final query = \"'$_folderId' in parents and mimeType = 'text/plain' and trashed = false\";\r\n-    final response = await _driveApi.files.list(\r\n-      q: query,\r\n-      spaces: 'drive',\r\n-    );\r\n-    \r\n-    return response.files?.map((f) => DriveFile(id: f.id, name: f.name)).toList() ?? [];\r\n+    final query =\r\n+        \"'$_folderId' in parents and mimeType = 'text/plain' and trashed = false\";\r\n+    final response = await _driveApi.files.list(q: query, spaces: 'drive');\r\n+\r\n+    return response.files\r\n+            ?.map((f) => DriveFile(id: f.id, name: f.name))\r\n+            .toList() ??\r\n+        [];\r\n   }\r\n \r\n   Future<String> fetchContent(String fileId) async {\r\n     await _ensureAuthenticated();\r\n-    final media = await _driveApi.files.get(\r\n-      fileId,\r\n-      downloadOptions: drive.DownloadOptions.fullMedia,\r\n-    ) as drive.Media;\r\n-    \r\n-    return utf8.decode(await media.stream.toBytes());\r\n+    final media =\r\n+        await _driveApi.files.get(\r\n+              fileId,\r\n+              downloadOptions: drive.DownloadOptions.fullMedia,\r\n+            )\r\n+            as drive.Media;\r\n+\r\n+    final bytes = await media.stream.fold<List<int>>(\r\n+      [],\r\n+      (previous, element) => previous..addAll(element),\r\n+    );\r\n+    return utf8.decode(bytes);\r\n   }\r\n \r\n   Future<void> deleteNote(String fileId) async {\r\n     await _ensureAuthenticated();\r\n@@ -84,44 +116,41 @@\n   }\r\n \r\n   Future<void> createNote(String title, String content) async {\r\n     await _ensureAuthenticated();\r\n-    final file = drive.File()\r\n-      ..name = '$title.txt'\r\n-      ..mimeType = 'text/plain'\r\n-      ..parents = [_folderId!];\r\n-    \r\n+    final file =\r\n+        drive.File()\r\n+          ..name = '$title.txt'\r\n+          ..mimeType = 'text/plain'\r\n+          ..parents = [_folderId!];\r\n+\r\n+    final bytes = utf8.encode(content);\r\n     final media = drive.Media(\r\n-      Stream.value(utf8.encode(content)),\r\n-      content.length,\r\n+      Stream.value(bytes),\r\n+      bytes.length,\r\n     );\r\n-    \r\n-    await _driveApi.files.create(\r\n-      file,\r\n-      uploadMedia: media,\r\n-    );\r\n+\r\n+    await _driveApi.files.create(file, uploadMedia: media);\r\n   }\r\n \r\n   Future<void> updateNote({\r\n     required String fileId,\r\n     required String newTitle,\r\n     required String newContent,\r\n   }) async {\r\n     await _ensureAuthenticated();\r\n-    final file = drive.File()\r\n-      ..name = '$newTitle.txt'\r\n-      ..mimeType = 'text/plain';\r\n-    \r\n+    final file =\r\n+        drive.File()\r\n+          ..name = '$newTitle.txt'\r\n+          ..mimeType = 'text/plain';\r\n+\r\n+    final bytes = utf8.encode(newContent);\r\n     final media = drive.Media(\r\n-      Stream.value(utf8.encode(newContent)),\r\n-      newContent.length,\r\n+      Stream.value(bytes),\r\n+      bytes.length,\r\n     );\r\n-    \r\n-    await _driveApi.files.update(\r\n-      file,\r\n-      fileId,\r\n-      uploadMedia: media,\r\n-    );\r\n+\r\n+    await _driveApi.files.update(file, fileId, uploadMedia: media);\r\n   }\r\n }\r\n \r\n class DriveFile {\r\n"
                },
                {
                    "date": 1744898512515,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,20 +18,20 @@\n   Future<void> _ensureAuthenticated() async {\r\n     final accessToken = await _storage.read(key: 'access_token');\r\n     final refreshToken = await _storage.read(key: 'refresh_token');\r\n     final expiryStr = await _storage.read(key: 'token_expiry');\r\n-    \r\n+\r\n     if (accessToken == null || refreshToken == null || expiryStr == null) {\r\n       throw Exception('Not authenticated');\r\n     }\r\n \r\n-    final expiry = DateTime.parse(expiryStr);\r\n-    if (expiry.isBefore(DateTime.now())) {\r\n+    final expiry = DateTime.parse(expiryStr).toUtc();\r\n+    if (expiry.isBefore(DateTime.now().toUtc())) {\r\n       // Token expired, refresh it\r\n       final client = http.Client();\r\n       try {\r\n         final credentials = await refreshCredentials(\r\n-          ClientId('your-client-id', 'your-client-secret'),\r\n+          ClientId('your-client-id', null),\r\n           AccessCredentials(\r\n             AccessToken('Bearer', accessToken, expiry),\r\n             refreshToken,\r\n             _scopes,\r\n@@ -39,11 +39,17 @@\n           client,\r\n         );\r\n \r\n         // Save new tokens\r\n-        await _storage.write(key: 'access_token', value: credentials.accessToken.data);\r\n-        await _storage.write(key: 'token_expiry', value: credentials.accessToken.expiry.toIso8601String());\r\n-        \r\n+        await _storage.write(\r\n+          key: 'access_token',\r\n+          value: credentials.accessToken.data,\r\n+        );\r\n+        await _storage.write(\r\n+          key: 'token_expiry',\r\n+          value: credentials.accessToken.expiry.toUtc().toIso8601String(),\r\n+        );\r\n+\r\n         _driveApi = drive.DriveApi(authenticatedClient(client, credentials));\r\n       } catch (e) {\r\n         client.close();\r\n         rethrow;\r\n@@ -54,10 +60,12 @@\n         AccessToken('Bearer', accessToken, expiry),\r\n         refreshToken,\r\n         _scopes,\r\n       );\r\n-      \r\n-      _driveApi = drive.DriveApi(authenticatedClient(http.Client(), credentials));\r\n+\r\n+      _driveApi = drive.DriveApi(\r\n+        authenticatedClient(http.Client(), credentials),\r\n+      );\r\n     }\r\n   }\r\n \r\n   Future<void> ensureFolderExists() async {\r\n@@ -65,9 +73,13 @@\n     if (_folderId != null) return;\r\n \r\n     final query =\r\n         \"name = '$_folderName' and mimeType = 'application/vnd.google-apps.folder' and trashed = false\";\r\n-    final response = await _driveApi.files.list(q: query, spaces: 'drive');\r\n+    final response = await _driveApi.files.list(\r\n+      q: query,\r\n+      spaces: 'drive',\r\n+      $fields: 'files(id, name)',\r\n+    );\r\n \r\n     if (response.files?.isNotEmpty == true) {\r\n       _folderId = response.files!.first.id;\r\n       return;\r\n@@ -83,15 +95,23 @@\n   }\r\n \r\n   Future<List<DriveFile>> listRawFiles() async {\r\n     await _ensureAuthenticated();\r\n+    await ensureFolderExists();\r\n+\r\n     final query =\r\n         \"'$_folderId' in parents and mimeType = 'text/plain' and trashed = false\";\r\n-    final response = await _driveApi.files.list(q: query, spaces: 'drive');\r\n+    final response = await _driveApi.files.list(\r\n+      q: query,\r\n+      spaces: 'drive',\r\n+      $fields: 'files(id, name, modifiedTime)',\r\n+      orderBy: 'modifiedTime desc',\r\n+    );\r\n \r\n     return response.files\r\n-            ?.map((f) => DriveFile(id: f.id, name: f.name))\r\n-            .toList() ??\r\n+        ?.where((f) => f.id != null && f.name != null)\r\n+        .map((f) => DriveFile(id: f.id!, name: f.name!))\r\n+        .toList() ??\r\n         [];\r\n   }\r\n \r\n   Future<String> fetchContent(String fileId) async {\r\n@@ -116,21 +136,24 @@\n   }\r\n \r\n   Future<void> createNote(String title, String content) async {\r\n     await _ensureAuthenticated();\r\n+    await ensureFolderExists();\r\n+\r\n     final file =\r\n         drive.File()\r\n           ..name = '$title.txt'\r\n           ..mimeType = 'text/plain'\r\n           ..parents = [_folderId!];\r\n \r\n     final bytes = utf8.encode(content);\r\n-    final media = drive.Media(\r\n-      Stream.value(bytes),\r\n-      bytes.length,\r\n+    final media = drive.Media(Stream.value(bytes), bytes.length);\r\n+\r\n+    await _driveApi.files.create(\r\n+      file,\r\n+      uploadMedia: media,\r\n+      $fields: 'id',\r\n     );\r\n-\r\n-    await _driveApi.files.create(file, uploadMedia: media);\r\n   }\r\n \r\n   Future<void> updateNote({\r\n     required String fileId,\r\n@@ -143,19 +166,21 @@\n           ..name = '$newTitle.txt'\r\n           ..mimeType = 'text/plain';\r\n \r\n     final bytes = utf8.encode(newContent);\r\n-    final media = drive.Media(\r\n-      Stream.value(bytes),\r\n-      bytes.length,\r\n+    final media = drive.Media(Stream.value(bytes), bytes.length);\r\n+\r\n+    await _driveApi.files.update(\r\n+      file,\r\n+      fileId,\r\n+      uploadMedia: media,\r\n+      $fields: 'id',\r\n     );\r\n-\r\n-    await _driveApi.files.update(file, fileId, uploadMedia: media);\r\n   }\r\n }\r\n \r\n class DriveFile {\r\n-  final String? id;\r\n-  final String? name;\r\n+  final String id;\r\n+  final String name;\r\n \r\n-  DriveFile({this.id, this.name});\r\n+  DriveFile({required this.id, required this.name});\r\n }\r\n"
                },
                {
                    "date": 1744898641263,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,12 @@\n       // Token expired, refresh it\r\n       final client = http.Client();\r\n       try {\r\n         final credentials = await refreshCredentials(\r\n-          ClientId('your-client-id', null),\r\n+          ClientId(\r\n+            '93768373598-your-client-id.apps.googleusercontent.com',\r\n+            null,\r\n+          ),\r\n           AccessCredentials(\r\n             AccessToken('Bearer', accessToken, expiry),\r\n             refreshToken,\r\n             _scopes,\r\n@@ -107,11 +110,11 @@\n       orderBy: 'modifiedTime desc',\r\n     );\r\n \r\n     return response.files\r\n-        ?.where((f) => f.id != null && f.name != null)\r\n-        .map((f) => DriveFile(id: f.id!, name: f.name!))\r\n-        .toList() ??\r\n+            ?.where((f) => f.id != null && f.name != null)\r\n+            .map((f) => DriveFile(id: f.id!, name: f.name!))\r\n+            .toList() ??\r\n         [];\r\n   }\r\n \r\n   Future<String> fetchContent(String fileId) async {\r\n@@ -147,13 +150,9 @@\n \r\n     final bytes = utf8.encode(content);\r\n     final media = drive.Media(Stream.value(bytes), bytes.length);\r\n \r\n-    await _driveApi.files.create(\r\n-      file,\r\n-      uploadMedia: media,\r\n-      $fields: 'id',\r\n-    );\r\n+    await _driveApi.files.create(file, uploadMedia: media, $fields: 'id');\r\n   }\r\n \r\n   Future<void> updateNote({\r\n     required String fileId,\r\n"
                },
                {
                    "date": 1744899165483,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,25 +2,24 @@\n import 'package:googleapis/drive/v3.dart' as drive;\r\n import 'package:googleapis_auth/googleapis_auth.dart';\r\n import 'package:flutter_secure_storage/flutter_secure_storage.dart';\r\n import 'package:http/http.dart' as http;\r\n+import 'package:flutter/foundation.dart';\r\n \r\n class DriveService {\r\n   static final DriveService instance = DriveService._();\r\n   DriveService._();\r\n \r\n   static const _storage = FlutterSecureStorage();\r\n-  static const _folderName = 'DriveNotes';\r\n   static const _scopes = [drive.DriveApi.driveFileScope];\r\n-\r\n+  \r\n   late drive.DriveApi _driveApi;\r\n-  String? _folderId;\r\n \r\n   Future<void> _ensureAuthenticated() async {\r\n     final accessToken = await _storage.read(key: 'access_token');\r\n     final refreshToken = await _storage.read(key: 'refresh_token');\r\n     final expiryStr = await _storage.read(key: 'token_expiry');\r\n-\r\n+    \r\n     if (accessToken == null || refreshToken == null || expiryStr == null) {\r\n       throw Exception('Not authenticated');\r\n     }\r\n \r\n@@ -42,17 +41,14 @@\n           client,\r\n         );\r\n \r\n         // Save new tokens\r\n+        await _storage.write(key: 'access_token', value: credentials.accessToken.data);\r\n         await _storage.write(\r\n-          key: 'access_token',\r\n-          value: credentials.accessToken.data,\r\n-        );\r\n-        await _storage.write(\r\n           key: 'token_expiry',\r\n           value: credentials.accessToken.expiry.toUtc().toIso8601String(),\r\n         );\r\n-\r\n+        \r\n         _driveApi = drive.DriveApi(authenticatedClient(client, credentials));\r\n       } catch (e) {\r\n         client.close();\r\n         rethrow;\r\n@@ -63,112 +59,92 @@\n         AccessToken('Bearer', accessToken, expiry),\r\n         refreshToken,\r\n         _scopes,\r\n       );\r\n-\r\n-      _driveApi = drive.DriveApi(\r\n-        authenticatedClient(http.Client(), credentials),\r\n-      );\r\n+      \r\n+      _driveApi = drive.DriveApi(authenticatedClient(http.Client(), credentials));\r\n     }\r\n   }\r\n \r\n-  Future<void> ensureFolderExists() async {\r\n-    await _ensureAuthenticated();\r\n-    if (_folderId != null) return;\r\n-\r\n-    final query =\r\n-        \"name = '$_folderName' and mimeType = 'application/vnd.google-apps.folder' and trashed = false\";\r\n-    final response = await _driveApi.files.list(\r\n-      q: query,\r\n-      spaces: 'drive',\r\n-      $fields: 'files(id, name)',\r\n-    );\r\n-\r\n-    if (response.files?.isNotEmpty == true) {\r\n-      _folderId = response.files!.first.id;\r\n-      return;\r\n-    }\r\n-\r\n-    final folder =\r\n-        drive.File()\r\n-          ..name = _folderName\r\n-          ..mimeType = 'application/vnd.google-apps.folder';\r\n-\r\n-    final created = await _driveApi.files.create(folder);\r\n-    _folderId = created.id;\r\n-  }\r\n-\r\n   Future<List<DriveFile>> listRawFiles() async {\r\n+    debugPrint('DriveService: Fetching text files from Drive...');\r\n     await _ensureAuthenticated();\r\n-    await ensureFolderExists();\r\n \r\n-    final query =\r\n-        \"'$_folderId' in parents and mimeType = 'text/plain' and trashed = false\";\r\n+    // Query to find all text files in Drive\r\n+    final query = \"mimeType = 'text/plain' and trashed = false\";\r\n     final response = await _driveApi.files.list(\r\n       q: query,\r\n       spaces: 'drive',\r\n       $fields: 'files(id, name, modifiedTime)',\r\n       orderBy: 'modifiedTime desc',\r\n     );\r\n-\r\n+    \r\n+    debugPrint('DriveService: Found ${response.files?.length ?? 0} text files');\r\n     return response.files\r\n-            ?.where((f) => f.id != null && f.name != null)\r\n-            .map((f) => DriveFile(id: f.id!, name: f.name!))\r\n-            .toList() ??\r\n-        [];\r\n+        ?.where((f) => f.id != null && f.name != null)\r\n+        .map((f) => DriveFile(id: f.id!, name: f.name!))\r\n+        .toList() ?? [];\r\n   }\r\n \r\n   Future<String> fetchContent(String fileId) async {\r\n+    debugPrint('DriveService: Fetching content for file $fileId');\r\n     await _ensureAuthenticated();\r\n-    final media =\r\n-        await _driveApi.files.get(\r\n-              fileId,\r\n-              downloadOptions: drive.DownloadOptions.fullMedia,\r\n-            )\r\n-            as drive.Media;\r\n-\r\n+    final media = await _driveApi.files.get(\r\n+      fileId,\r\n+      downloadOptions: drive.DownloadOptions.fullMedia,\r\n+    ) as drive.Media;\r\n+    \r\n     final bytes = await media.stream.fold<List<int>>(\r\n       [],\r\n       (previous, element) => previous..addAll(element),\r\n     );\r\n     return utf8.decode(bytes);\r\n   }\r\n \r\n   Future<void> deleteNote(String fileId) async {\r\n+    debugPrint('DriveService: Deleting file $fileId');\r\n     await _ensureAuthenticated();\r\n     await _driveApi.files.delete(fileId);\r\n   }\r\n \r\n   Future<void> createNote(String title, String content) async {\r\n+    debugPrint('DriveService: Creating new note: $title');\r\n     await _ensureAuthenticated();\r\n-    await ensureFolderExists();\r\n-\r\n-    final file =\r\n-        drive.File()\r\n-          ..name = '$title.txt'\r\n-          ..mimeType = 'text/plain'\r\n-          ..parents = [_folderId!];\r\n-\r\n+    \r\n+    final file = drive.File()\r\n+      ..name = '$title.txt'\r\n+      ..mimeType = 'text/plain';\r\n+    \r\n     final bytes = utf8.encode(content);\r\n-    final media = drive.Media(Stream.value(bytes), bytes.length);\r\n-\r\n-    await _driveApi.files.create(file, uploadMedia: media, $fields: 'id');\r\n+    final media = drive.Media(\r\n+      Stream.value(bytes),\r\n+      bytes.length,\r\n+    );\r\n+    \r\n+    await _driveApi.files.create(\r\n+      file,\r\n+      uploadMedia: media,\r\n+      $fields: 'id',\r\n+    );\r\n   }\r\n \r\n   Future<void> updateNote({\r\n     required String fileId,\r\n     required String newTitle,\r\n     required String newContent,\r\n   }) async {\r\n+    debugPrint('DriveService: Updating note $fileId to $newTitle');\r\n     await _ensureAuthenticated();\r\n-    final file =\r\n-        drive.File()\r\n-          ..name = '$newTitle.txt'\r\n-          ..mimeType = 'text/plain';\r\n-\r\n+    final file = drive.File()\r\n+      ..name = '$newTitle.txt'\r\n+      ..mimeType = 'text/plain';\r\n+    \r\n     final bytes = utf8.encode(newContent);\r\n-    final media = drive.Media(Stream.value(bytes), bytes.length);\r\n-\r\n+    final media = drive.Media(\r\n+      Stream.value(bytes),\r\n+      bytes.length,\r\n+    );\r\n+    \r\n     await _driveApi.files.update(\r\n       file,\r\n       fileId,\r\n       uploadMedia: media,\r\n"
                },
                {
                    "date": 1744899468830,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,16 +10,16 @@\n   DriveService._();\r\n \r\n   static const _storage = FlutterSecureStorage();\r\n   static const _scopes = [drive.DriveApi.driveFileScope];\r\n-  \r\n+\r\n   late drive.DriveApi _driveApi;\r\n \r\n   Future<void> _ensureAuthenticated() async {\r\n     final accessToken = await _storage.read(key: 'access_token');\r\n     final refreshToken = await _storage.read(key: 'refresh_token');\r\n     final expiryStr = await _storage.read(key: 'token_expiry');\r\n-    \r\n+\r\n     if (accessToken == null || refreshToken == null || expiryStr == null) {\r\n       throw Exception('Not authenticated');\r\n     }\r\n \r\n@@ -41,14 +41,17 @@\n           client,\r\n         );\r\n \r\n         // Save new tokens\r\n-        await _storage.write(key: 'access_token', value: credentials.accessToken.data);\r\n         await _storage.write(\r\n+          key: 'access_token',\r\n+          value: credentials.accessToken.data,\r\n+        );\r\n+        await _storage.write(\r\n           key: 'token_expiry',\r\n           value: credentials.accessToken.expiry.toUtc().toIso8601String(),\r\n         );\r\n-        \r\n+\r\n         _driveApi = drive.DriveApi(authenticatedClient(client, credentials));\r\n       } catch (e) {\r\n         client.close();\r\n         rethrow;\r\n@@ -59,26 +62,34 @@\n         AccessToken('Bearer', accessToken, expiry),\r\n         refreshToken,\r\n         _scopes,\r\n       );\r\n-      \r\n-      _driveApi = drive.DriveApi(authenticatedClient(http.Client(), credentials));\r\n+\r\n+      _driveApi = drive.DriveApi(\r\n+        authenticatedClient(http.Client(), credentials),\r\n+      );\r\n     }\r\n   }\r\n \r\n   Future<List<DriveFile>> listRawFiles() async {\r\n     debugPrint('DriveService: Fetching text files from Drive...');\r\n     await _ensureAuthenticated();\r\n \r\n-    // Query to find all text files in Drive\r\n+    // Query to find all text files in Drive, including those in folders\r\n     final query = \"mimeType = 'text/plain' and trashed = false\";\r\n     final response = await _driveApi.files.list(\r\n       q: query,\r\n       spaces: 'drive',\r\n-      $fields: 'files(id, name, modifiedTime)',\r\n+      $fields: 'files(id, name, modifiedTime, parents)',\r\n       orderBy: 'modifiedTime desc',\r\n+      // Include files from all folders\r\n+      supportsAllDrives: true,\r\n+      includeItemsFromAllDrives: true,\r\n+      // Get all files, not just root files\r\n+      corpora: 'user',\r\n+      pageSize: 1000,\r\n     );\r\n-    \r\n+\r\n     debugPrint('DriveService: Found ${response.files?.length ?? 0} text files');\r\n     return response.files\r\n         ?.where((f) => f.id != null && f.name != null)\r\n         .map((f) => DriveFile(id: f.id!, name: f.name!))\r\n@@ -87,13 +98,15 @@\n \r\n   Future<String> fetchContent(String fileId) async {\r\n     debugPrint('DriveService: Fetching content for file $fileId');\r\n     await _ensureAuthenticated();\r\n-    final media = await _driveApi.files.get(\r\n-      fileId,\r\n-      downloadOptions: drive.DownloadOptions.fullMedia,\r\n-    ) as drive.Media;\r\n-    \r\n+    final media =\r\n+        await _driveApi.files.get(\r\n+              fileId,\r\n+              downloadOptions: drive.DownloadOptions.fullMedia,\r\n+            )\r\n+            as drive.Media;\r\n+\r\n     final bytes = await media.stream.fold<List<int>>(\r\n       [],\r\n       (previous, element) => previous..addAll(element),\r\n     );\r\n@@ -108,24 +121,18 @@\n \r\n   Future<void> createNote(String title, String content) async {\r\n     debugPrint('DriveService: Creating new note: $title');\r\n     await _ensureAuthenticated();\r\n-    \r\n-    final file = drive.File()\r\n-      ..name = '$title.txt'\r\n-      ..mimeType = 'text/plain';\r\n-    \r\n+\r\n+    final file =\r\n+        drive.File()\r\n+          ..name = '$title.txt'\r\n+          ..mimeType = 'text/plain';\r\n+\r\n     final bytes = utf8.encode(content);\r\n-    final media = drive.Media(\r\n-      Stream.value(bytes),\r\n-      bytes.length,\r\n-    );\r\n-    \r\n-    await _driveApi.files.create(\r\n-      file,\r\n-      uploadMedia: media,\r\n-      $fields: 'id',\r\n-    );\r\n+    final media = drive.Media(Stream.value(bytes), bytes.length);\r\n+\r\n+    await _driveApi.files.create(file, uploadMedia: media, $fields: 'id');\r\n   }\r\n \r\n   Future<void> updateNote({\r\n     required String fileId,\r\n@@ -133,18 +140,16 @@\n     required String newContent,\r\n   }) async {\r\n     debugPrint('DriveService: Updating note $fileId to $newTitle');\r\n     await _ensureAuthenticated();\r\n-    final file = drive.File()\r\n-      ..name = '$newTitle.txt'\r\n-      ..mimeType = 'text/plain';\r\n-    \r\n+    final file =\r\n+        drive.File()\r\n+          ..name = '$newTitle.txt'\r\n+          ..mimeType = 'text/plain';\r\n+\r\n     final bytes = utf8.encode(newContent);\r\n-    final media = drive.Media(\r\n-      Stream.value(bytes),\r\n-      bytes.length,\r\n-    );\r\n-    \r\n+    final media = drive.Media(Stream.value(bytes), bytes.length);\r\n+\r\n     await _driveApi.files.update(\r\n       file,\r\n       fileId,\r\n       uploadMedia: media,\r\n"
                },
                {
                    "date": 1744899544540,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,13 +74,22 @@\n     debugPrint('DriveService: Fetching text files from Drive...');\r\n     await _ensureAuthenticated();\r\n \r\n     // Query to find all text files in Drive, including those in folders\r\n-    final query = \"mimeType = 'text/plain' and trashed = false\";\r\n+    final query = \"\"\"\r\n+      (mimeType = 'text/plain' or \r\n+       mimeType = 'application/octet-stream' or \r\n+       mimeType = 'text/x-txt' or \r\n+       fileExtension = 'txt') \r\n+      and trashed = false\r\n+    \"\"\".replaceAll('\\n', ' ');\r\n+    \r\n+    debugPrint('DriveService: Using query: $query');\r\n+    \r\n     final response = await _driveApi.files.list(\r\n       q: query,\r\n       spaces: 'drive',\r\n-      $fields: 'files(id, name, modifiedTime, parents)',\r\n+      $fields: 'files(id, name, modifiedTime, parents, mimeType)',\r\n       orderBy: 'modifiedTime desc',\r\n       // Include files from all folders\r\n       supportsAllDrives: true,\r\n       includeItemsFromAllDrives: true,\r\n@@ -89,8 +98,14 @@\n       pageSize: 1000,\r\n     );\r\n \r\n     debugPrint('DriveService: Found ${response.files?.length ?? 0} text files');\r\n+    if (response.files?.isNotEmpty == true) {\r\n+      for (var file in response.files!) {\r\n+        debugPrint('DriveService: Found file: ${file.name} (${file.mimeType})');\r\n+      }\r\n+    }\r\n+    \r\n     return response.files\r\n         ?.where((f) => f.id != null && f.name != null)\r\n         .map((f) => DriveFile(id: f.id!, name: f.name!))\r\n         .toList() ?? [];\r\n"
                },
                {
                    "date": 1744899761322,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,23 +9,29 @@\n   static final DriveService instance = DriveService._();\r\n   DriveService._();\r\n \r\n   static const _storage = FlutterSecureStorage();\r\n-  static const _scopes = [drive.DriveApi.driveFileScope];\r\n+  static const _scopes = [\r\n+    drive.DriveApi.driveFileScope,\r\n+    drive.DriveApi.driveReadonlyScope\r\n+  ];\r\n \r\n   late drive.DriveApi _driveApi;\r\n \r\n   Future<void> _ensureAuthenticated() async {\r\n+    debugPrint('DriveService: Ensuring authentication...');\r\n     final accessToken = await _storage.read(key: 'access_token');\r\n     final refreshToken = await _storage.read(key: 'refresh_token');\r\n     final expiryStr = await _storage.read(key: 'token_expiry');\r\n \r\n     if (accessToken == null || refreshToken == null || expiryStr == null) {\r\n+      debugPrint('DriveService: Missing authentication tokens');\r\n       throw Exception('Not authenticated');\r\n     }\r\n \r\n     final expiry = DateTime.parse(expiryStr).toUtc();\r\n     if (expiry.isBefore(DateTime.now().toUtc())) {\r\n+      debugPrint('DriveService: Token expired, refreshing...');\r\n       // Token expired, refresh it\r\n       final client = http.Client();\r\n       try {\r\n         final credentials = await refreshCredentials(\r\n@@ -41,33 +47,31 @@\n           client,\r\n         );\r\n \r\n         // Save new tokens\r\n+        await _storage.write(key: 'access_token', value: credentials.accessToken.data);\r\n         await _storage.write(\r\n-          key: 'access_token',\r\n-          value: credentials.accessToken.data,\r\n-        );\r\n-        await _storage.write(\r\n           key: 'token_expiry',\r\n           value: credentials.accessToken.expiry.toUtc().toIso8601String(),\r\n         );\r\n \r\n         _driveApi = drive.DriveApi(authenticatedClient(client, credentials));\r\n+        debugPrint('DriveService: Successfully refreshed token');\r\n       } catch (e) {\r\n+        debugPrint('DriveService: Error refreshing token - $e');\r\n         client.close();\r\n         rethrow;\r\n       }\r\n     } else {\r\n+      debugPrint('DriveService: Using existing valid token');\r\n       // Token still valid\r\n       final credentials = AccessCredentials(\r\n         AccessToken('Bearer', accessToken, expiry),\r\n         refreshToken,\r\n         _scopes,\r\n       );\r\n \r\n-      _driveApi = drive.DriveApi(\r\n-        authenticatedClient(http.Client(), credentials),\r\n-      );\r\n+      _driveApi = drive.DriveApi(authenticatedClient(http.Client(), credentials));\r\n     }\r\n   }\r\n \r\n   Future<List<DriveFile>> listRawFiles() async {\r\n@@ -81,35 +85,40 @@\n        mimeType = 'text/x-txt' or \r\n        fileExtension = 'txt') \r\n       and trashed = false\r\n     \"\"\".replaceAll('\\n', ' ');\r\n-    \r\n+\r\n     debugPrint('DriveService: Using query: $query');\r\n-    \r\n-    final response = await _driveApi.files.list(\r\n-      q: query,\r\n-      spaces: 'drive',\r\n-      $fields: 'files(id, name, modifiedTime, parents, mimeType)',\r\n-      orderBy: 'modifiedTime desc',\r\n-      // Include files from all folders\r\n-      supportsAllDrives: true,\r\n-      includeItemsFromAllDrives: true,\r\n-      // Get all files, not just root files\r\n-      corpora: 'user',\r\n-      pageSize: 1000,\r\n-    );\r\n \r\n-    debugPrint('DriveService: Found ${response.files?.length ?? 0} text files');\r\n-    if (response.files?.isNotEmpty == true) {\r\n-      for (var file in response.files!) {\r\n-        debugPrint('DriveService: Found file: ${file.name} (${file.mimeType})');\r\n+    try {\r\n+      final response = await _driveApi.files.list(\r\n+        q: query,\r\n+        spaces: 'drive',\r\n+        $fields: 'files(id, name, modifiedTime, parents, mimeType)',\r\n+        orderBy: 'modifiedTime desc',\r\n+        // Include files from all folders\r\n+        supportsAllDrives: true,\r\n+        includeItemsFromAllDrives: true,\r\n+        // Get all files, not just root files\r\n+        corpora: 'user',\r\n+        pageSize: 1000,\r\n+      );\r\n+\r\n+      debugPrint('DriveService: Found ${response.files?.length ?? 0} text files');\r\n+      if (response.files?.isNotEmpty == true) {\r\n+        for (var file in response.files!) {\r\n+          debugPrint('DriveService: Found file: ${file.name} (${file.mimeType}) - ID: ${file.id}');\r\n+        }\r\n       }\r\n+\r\n+      return response.files\r\n+          ?.where((f) => f.id != null && f.name != null)\r\n+          .map((f) => DriveFile(id: f.id!, name: f.name!))\r\n+          .toList() ?? [];\r\n+    } catch (e) {\r\n+      debugPrint('DriveService: Error listing files - $e');\r\n+      rethrow;\r\n     }\r\n-    \r\n-    return response.files\r\n-        ?.where((f) => f.id != null && f.name != null)\r\n-        .map((f) => DriveFile(id: f.id!, name: f.name!))\r\n-        .toList() ?? [];\r\n   }\r\n \r\n   Future<String> fetchContent(String fileId) async {\r\n     debugPrint('DriveService: Fetching content for file $fileId');\r\n"
                },
                {
                    "date": 1744899899655,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n \r\n   static const _storage = FlutterSecureStorage();\r\n   static const _scopes = [\r\n     drive.DriveApi.driveFileScope,\r\n-    drive.DriveApi.driveReadonlyScope\r\n+    drive.DriveApi.driveReadonlyScope,\r\n   ];\r\n \r\n   late drive.DriveApi _driveApi;\r\n \r\n@@ -47,10 +47,13 @@\n           client,\r\n         );\r\n \r\n         // Save new tokens\r\n-        await _storage.write(key: 'access_token', value: credentials.accessToken.data);\r\n         await _storage.write(\r\n+          key: 'access_token',\r\n+          value: credentials.accessToken.data,\r\n+        );\r\n+        await _storage.write(\r\n           key: 'token_expiry',\r\n           value: credentials.accessToken.expiry.toUtc().toIso8601String(),\r\n         );\r\n \r\n@@ -69,9 +72,11 @@\n         refreshToken,\r\n         _scopes,\r\n       );\r\n \r\n-      _driveApi = drive.DriveApi(authenticatedClient(http.Client(), credentials));\r\n+      _driveApi = drive.DriveApi(\r\n+        authenticatedClient(http.Client(), credentials),\r\n+      );\r\n     }\r\n   }\r\n \r\n   Future<List<DriveFile>> listRawFiles() async {\r\n@@ -102,19 +107,24 @@\n         corpora: 'user',\r\n         pageSize: 1000,\r\n       );\r\n \r\n-      debugPrint('DriveService: Found ${response.files?.length ?? 0} text files');\r\n+      debugPrint(\r\n+        'DriveService: Found ${response.files?.length ?? 0} text files',\r\n+      );\r\n       if (response.files?.isNotEmpty == true) {\r\n         for (var file in response.files!) {\r\n-          debugPrint('DriveService: Found file: ${file.name} (${file.mimeType}) - ID: ${file.id}');\r\n+          debugPrint(\r\n+            'DriveService: Found file: ${file.name} (${file.mimeType}) - ID: ${file.id}',\r\n+          );\r\n         }\r\n       }\r\n \r\n       return response.files\r\n-          ?.where((f) => f.id != null && f.name != null)\r\n-          .map((f) => DriveFile(id: f.id!, name: f.name!))\r\n-          .toList() ?? [];\r\n+              ?.where((f) => f.id != null && f.name != null)\r\n+              .map((f) => DriveFile(id: f.id!, name: f.name!))\r\n+              .toList() ??\r\n+          [];\r\n     } catch (e) {\r\n       debugPrint('DriveService: Error listing files - $e');\r\n       rethrow;\r\n     }\r\n"
                },
                {
                    "date": 1744900343692,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -79,52 +79,36 @@\n     }\r\n   }\r\n \r\n   Future<List<DriveFile>> listRawFiles() async {\r\n-    debugPrint('DriveService: Fetching text files from Drive...');\r\n+    debugPrint('DriveService: Fetching .txt files from Drive...');\r\n     await _ensureAuthenticated();\r\n \r\n-    // Query to find all text files in Drive, including those in folders\r\n-    final query = \"\"\"\r\n-      (mimeType = 'text/plain' or \r\n-       mimeType = 'application/octet-stream' or \r\n-       mimeType = 'text/x-txt' or \r\n-       fileExtension = 'txt') \r\n-      and trashed = false\r\n-    \"\"\".replaceAll('\\n', ' ');\r\n-\r\n+    // Simple query to find only .txt files\r\n+    final query = \"fileExtension = 'txt' and trashed = false\";\r\n+    \r\n     debugPrint('DriveService: Using query: $query');\r\n \r\n     try {\r\n       final response = await _driveApi.files.list(\r\n         q: query,\r\n         spaces: 'drive',\r\n-        $fields: 'files(id, name, modifiedTime, parents, mimeType)',\r\n+        $fields: 'files(id, name)',\r\n         orderBy: 'modifiedTime desc',\r\n-        // Include files from all folders\r\n-        supportsAllDrives: true,\r\n-        includeItemsFromAllDrives: true,\r\n-        // Get all files, not just root files\r\n-        corpora: 'user',\r\n         pageSize: 1000,\r\n       );\r\n \r\n-      debugPrint(\r\n-        'DriveService: Found ${response.files?.length ?? 0} text files',\r\n-      );\r\n+      debugPrint('DriveService: Found ${response.files?.length ?? 0} .txt files');\r\n       if (response.files?.isNotEmpty == true) {\r\n         for (var file in response.files!) {\r\n-          debugPrint(\r\n-            'DriveService: Found file: ${file.name} (${file.mimeType}) - ID: ${file.id}',\r\n-          );\r\n+          debugPrint('DriveService: Found file: ${file.name} - ID: ${file.id}');\r\n         }\r\n       }\r\n \r\n       return response.files\r\n-              ?.where((f) => f.id != null && f.name != null)\r\n-              .map((f) => DriveFile(id: f.id!, name: f.name!))\r\n-              .toList() ??\r\n-          [];\r\n+          ?.where((f) => f.id != null && f.name != null)\r\n+          .map((f) => DriveFile(id: f.id!, name: f.name!))\r\n+          .toList() ?? [];\r\n     } catch (e) {\r\n       debugPrint('DriveService: Error listing files - $e');\r\n       rethrow;\r\n     }\r\n"
                },
                {
                    "date": 1744912019445,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,9 +84,9 @@\n     await _ensureAuthenticated();\r\n \r\n     // Simple query to find only .txt files\r\n     final query = \"fileExtension = 'txt' and trashed = false\";\r\n-    \r\n+\r\n     debugPrint('DriveService: Using query: $query');\r\n \r\n     try {\r\n       final response = await _driveApi.files.list(\r\n@@ -96,19 +96,22 @@\n         orderBy: 'modifiedTime desc',\r\n         pageSize: 1000,\r\n       );\r\n \r\n-      debugPrint('DriveService: Found ${response.files?.length ?? 0} .txt files');\r\n+      debugPrint(\r\n+        'DriveService: Found ${response.files?.length ?? 0} .txt files',\r\n+      );\r\n       if (response.files?.isNotEmpty == true) {\r\n         for (var file in response.files!) {\r\n           debugPrint('DriveService: Found file: ${file.name} - ID: ${file.id}');\r\n         }\r\n       }\r\n \r\n       return response.files\r\n-          ?.where((f) => f.id != null && f.name != null)\r\n-          .map((f) => DriveFile(id: f.id!, name: f.name!))\r\n-          .toList() ?? [];\r\n+              ?.where((f) => f.id != null && f.name != null)\r\n+              .map((f) => DriveFile(id: f.id!, name: f.name!))\r\n+              .toList() ??\r\n+          [];\r\n     } catch (e) {\r\n       debugPrint('DriveService: Error listing files - $e');\r\n       rethrow;\r\n     }\r\n@@ -140,17 +143,27 @@\n   Future<void> createNote(String title, String content) async {\r\n     debugPrint('DriveService: Creating new note: $title');\r\n     await _ensureAuthenticated();\r\n \r\n-    final file =\r\n-        drive.File()\r\n-          ..name = '$title.txt'\r\n-          ..mimeType = 'text/plain';\r\n+    try {\r\n+      final file = drive.File()\r\n+        ..name = title.endsWith('.txt') ? title : '$title.txt'\r\n+        ..mimeType = 'text/plain';\r\n \r\n-    final bytes = utf8.encode(content);\r\n-    final media = drive.Media(Stream.value(bytes), bytes.length);\r\n+      final bytes = utf8.encode(content);\r\n+      final media = drive.Media(Stream.value(bytes), bytes.length);\r\n \r\n-    await _driveApi.files.create(file, uploadMedia: media, $fields: 'id');\r\n+      final result = await _driveApi.files.create(\r\n+        file,\r\n+        uploadMedia: media,\r\n+        $fields: 'id,name',\r\n+      );\r\n+\r\n+      debugPrint('DriveService: Successfully created note with ID: ${result.id}');\r\n+    } catch (e) {\r\n+      debugPrint('DriveService: Error creating note - $e');\r\n+      throw Exception('Failed to create note: $e');\r\n+    }\r\n   }\r\n \r\n   Future<void> updateNote({\r\n     required String fileId,\r\n@@ -158,22 +171,29 @@\n     required String newContent,\r\n   }) async {\r\n     debugPrint('DriveService: Updating note $fileId to $newTitle');\r\n     await _ensureAuthenticated();\r\n-    final file =\r\n-        drive.File()\r\n-          ..name = '$newTitle.txt'\r\n-          ..mimeType = 'text/plain';\r\n \r\n-    final bytes = utf8.encode(newContent);\r\n-    final media = drive.Media(Stream.value(bytes), bytes.length);\r\n+    try {\r\n+      final file = drive.File()\r\n+        ..name = newTitle.endsWith('.txt') ? newTitle : '$newTitle.txt'\r\n+        ..mimeType = 'text/plain';\r\n \r\n-    await _driveApi.files.update(\r\n-      file,\r\n-      fileId,\r\n-      uploadMedia: media,\r\n-      $fields: 'id',\r\n-    );\r\n+      final bytes = utf8.encode(newContent);\r\n+      final media = drive.Media(Stream.value(bytes), bytes.length);\r\n+\r\n+      final result = await _driveApi.files.update(\r\n+        file,\r\n+        fileId,\r\n+        uploadMedia: media,\r\n+        $fields: 'id,name',\r\n+      );\r\n+\r\n+      debugPrint('DriveService: Successfully updated note with ID: ${result.id}');\r\n+    } catch (e) {\r\n+      debugPrint('DriveService: Error updating note - $e');\r\n+      throw Exception('Failed to update note: $e');\r\n+    }\r\n   }\r\n }\r\n \r\n class DriveFile {\r\n"
                },
                {
                    "date": 1744912612886,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -144,11 +144,12 @@\n     debugPrint('DriveService: Creating new note: $title');\r\n     await _ensureAuthenticated();\r\n \r\n     try {\r\n-      final file = drive.File()\r\n-        ..name = title.endsWith('.txt') ? title : '$title.txt'\r\n-        ..mimeType = 'text/plain';\r\n+      final file =\r\n+          drive.File()\r\n+            ..name = title.endsWith('.txt') ? title : '$title.txt'\r\n+            ..mimeType = 'text/plain';\r\n \r\n       final bytes = utf8.encode(content);\r\n       final media = drive.Media(Stream.value(bytes), bytes.length);\r\n \r\n@@ -157,9 +158,11 @@\n         uploadMedia: media,\r\n         $fields: 'id,name',\r\n       );\r\n \r\n-      debugPrint('DriveService: Successfully created note with ID: ${result.id}');\r\n+      debugPrint(\r\n+        'DriveService: Successfully created note with ID: ${result.id}',\r\n+      );\r\n     } catch (e) {\r\n       debugPrint('DriveService: Error creating note - $e');\r\n       throw Exception('Failed to create note: $e');\r\n     }\r\n@@ -173,15 +176,16 @@\n     debugPrint('DriveService: Updating note $fileId to $newTitle');\r\n     await _ensureAuthenticated();\r\n \r\n     try {\r\n-      final file = drive.File()\r\n-        ..name = newTitle.endsWith('.txt') ? newTitle : '$newTitle.txt'\r\n-        ..mimeType = 'text/plain';\r\n-\r\n+      // First, update the content\r\n       final bytes = utf8.encode(newContent);\r\n       final media = drive.Media(Stream.value(bytes), bytes.length);\r\n \r\n+      // Then update the metadata (including title)\r\n+      final file = drive.File()\r\n+        ..name = newTitle.endsWith('.txt') ? newTitle : '$newTitle.txt';\r\n+\r\n       final result = await _driveApi.files.update(\r\n         file,\r\n         fileId,\r\n         uploadMedia: media,\r\n"
                },
                {
                    "date": 1744913029243,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,10 +13,12 @@\n   static const _scopes = [\r\n     drive.DriveApi.driveFileScope,\r\n     drive.DriveApi.driveReadonlyScope,\r\n   ];\r\n+  static const _folderName = 'DriveNotes';\r\n \r\n   late drive.DriveApi _driveApi;\r\n+  String? _folderId;\r\n \r\n   Future<void> _ensureAuthenticated() async {\r\n     debugPrint('DriveService: Ensuring authentication...');\r\n     final accessToken = await _storage.read(key: 'access_token');\r\n@@ -78,15 +80,52 @@\n       );\r\n     }\r\n   }\r\n \r\n+  Future<String> _ensureFolder() async {\r\n+    if (_folderId != null) return _folderId!;\r\n+\r\n+    debugPrint('DriveService: Looking for DriveNotes folder...');\r\n+    \r\n+    // Try to find existing folder\r\n+    final query = \"name = '$_folderName' and mimeType = 'application/vnd.google-apps.folder' and trashed = false\";\r\n+    final response = await _driveApi.files.list(\r\n+      q: query,\r\n+      spaces: 'drive',\r\n+      $fields: 'files(id, name)',\r\n+    );\r\n+\r\n+    if (response.files?.isNotEmpty == true) {\r\n+      _folderId = response.files!.first.id;\r\n+      debugPrint('DriveService: Found existing folder: $_folderId');\r\n+      return _folderId!;\r\n+    }\r\n+\r\n+    // Create new folder\r\n+    debugPrint('DriveService: Creating new DriveNotes folder...');\r\n+    final folder = drive.File()\r\n+      ..name = _folderName\r\n+      ..mimeType = 'application/vnd.google-apps.folder';\r\n+\r\n+    final created = await _driveApi.files.create(folder);\r\n+    _folderId = created.id!;\r\n+    debugPrint('DriveService: Created new folder: $_folderId');\r\n+    return _folderId!;\r\n+  }\r\n+\r\n+  Future<String?> getFolderId() async {\r\n+    await _ensureAuthenticated();\r\n+    return _ensureFolder();\r\n+  }\r\n+\r\n   Future<List<DriveFile>> listRawFiles() async {\r\n     debugPrint('DriveService: Fetching .txt files from Drive...');\r\n     await _ensureAuthenticated();\r\n+    final folderId = await _ensureFolder();\r\n \r\n-    // Simple query to find only .txt files\r\n-    final query = \"fileExtension = 'txt' and trashed = false\";\r\n-\r\n+    // Simple query to find only .txt files in our folder\r\n+    final query = \"fileExtension = 'txt' and '${folderId}' in parents and trashed = false\";\r\n+    \r\n     debugPrint('DriveService: Using query: $query');\r\n \r\n     try {\r\n       final response = await _driveApi.files.list(\r\n@@ -96,22 +135,19 @@\n         orderBy: 'modifiedTime desc',\r\n         pageSize: 1000,\r\n       );\r\n \r\n-      debugPrint(\r\n-        'DriveService: Found ${response.files?.length ?? 0} .txt files',\r\n-      );\r\n+      debugPrint('DriveService: Found ${response.files?.length ?? 0} .txt files');\r\n       if (response.files?.isNotEmpty == true) {\r\n         for (var file in response.files!) {\r\n           debugPrint('DriveService: Found file: ${file.name} - ID: ${file.id}');\r\n         }\r\n       }\r\n \r\n       return response.files\r\n-              ?.where((f) => f.id != null && f.name != null)\r\n-              .map((f) => DriveFile(id: f.id!, name: f.name!))\r\n-              .toList() ??\r\n-          [];\r\n+          ?.where((f) => f.id != null && f.name != null)\r\n+          .map((f) => DriveFile(id: f.id!, name: f.name!))\r\n+          .toList() ?? [];\r\n     } catch (e) {\r\n       debugPrint('DriveService: Error listing files - $e');\r\n       rethrow;\r\n     }\r\n@@ -142,14 +178,15 @@\n \r\n   Future<void> createNote(String title, String content) async {\r\n     debugPrint('DriveService: Creating new note: $title');\r\n     await _ensureAuthenticated();\r\n+    final folderId = await _ensureFolder();\r\n \r\n     try {\r\n-      final file =\r\n-          drive.File()\r\n-            ..name = title.endsWith('.txt') ? title : '$title.txt'\r\n-            ..mimeType = 'text/plain';\r\n+      final file = drive.File()\r\n+        ..name = title.endsWith('.txt') ? title : '$title.txt'\r\n+        ..mimeType = 'text/plain'\r\n+        ..parents = [folderId];\r\n \r\n       final bytes = utf8.encode(content);\r\n       final media = drive.Media(Stream.value(bytes), bytes.length);\r\n \r\n@@ -158,11 +195,9 @@\n         uploadMedia: media,\r\n         $fields: 'id,name',\r\n       );\r\n \r\n-      debugPrint(\r\n-        'DriveService: Successfully created note with ID: ${result.id}',\r\n-      );\r\n+      debugPrint('DriveService: Successfully created note with ID: ${result.id}');\r\n     } catch (e) {\r\n       debugPrint('DriveService: Error creating note - $e');\r\n       throw Exception('Failed to create note: $e');\r\n     }\r\n@@ -181,19 +216,22 @@\n       final bytes = utf8.encode(newContent);\r\n       final media = drive.Media(Stream.value(bytes), bytes.length);\r\n \r\n       // Then update the metadata (including title)\r\n-      final file = drive.File()\r\n-        ..name = newTitle.endsWith('.txt') ? newTitle : '$newTitle.txt';\r\n+      final file =\r\n+          drive.File()\r\n+            ..name = newTitle.endsWith('.txt') ? newTitle : '$newTitle.txt';\r\n \r\n       final result = await _driveApi.files.update(\r\n         file,\r\n         fileId,\r\n         uploadMedia: media,\r\n         $fields: 'id,name',\r\n       );\r\n \r\n-      debugPrint('DriveService: Successfully updated note with ID: ${result.id}');\r\n+      debugPrint(\r\n+        'DriveService: Successfully updated note with ID: ${result.id}',\r\n+      );\r\n     } catch (e) {\r\n       debugPrint('DriveService: Error updating note - $e');\r\n       throw Exception('Failed to update note: $e');\r\n     }\r\n"
                },
                {
                    "date": 1744913100903,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,246 +1,211 @@\n-import 'dart:convert';\r\n-import 'package:googleapis/drive/v3.dart' as drive;\r\n-import 'package:googleapis_auth/googleapis_auth.dart';\r\n-import 'package:flutter_secure_storage/flutter_secure_storage.dart';\r\n-import 'package:http/http.dart' as http;\r\n-import 'package:flutter/foundation.dart';\r\n-\r\n-class DriveService {\r\n-  static final DriveService instance = DriveService._();\r\n-  DriveService._();\r\n-\r\n-  static const _storage = FlutterSecureStorage();\r\n-  static const _scopes = [\r\n-    drive.DriveApi.driveFileScope,\r\n-    drive.DriveApi.driveReadonlyScope,\r\n-  ];\r\n-  static const _folderName = 'DriveNotes';\r\n-\r\n-  late drive.DriveApi _driveApi;\r\n-  String? _folderId;\r\n-\r\n-  Future<void> _ensureAuthenticated() async {\r\n-    debugPrint('DriveService: Ensuring authentication...');\r\n-    final accessToken = await _storage.read(key: 'access_token');\r\n-    final refreshToken = await _storage.read(key: 'refresh_token');\r\n-    final expiryStr = await _storage.read(key: 'token_expiry');\r\n-\r\n-    if (accessToken == null || refreshToken == null || expiryStr == null) {\r\n-      debugPrint('DriveService: Missing authentication tokens');\r\n-      throw Exception('Not authenticated');\r\n-    }\r\n-\r\n-    final expiry = DateTime.parse(expiryStr).toUtc();\r\n-    if (expiry.isBefore(DateTime.now().toUtc())) {\r\n-      debugPrint('DriveService: Token expired, refreshing...');\r\n-      // Token expired, refresh it\r\n-      final client = http.Client();\r\n-      try {\r\n-        final credentials = await refreshCredentials(\r\n-          ClientId(\r\n-            '93768373598-your-client-id.apps.googleusercontent.com',\r\n-            null,\r\n-          ),\r\n-          AccessCredentials(\r\n-            AccessToken('Bearer', accessToken, expiry),\r\n-            refreshToken,\r\n-            _scopes,\r\n-          ),\r\n-          client,\r\n-        );\r\n-\r\n-        // Save new tokens\r\n-        await _storage.write(\r\n-          key: 'access_token',\r\n-          value: credentials.accessToken.data,\r\n-        );\r\n-        await _storage.write(\r\n-          key: 'token_expiry',\r\n-          value: credentials.accessToken.expiry.toUtc().toIso8601String(),\r\n-        );\r\n-\r\n-        _driveApi = drive.DriveApi(authenticatedClient(client, credentials));\r\n-        debugPrint('DriveService: Successfully refreshed token');\r\n-      } catch (e) {\r\n-        debugPrint('DriveService: Error refreshing token - $e');\r\n-        client.close();\r\n-        rethrow;\r\n-      }\r\n-    } else {\r\n-      debugPrint('DriveService: Using existing valid token');\r\n-      // Token still valid\r\n-      final credentials = AccessCredentials(\r\n-        AccessToken('Bearer', accessToken, expiry),\r\n-        refreshToken,\r\n-        _scopes,\r\n-      );\r\n-\r\n-      _driveApi = drive.DriveApi(\r\n-        authenticatedClient(http.Client(), credentials),\r\n-      );\r\n-    }\r\n-  }\r\n-\r\n-  Future<String> _ensureFolder() async {\r\n-    if (_folderId != null) return _folderId!;\r\n-\r\n-    debugPrint('DriveService: Looking for DriveNotes folder...');\r\n-    \r\n-    // Try to find existing folder\r\n-    final query = \"name = '$_folderName' and mimeType = 'application/vnd.google-apps.folder' and trashed = false\";\r\n-    final response = await _driveApi.files.list(\r\n-      q: query,\r\n-      spaces: 'drive',\r\n-      $fields: 'files(id, name)',\r\n-    );\r\n-\r\n-    if (response.files?.isNotEmpty == true) {\r\n-      _folderId = response.files!.first.id;\r\n-      debugPrint('DriveService: Found existing folder: $_folderId');\r\n-      return _folderId!;\r\n-    }\r\n-\r\n-    // Create new folder\r\n-    debugPrint('DriveService: Creating new DriveNotes folder...');\r\n-    final folder = drive.File()\r\n-      ..name = _folderName\r\n-      ..mimeType = 'application/vnd.google-apps.folder';\r\n-\r\n-    final created = await _driveApi.files.create(folder);\r\n-    _folderId = created.id!;\r\n-    debugPrint('DriveService: Created new folder: $_folderId');\r\n-    return _folderId!;\r\n-  }\r\n-\r\n-  Future<String?> getFolderId() async {\r\n-    await _ensureAuthenticated();\r\n-    return _ensureFolder();\r\n-  }\r\n-\r\n-  Future<List<DriveFile>> listRawFiles() async {\r\n-    debugPrint('DriveService: Fetching .txt files from Drive...');\r\n-    await _ensureAuthenticated();\r\n-    final folderId = await _ensureFolder();\r\n-\r\n-    // Simple query to find only .txt files in our folder\r\n-    final query = \"fileExtension = 'txt' and '${folderId}' in parents and trashed = false\";\r\n-    \r\n-    debugPrint('DriveService: Using query: $query');\r\n-\r\n-    try {\r\n-      final response = await _driveApi.files.list(\r\n-        q: query,\r\n-        spaces: 'drive',\r\n-        $fields: 'files(id, name)',\r\n-        orderBy: 'modifiedTime desc',\r\n-        pageSize: 1000,\r\n-      );\r\n-\r\n-      debugPrint('DriveService: Found ${response.files?.length ?? 0} .txt files');\r\n-      if (response.files?.isNotEmpty == true) {\r\n-        for (var file in response.files!) {\r\n-          debugPrint('DriveService: Found file: ${file.name} - ID: ${file.id}');\r\n-        }\r\n-      }\r\n-\r\n-      return response.files\r\n-          ?.where((f) => f.id != null && f.name != null)\r\n-          .map((f) => DriveFile(id: f.id!, name: f.name!))\r\n-          .toList() ?? [];\r\n-    } catch (e) {\r\n-      debugPrint('DriveService: Error listing files - $e');\r\n-      rethrow;\r\n-    }\r\n-  }\r\n-\r\n-  Future<String> fetchContent(String fileId) async {\r\n-    debugPrint('DriveService: Fetching content for file $fileId');\r\n-    await _ensureAuthenticated();\r\n-    final media =\r\n-        await _driveApi.files.get(\r\n-              fileId,\r\n-              downloadOptions: drive.DownloadOptions.fullMedia,\r\n-            )\r\n-            as drive.Media;\r\n-\r\n-    final bytes = await media.stream.fold<List<int>>(\r\n-      [],\r\n-      (previous, element) => previous..addAll(element),\r\n-    );\r\n-    return utf8.decode(bytes);\r\n-  }\r\n-\r\n-  Future<void> deleteNote(String fileId) async {\r\n-    debugPrint('DriveService: Deleting file $fileId');\r\n-    await _ensureAuthenticated();\r\n-    await _driveApi.files.delete(fileId);\r\n-  }\r\n-\r\n-  Future<void> createNote(String title, String content) async {\r\n-    debugPrint('DriveService: Creating new note: $title');\r\n-    await _ensureAuthenticated();\r\n-    final folderId = await _ensureFolder();\r\n-\r\n-    try {\r\n-      final file = drive.File()\r\n-        ..name = title.endsWith('.txt') ? title : '$title.txt'\r\n-        ..mimeType = 'text/plain'\r\n-        ..parents = [folderId];\r\n-\r\n-      final bytes = utf8.encode(content);\r\n-      final media = drive.Media(Stream.value(bytes), bytes.length);\r\n-\r\n-      final result = await _driveApi.files.create(\r\n-        file,\r\n-        uploadMedia: media,\r\n-        $fields: 'id,name',\r\n-      );\r\n-\r\n-      debugPrint('DriveService: Successfully created note with ID: ${result.id}');\r\n-    } catch (e) {\r\n-      debugPrint('DriveService: Error creating note - $e');\r\n-      throw Exception('Failed to create note: $e');\r\n-    }\r\n-  }\r\n-\r\n-  Future<void> updateNote({\r\n-    required String fileId,\r\n-    required String newTitle,\r\n-    required String newContent,\r\n-  }) async {\r\n-    debugPrint('DriveService: Updating note $fileId to $newTitle');\r\n-    await _ensureAuthenticated();\r\n-\r\n-    try {\r\n-      // First, update the content\r\n-      final bytes = utf8.encode(newContent);\r\n-      final media = drive.Media(Stream.value(bytes), bytes.length);\r\n-\r\n-      // Then update the metadata (including title)\r\n-      final file =\r\n-          drive.File()\r\n-            ..name = newTitle.endsWith('.txt') ? newTitle : '$newTitle.txt';\r\n-\r\n-      final result = await _driveApi.files.update(\r\n-        file,\r\n-        fileId,\r\n-        uploadMedia: media,\r\n-        $fields: 'id,name',\r\n-      );\r\n-\r\n-      debugPrint(\r\n-        'DriveService: Successfully updated note with ID: ${result.id}',\r\n-      );\r\n-    } catch (e) {\r\n-      debugPrint('DriveService: Error updating note - $e');\r\n-      throw Exception('Failed to update note: $e');\r\n-    }\r\n-  }\r\n-}\r\n-\r\n-class DriveFile {\r\n-  final String id;\r\n-  final String name;\r\n-\r\n-  DriveFile({required this.id, required this.name});\r\n-}\r\n+import 'dart:convert';\n+import 'package:googleapis/drive/v3.dart' as drive;\n+import 'package:googleapis_auth/googleapis_auth.dart';\n+import 'package:flutter_secure_storage/flutter_secure_storage.dart';\n+import 'package:http/http.dart' as http;\n+import 'package:flutter/foundation.dart';\n+\n+class DriveService {\n+  static final DriveService instance = DriveService._();\n+  DriveService._();\n+\n+  static const _storage = FlutterSecureStorage();\n+  static const _scopes = [\n+    drive.DriveApi.driveFileScope,\n+    drive.DriveApi.driveReadonlyScope,\n+  ];\n+\n+  late drive.DriveApi _driveApi;\n+\n+  Future<void> _ensureAuthenticated() async {\n+    debugPrint('DriveService: Ensuring authentication...');\n+    final accessToken = await _storage.read(key: 'access_token');\n+    final refreshToken = await _storage.read(key: 'refresh_token');\n+    final expiryStr = await _storage.read(key: 'token_expiry');\n+\n+    if (accessToken == null || refreshToken == null || expiryStr == null) {\n+      debugPrint('DriveService: Missing authentication tokens');\n+      throw Exception('Not authenticated');\n+    }\n+\n+    final expiry = DateTime.parse(expiryStr).toUtc();\n+    if (expiry.isBefore(DateTime.now().toUtc())) {\n+      debugPrint('DriveService: Token expired, refreshing...');\n+      // Token expired, refresh it\n+      final client = http.Client();\n+      try {\n+        final credentials = await refreshCredentials(\n+          ClientId(\n+            '93768373598-your-client-id.apps.googleusercontent.com',\n+            null,\n+          ),\n+          AccessCredentials(\n+            AccessToken('Bearer', accessToken, expiry),\n+            refreshToken,\n+            _scopes,\n+          ),\n+          client,\n+        );\n+\n+        // Save new tokens\n+        await _storage.write(\n+          key: 'access_token',\n+          value: credentials.accessToken.data,\n+        );\n+        await _storage.write(\n+          key: 'token_expiry',\n+          value: credentials.accessToken.expiry.toUtc().toIso8601String(),\n+        );\n+\n+        _driveApi = drive.DriveApi(authenticatedClient(client, credentials));\n+        debugPrint('DriveService: Successfully refreshed token');\n+      } catch (e) {\n+        debugPrint('DriveService: Error refreshing token - $e');\n+        client.close();\n+        rethrow;\n+      }\n+    } else {\n+      debugPrint('DriveService: Using existing valid token');\n+      // Token still valid\n+      final credentials = AccessCredentials(\n+        AccessToken('Bearer', accessToken, expiry),\n+        refreshToken,\n+        _scopes,\n+      );\n+\n+      _driveApi = drive.DriveApi(\n+        authenticatedClient(http.Client(), credentials),\n+      );\n+    }\n+  }\n+\n+  Future<List<DriveFile>> listRawFiles() async {\n+    debugPrint('DriveService: Fetching .txt files from Drive...');\n+    await _ensureAuthenticated();\n+\n+    // Simple query to find only .txt files\n+    final query = \"fileExtension = 'txt' and trashed = false\";\n+\n+    debugPrint('DriveService: Using query: $query');\n+\n+    try {\n+      final response = await _driveApi.files.list(\n+        q: query,\n+        spaces: 'drive',\n+        $fields: 'files(id, name)',\n+        orderBy: 'modifiedTime desc',\n+        pageSize: 1000,\n+      );\n+\n+      debugPrint(\n+        'DriveService: Found ${response.files?.length ?? 0} .txt files',\n+      );\n+      if (response.files?.isNotEmpty == true) {\n+        for (var file in response.files!) {\n+          debugPrint('DriveService: Found file: ${file.name} - ID: ${file.id}');\n+        }\n+      }\n+\n+      return response.files\n+              ?.where((f) => f.id != null && f.name != null)\n+              .map((f) => DriveFile(id: f.id!, name: f.name!))\n+              .toList() ??\n+          [];\n+    } catch (e) {\n+      debugPrint('DriveService: Error listing files - $e');\n+      rethrow;\n+    }\n+  }\n+\n+  Future<String> fetchContent(String fileId) async {\n+    debugPrint('DriveService: Fetching content for file $fileId');\n+    await _ensureAuthenticated();\n+    final media =\n+        await _driveApi.files.get(\n+              fileId,\n+              downloadOptions: drive.DownloadOptions.fullMedia,\n+            )\n+            as drive.Media;\n+\n+    final bytes = await media.stream.fold<List<int>>(\n+      [],\n+      (previous, element) => previous..addAll(element),\n+    );\n+    return utf8.decode(bytes);\n+  }\n+\n+  Future<void> deleteNote(String fileId) async {\n+    debugPrint('DriveService: Deleting file $fileId');\n+    await _ensureAuthenticated();\n+    await _driveApi.files.delete(fileId);\n+  }\n+\n+  Future<void> createNote(String title, String content) async {\n+    debugPrint('DriveService: Creating new note: $title');\n+    await _ensureAuthenticated();\n+\n+    try {\n+      final file =\n+          drive.File()\n+            ..name = title.endsWith('.txt') ? title : '$title.txt'\n+            ..mimeType = 'text/plain';\n+\n+      final bytes = utf8.encode(content);\n+      final media = drive.Media(Stream.value(bytes), bytes.length);\n+\n+      final result = await _driveApi.files.create(\n+        file,\n+        uploadMedia: media,\n+        $fields: 'id,name',\n+      );\n+\n+      debugPrint(\n+        'DriveService: Successfully created note with ID: ${result.id}',\n+      );\n+    } catch (e) {\n+      debugPrint('DriveService: Error creating note - $e');\n+      throw Exception('Failed to create note: $e');\n+    }\n+  }\n+\n+  Future<void> updateNote({\n+    required String fileId,\n+    required String newTitle,\n+    required String newContent,\n+  }) async {\n+    debugPrint('DriveService: Updating note $fileId to $newTitle');\n+    await _ensureAuthenticated();\n+\n+    try {\n+      // First, update the content\n+      final bytes = utf8.encode(newContent);\n+      final media = drive.Media(Stream.value(bytes), bytes.length);\n+\n+      // Then update the metadata (including title)\n+      final file =\n+          drive.File()\n+            ..name = newTitle.endsWith('.txt') ? newTitle : '$newTitle.txt';\n+\n+      final result = await _driveApi.files.update(\n+        file,\n+        fileId,\n+        uploadMedia: media,\n+        $fields: 'id,name',\n+      );\n+\n+      debugPrint(\n+        'DriveService: Successfully updated note with ID: ${result.id}',\n+      );\n+    } catch (e) {\n+      debugPrint('DriveService: Error updating note - $e');\n+      throw Exception('Failed to update note: $e');\n+    }\n+  }\n+}\n+\n+class DriveFile {\n+  final String id;\n+  final String name;\n+\n+  DriveFile({required this.id, required this.name});\n+}\n"
                },
                {
                    "date": 1744914335804,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -78,129 +78,101 @@\n       );\n     }\n   }\n \n-  Future<List<DriveFile>> listRawFiles() async {\n-    debugPrint('DriveService: Fetching .txt files from Drive...');\n+  Future<List<drive.File>> listRawFiles() async {\n+    debugPrint('DriveService: Listing files...');\n     await _ensureAuthenticated();\n-\n-    // Simple query to find only .txt files\n-    final query = \"fileExtension = 'txt' and trashed = false\";\n-\n-    debugPrint('DriveService: Using query: $query');\n-\n-    try {\n-      final response = await _driveApi.files.list(\n-        q: query,\n-        spaces: 'drive',\n-        $fields: 'files(id, name)',\n-        orderBy: 'modifiedTime desc',\n-        pageSize: 1000,\n-      );\n-\n-      debugPrint(\n-        'DriveService: Found ${response.files?.length ?? 0} .txt files',\n-      );\n-      if (response.files?.isNotEmpty == true) {\n-        for (var file in response.files!) {\n-          debugPrint('DriveService: Found file: ${file.name} - ID: ${file.id}');\n-        }\n-      }\n-\n-      return response.files\n-              ?.where((f) => f.id != null && f.name != null)\n-              .map((f) => DriveFile(id: f.id!, name: f.name!))\n-              .toList() ??\n-          [];\n-    } catch (e) {\n-      debugPrint('DriveService: Error listing files - $e');\n-      rethrow;\n-    }\n+    final result = await _driveApi.files.list(\n+      q: \"name contains '.txt' and trashed = false\",\n+      $fields: 'files(id, name, modifiedTime)',\n+    );\n+    return result.files ?? [];\n   }\n \n   Future<String> fetchContent(String fileId) async {\n     debugPrint('DriveService: Fetching content for file $fileId');\n     await _ensureAuthenticated();\n-    final media =\n-        await _driveApi.files.get(\n-              fileId,\n-              downloadOptions: drive.DownloadOptions.fullMedia,\n-            )\n-            as drive.Media;\n+    final media = await _driveApi.files.get(\n+      fileId,\n+      downloadOptions: drive.DownloadOptions.fullMedia,\n+    ) as drive.Media;\n \n-    final bytes = await media.stream.fold<List<int>>(\n-      [],\n-      (previous, element) => previous..addAll(element),\n-    );\n-    return utf8.decode(bytes);\n+    final content = await media.stream.transform(utf8.decoder).join();\n+    final contentMap = json.decode(content) as Map<String, dynamic>;\n+    return contentMap['content'] as String;\n   }\n \n   Future<void> deleteNote(String fileId) async {\n-    debugPrint('DriveService: Deleting file $fileId');\n+    debugPrint('DriveService: Deleting note $fileId');\n     await _ensureAuthenticated();\n     await _driveApi.files.delete(fileId);\n   }\n \n-  Future<void> createNote(String title, String content) async {\n-    debugPrint('DriveService: Creating new note: $title');\n+  Future<void> createNote(\n+    String title,\n+    String content, {\n+    String fontFamily = 'Roboto',\n+  }) async {\n+    debugPrint('DriveService: Creating note: $title');\n     await _ensureAuthenticated();\n \n-    try {\n-      final file =\n-          drive.File()\n-            ..name = title.endsWith('.txt') ? title : '$title.txt'\n-            ..mimeType = 'text/plain';\n+    // Ensure title has .txt extension\n+    final fileName = title.endsWith('.txt') ? title : '$title.txt';\n \n-      final bytes = utf8.encode(content);\n-      final media = drive.Media(Stream.value(bytes), bytes.length);\n+    // Create JSON content with metadata\n+    final jsonContent = json.encode({\n+      'content': content,\n+      'fontFamily': fontFamily,\n+      'createdAt': DateTime.now().toIso8601String(),\n+      'updatedAt': DateTime.now().toIso8601String(),\n+    });\n \n-      final result = await _driveApi.files.create(\n-        file,\n-        uploadMedia: media,\n-        $fields: 'id,name',\n-      );\n+    // Create file metadata\n+    final file = drive.File()\n+      ..name = fileName\n+      ..mimeType = 'text/plain';\n \n-      debugPrint(\n-        'DriveService: Successfully created note with ID: ${result.id}',\n-      );\n-    } catch (e) {\n-      debugPrint('DriveService: Error creating note - $e');\n-      throw Exception('Failed to create note: $e');\n-    }\n+    // Upload file with content\n+    await _driveApi.files.create(\n+      file,\n+      uploadMedia: drive.Media(\n+        Stream.value(utf8.encode(jsonContent)),\n+        jsonContent.length,\n+      ),\n+    );\n   }\n \n   Future<void> updateNote({\n     required String fileId,\n     required String newTitle,\n     required String newContent,\n+    String fontFamily = 'Roboto',\n   }) async {\n-    debugPrint('DriveService: Updating note $fileId to $newTitle');\n+    debugPrint('DriveService: Updating note $fileId to: $newTitle');\n     await _ensureAuthenticated();\n \n-    try {\n-      // First, update the content\n-      final bytes = utf8.encode(newContent);\n-      final media = drive.Media(Stream.value(bytes), bytes.length);\n+    // Ensure title has .txt extension\n+    final fileName = newTitle.endsWith('.txt') ? newTitle : '$newTitle.txt';\n \n-      // Then update the metadata (including title)\n-      final file =\n-          drive.File()\n-            ..name = newTitle.endsWith('.txt') ? newTitle : '$newTitle.txt';\n+    // Create JSON content with metadata\n+    final jsonContent = json.encode({\n+      'content': newContent,\n+      'fontFamily': fontFamily,\n+      'updatedAt': DateTime.now().toIso8601String(),\n+    });\n \n-      final result = await _driveApi.files.update(\n-        file,\n-        fileId,\n-        uploadMedia: media,\n-        $fields: 'id,name',\n-      );\n+    // Update file metadata and content\n+    final file = drive.File()..name = fileName;\n \n-      debugPrint(\n-        'DriveService: Successfully updated note with ID: ${result.id}',\n-      );\n-    } catch (e) {\n-      debugPrint('DriveService: Error updating note - $e');\n-      throw Exception('Failed to update note: $e');\n-    }\n+    await _driveApi.files.update(\n+      file,\n+      fileId,\n+      uploadMedia: drive.Media(\n+        Stream.value(utf8.encode(jsonContent)),\n+        jsonContent.length,\n+      ),\n+    );\n   }\n }\n \n class DriveFile {\n"
                },
                {
                    "date": 1744914876239,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -97,10 +97,18 @@\n       downloadOptions: drive.DownloadOptions.fullMedia,\n     ) as drive.Media;\n \n     final content = await media.stream.transform(utf8.decoder).join();\n-    final contentMap = json.decode(content) as Map<String, dynamic>;\n-    return contentMap['content'] as String;\n+    \n+    // Try to parse as JSON first (new format)\n+    try {\n+      final contentMap = json.decode(content) as Map<String, dynamic>;\n+      return contentMap['content'] as String? ?? content;\n+    } catch (e) {\n+      // If not JSON, return as plain text (old format)\n+      debugPrint('DriveService: File is in plain text format');\n+      return content;\n+    }\n   }\n \n   Future<void> deleteNote(String fileId) async {\n     debugPrint('DriveService: Deleting note $fileId');\n"
                },
                {
                    "date": 1744915113018,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -96,19 +96,9 @@\n       fileId,\n       downloadOptions: drive.DownloadOptions.fullMedia,\n     ) as drive.Media;\n \n-    final content = await media.stream.transform(utf8.decoder).join();\n-    \n-    // Try to parse as JSON first (new format)\n-    try {\n-      final contentMap = json.decode(content) as Map<String, dynamic>;\n-      return contentMap['content'] as String? ?? content;\n-    } catch (e) {\n-      // If not JSON, return as plain text (old format)\n-      debugPrint('DriveService: File is in plain text format');\n-      return content;\n-    }\n+    return await media.stream.transform(utf8.decoder).join();\n   }\n \n   Future<void> deleteNote(String fileId) async {\n     debugPrint('DriveService: Deleting note $fileId');\n@@ -117,25 +107,16 @@\n   }\n \n   Future<void> createNote(\n     String title,\n-    String content, {\n-    String fontFamily = 'Roboto',\n-  }) async {\n+    String content,\n+  ) async {\n     debugPrint('DriveService: Creating note: $title');\n     await _ensureAuthenticated();\n \n     // Ensure title has .txt extension\n     final fileName = title.endsWith('.txt') ? title : '$title.txt';\n \n-    // Create JSON content with metadata\n-    final jsonContent = json.encode({\n-      'content': content,\n-      'fontFamily': fontFamily,\n-      'createdAt': DateTime.now().toIso8601String(),\n-      'updatedAt': DateTime.now().toIso8601String(),\n-    });\n-\n     // Create file metadata\n     final file = drive.File()\n       ..name = fileName\n       ..mimeType = 'text/plain';\n@@ -143,42 +124,34 @@\n     // Upload file with content\n     await _driveApi.files.create(\n       file,\n       uploadMedia: drive.Media(\n-        Stream.value(utf8.encode(jsonContent)),\n-        jsonContent.length,\n+        Stream.value(utf8.encode(content)),\n+        utf8.encode(content).length,\n       ),\n     );\n   }\n \n   Future<void> updateNote({\n     required String fileId,\n     required String newTitle,\n     required String newContent,\n-    String fontFamily = 'Roboto',\n   }) async {\n     debugPrint('DriveService: Updating note $fileId to: $newTitle');\n     await _ensureAuthenticated();\n \n     // Ensure title has .txt extension\n     final fileName = newTitle.endsWith('.txt') ? newTitle : '$newTitle.txt';\n \n-    // Create JSON content with metadata\n-    final jsonContent = json.encode({\n-      'content': newContent,\n-      'fontFamily': fontFamily,\n-      'updatedAt': DateTime.now().toIso8601String(),\n-    });\n-\n     // Update file metadata and content\n     final file = drive.File()..name = fileName;\n \n     await _driveApi.files.update(\n       file,\n       fileId,\n       uploadMedia: drive.Media(\n-        Stream.value(utf8.encode(jsonContent)),\n-        jsonContent.length,\n+        Stream.value(utf8.encode(newContent)),\n+        utf8.encode(newContent).length,\n       ),\n     );\n   }\n }\n"
                },
                {
                    "date": 1744915269667,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -78,82 +78,129 @@\n       );\n     }\n   }\n \n-  Future<List<drive.File>> listRawFiles() async {\n-    debugPrint('DriveService: Listing files...');\n+  Future<List<DriveFile>> listRawFiles() async {\n+    debugPrint('DriveService: Fetching .txt files from Drive...');\n     await _ensureAuthenticated();\n-    final result = await _driveApi.files.list(\n-      q: \"name contains '.txt' and trashed = false\",\n-      $fields: 'files(id, name, modifiedTime)',\n-    );\n-    return result.files ?? [];\n+\n+    // Simple query to find only .txt files\n+    final query = \"fileExtension = 'txt' and trashed = false\";\n+\n+    debugPrint('DriveService: Using query: $query');\n+\n+    try {\n+      final response = await _driveApi.files.list(\n+        q: query,\n+        spaces: 'drive',\n+        $fields: 'files(id, name)',\n+        orderBy: 'modifiedTime desc',\n+        pageSize: 1000,\n+      );\n+\n+      debugPrint(\n+        'DriveService: Found ${response.files?.length ?? 0} .txt files',\n+      );\n+      if (response.files?.isNotEmpty == true) {\n+        for (var file in response.files!) {\n+          debugPrint('DriveService: Found file: ${file.name} - ID: ${file.id}');\n+        }\n+      }\n+\n+      return response.files\n+              ?.where((f) => f.id != null && f.name != null)\n+              .map((f) => DriveFile(id: f.id!, name: f.name!))\n+              .toList() ??\n+          [];\n+    } catch (e) {\n+      debugPrint('DriveService: Error listing files - $e');\n+      rethrow;\n+    }\n   }\n \n   Future<String> fetchContent(String fileId) async {\n     debugPrint('DriveService: Fetching content for file $fileId');\n     await _ensureAuthenticated();\n-    final media = await _driveApi.files.get(\n-      fileId,\n-      downloadOptions: drive.DownloadOptions.fullMedia,\n-    ) as drive.Media;\n+    final media =\n+        await _driveApi.files.get(\n+              fileId,\n+              downloadOptions: drive.DownloadOptions.fullMedia,\n+            )\n+            as drive.Media;\n \n-    return await media.stream.transform(utf8.decoder).join();\n+    final bytes = await media.stream.fold<List<int>>(\n+      [],\n+      (previous, element) => previous..addAll(element),\n+    );\n+    return utf8.decode(bytes);\n   }\n \n   Future<void> deleteNote(String fileId) async {\n-    debugPrint('DriveService: Deleting note $fileId');\n+    debugPrint('DriveService: Deleting file $fileId');\n     await _ensureAuthenticated();\n     await _driveApi.files.delete(fileId);\n   }\n \n-  Future<void> createNote(\n-    String title,\n-    String content,\n-  ) async {\n-    debugPrint('DriveService: Creating note: $title');\n+  Future<void> createNote(String title, String content) async {\n+    debugPrint('DriveService: Creating new note: $title');\n     await _ensureAuthenticated();\n \n-    // Ensure title has .txt extension\n-    final fileName = title.endsWith('.txt') ? title : '$title.txt';\n+    try {\n+      final file =\n+          drive.File()\n+            ..name = title.endsWith('.txt') ? title : '$title.txt'\n+            ..mimeType = 'text/plain';\n \n-    // Create file metadata\n-    final file = drive.File()\n-      ..name = fileName\n-      ..mimeType = 'text/plain';\n+      final bytes = utf8.encode(content);\n+      final media = drive.Media(Stream.value(bytes), bytes.length);\n \n-    // Upload file with content\n-    await _driveApi.files.create(\n-      file,\n-      uploadMedia: drive.Media(\n-        Stream.value(utf8.encode(content)),\n-        utf8.encode(content).length,\n-      ),\n-    );\n+      final result = await _driveApi.files.create(\n+        file,\n+        uploadMedia: media,\n+        $fields: 'id,name',\n+      );\n+\n+      debugPrint(\n+        'DriveService: Successfully created note with ID: ${result.id}',\n+      );\n+    } catch (e) {\n+      debugPrint('DriveService: Error creating note - $e');\n+      throw Exception('Failed to create note: $e');\n+    }\n   }\n \n   Future<void> updateNote({\n     required String fileId,\n     required String newTitle,\n     required String newContent,\n   }) async {\n-    debugPrint('DriveService: Updating note $fileId to: $newTitle');\n+    debugPrint('DriveService: Updating note $fileId to $newTitle');\n     await _ensureAuthenticated();\n \n-    // Ensure title has .txt extension\n-    final fileName = newTitle.endsWith('.txt') ? newTitle : '$newTitle.txt';\n+    try {\n+      // First, update the content\n+      final bytes = utf8.encode(newContent);\n+      final media = drive.Media(Stream.value(bytes), bytes.length);\n \n-    // Update file metadata and content\n-    final file = drive.File()..name = fileName;\n+      // Then update the metadata (including title)\n+      final file =\n+          drive.File()\n+            ..name = newTitle.endsWith('.txt') ? newTitle : '$newTitle.txt';\n \n-    await _driveApi.files.update(\n-      file,\n-      fileId,\n-      uploadMedia: drive.Media(\n-        Stream.value(utf8.encode(newContent)),\n-        utf8.encode(newContent).length,\n-      ),\n-    );\n+      final result = await _driveApi.files.update(\n+        file,\n+        fileId,\n+        uploadMedia: media,\n+        $fields: 'id,name',\n+      );\n+\n+      debugPrint(\n+        'DriveService: Successfully updated note with ID: ${result.id}',\n+      );\n+    } catch (e) {\n+      debugPrint('DriveService: Error updating note - $e');\n+      throw Exception('Failed to update note: $e');\n+    }\n   }\n }\n \n class DriveFile {\n"
                },
                {
                    "date": 1744917305043,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -91,9 +91,9 @@\n     try {\n       final response = await _driveApi.files.list(\n         q: query,\n         spaces: 'drive',\n-        $fields: 'files(id, name)',\n+        $fields: 'files(id, name, modifiedTime)',\n         orderBy: 'modifiedTime desc',\n         pageSize: 1000,\n       );\n \n@@ -107,9 +107,13 @@\n       }\n \n       return response.files\n               ?.where((f) => f.id != null && f.name != null)\n-              .map((f) => DriveFile(id: f.id!, name: f.name!))\n+              .map((f) => DriveFile(\n+                    id: f.id!,\n+                    name: f.name!,\n+                    modifiedTime: f.modifiedTime,\n+                  ))\n               .toList() ??\n           [];\n     } catch (e) {\n       debugPrint('DriveService: Error listing files - $e');\n@@ -171,8 +175,9 @@\n   Future<void> updateNote({\n     required String fileId,\n     required String newTitle,\n     required String newContent,\n+    DateTime? modifiedTime,\n   }) async {\n     debugPrint('DriveService: Updating note $fileId to $newTitle');\n     await _ensureAuthenticated();\n \n@@ -181,17 +186,17 @@\n       final bytes = utf8.encode(newContent);\n       final media = drive.Media(Stream.value(bytes), bytes.length);\n \n       // Then update the metadata (including title)\n-      final file =\n-          drive.File()\n-            ..name = newTitle.endsWith('.txt') ? newTitle : '$newTitle.txt';\n+      final file = drive.File()\n+        ..name = newTitle.endsWith('.txt') ? newTitle : '$newTitle.txt'\n+        ..modifiedTime = modifiedTime;\n \n       final result = await _driveApi.files.update(\n         file,\n         fileId,\n         uploadMedia: media,\n-        $fields: 'id,name',\n+        $fields: 'id,name,modifiedTime',\n       );\n \n       debugPrint(\n         'DriveService: Successfully updated note with ID: ${result.id}',\n@@ -205,7 +210,12 @@\n \n class DriveFile {\n   final String id;\n   final String name;\n+  final DateTime? modifiedTime;\n \n-  DriveFile({required this.id, required this.name});\n+  DriveFile({\n+    required this.id,\n+    required this.name,\n+    this.modifiedTime,\n+  });\n }\n"
                },
                {
                    "date": 1744917317608,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -107,13 +107,15 @@\n       }\n \n       return response.files\n               ?.where((f) => f.id != null && f.name != null)\n-              .map((f) => DriveFile(\n-                    id: f.id!,\n-                    name: f.name!,\n-                    modifiedTime: f.modifiedTime,\n-                  ))\n+              .map(\n+                (f) => DriveFile(\n+                  id: f.id!,\n+                  name: f.name!,\n+                  modifiedTime: f.modifiedTime,\n+                ),\n+              )\n               .toList() ??\n           [];\n     } catch (e) {\n       debugPrint('DriveService: Error listing files - $e');\n@@ -186,11 +188,12 @@\n       final bytes = utf8.encode(newContent);\n       final media = drive.Media(Stream.value(bytes), bytes.length);\n \n       // Then update the metadata (including title)\n-      final file = drive.File()\n-        ..name = newTitle.endsWith('.txt') ? newTitle : '$newTitle.txt'\n-        ..modifiedTime = modifiedTime;\n+      final file =\n+          drive.File()\n+            ..name = newTitle.endsWith('.txt') ? newTitle : '$newTitle.txt'\n+            ..modifiedTime = modifiedTime;\n \n       final result = await _driveApi.files.update(\n         file,\n         fileId,\n@@ -212,10 +215,6 @@\n   final String id;\n   final String name;\n   final DateTime? modifiedTime;\n \n-  DriveFile({\n-    required this.id,\n-    required this.name,\n-    this.modifiedTime,\n-  });\n+  DriveFile({required this.id, required this.name, this.modifiedTime});\n }\n"
                },
                {
                    "date": 1744917330189,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,12 @@\n     drive.DriveApi.driveReadonlyScope,\n   ];\n \n   late drive.DriveApi _driveApi;\n+  final String folderId;\n \n+  DriveService(this._driveApi, this.folderId);\n+\n   Future<void> _ensureAuthenticated() async {\n     debugPrint('DriveService: Ensuring authentication...');\n     final accessToken = await _storage.read(key: 'access_token');\n     final refreshToken = await _storage.read(key: 'refresh_token');\n@@ -145,34 +148,28 @@\n     await _ensureAuthenticated();\n     await _driveApi.files.delete(fileId);\n   }\n \n-  Future<void> createNote(String title, String content) async {\n-    debugPrint('DriveService: Creating new note: $title');\n-    await _ensureAuthenticated();\n+  Future<String> createNote({\n+    required String title,\n+    required String content,\n+    DateTime? modifiedTime,\n+  }) async {\n+    final file = drive.File();\n+    file.name = title;\n+    file.parents = [folderId];\n+    file.modifiedTime = modifiedTime;\n \n-    try {\n-      final file =\n-          drive.File()\n-            ..name = title.endsWith('.txt') ? title : '$title.txt'\n-            ..mimeType = 'text/plain';\n+    final bytes = utf8.encode(content);\n+    final media = drive.Media(Stream.value(bytes), bytes.length);\n \n-      final bytes = utf8.encode(content);\n-      final media = drive.Media(Stream.value(bytes), bytes.length);\n+    final response = await _driveApi.files.create(\n+      file,\n+      uploadMedia: media,\n+      $fields: 'id, name, modifiedTime',\n+    );\n \n-      final result = await _driveApi.files.create(\n-        file,\n-        uploadMedia: media,\n-        $fields: 'id,name',\n-      );\n-\n-      debugPrint(\n-        'DriveService: Successfully created note with ID: ${result.id}',\n-      );\n-    } catch (e) {\n-      debugPrint('DriveService: Error creating note - $e');\n-      throw Exception('Failed to create note: $e');\n-    }\n+    return response.id!;\n   }\n \n   Future<void> updateNote({\n     required String fileId,\n"
                },
                {
                    "date": 1744917347141,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,12 +14,12 @@\n     drive.DriveApi.driveFileScope,\n     drive.DriveApi.driveReadonlyScope,\n   ];\n \n-  late drive.DriveApi _driveApi;\n+  final drive.DriveApi _driveApi;\n   final String folderId;\n \n-  DriveService(this._driveApi, this.folderId);\n+  DriveService(this._driveApi, {required this.folderId});\n \n   Future<void> _ensureAuthenticated() async {\n     debugPrint('DriveService: Ensuring authentication...');\n     final accessToken = await _storage.read(key: 'access_token');\n@@ -153,16 +153,20 @@\n     required String title,\n     required String content,\n     DateTime? modifiedTime,\n   }) async {\n+    await _ensureAuthenticated();\n+    \n     final file = drive.File();\n-    file.name = title;\n+    file.name = '$title.md';\n     file.parents = [folderId];\n     file.modifiedTime = modifiedTime;\n+    \n+    final media = drive.Media(\n+      Stream.value(utf8.encode(content)),\n+      content.length,\n+    );\n \n-    final bytes = utf8.encode(content);\n-    final media = drive.Media(Stream.value(bytes), bytes.length);\n-\n     final response = await _driveApi.files.create(\n       file,\n       uploadMedia: media,\n       $fields: 'id, name, modifiedTime',\n@@ -205,8 +209,38 @@\n       debugPrint('DriveService: Error updating note - $e');\n       throw Exception('Failed to update note: $e');\n     }\n   }\n+\n+  Future<List<drive.File>> listNotes() async {\n+    await _ensureAuthenticated();\n+    \n+    final response = await _driveApi.files.list(\n+      q: \"'$folderId' in parents and trashed = false\",\n+      spaces: 'drive',\n+      fields: 'files(id, name, createdTime, modifiedTime)',\n+    );\n+    \n+    return response.files ?? [];\n+  }\n+\n+  Future<void> updateNote(String fileId, String title, String content) async {\n+    await _ensureAuthenticated();\n+    \n+    final file = drive.File();\n+    file.name = '$title.md';\n+    \n+    final media = drive.Media(\n+      Stream.value(utf8.encode(content)),\n+      content.length,\n+    );\n+\n+    await _driveApi.files.update(\n+      file,\n+      fileId,\n+      uploadMedia: media,\n+    );\n+  }\n }\n \n class DriveFile {\n   final String id;\n"
                },
                {
                    "date": 1744917356663,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,12 @@\n \n   final drive.DriveApi _driveApi;\n   final String folderId;\n \n-  DriveService(this._driveApi, {required this.folderId});\n+  DriveService({\n+    required drive.DriveApi driveApi,\n+    required this.folderId,\n+  }) : _driveApi = driveApi;\n \n   Future<void> _ensureAuthenticated() async {\n     debugPrint('DriveService: Ensuring authentication...');\n     final accessToken = await _storage.read(key: 'access_token');\n@@ -148,77 +151,32 @@\n     await _ensureAuthenticated();\n     await _driveApi.files.delete(fileId);\n   }\n \n-  Future<String> createNote({\n-    required String title,\n-    required String content,\n-    DateTime? modifiedTime,\n-  }) async {\n+  Future<void> createNote(String title, String content) async {\n     await _ensureAuthenticated();\n     \n     final file = drive.File();\n     file.name = '$title.md';\n     file.parents = [folderId];\n-    file.modifiedTime = modifiedTime;\n     \n     final media = drive.Media(\n       Stream.value(utf8.encode(content)),\n       content.length,\n     );\n \n-    final response = await _driveApi.files.create(\n+    await _driveApi.files.create(\n       file,\n       uploadMedia: media,\n-      $fields: 'id, name, modifiedTime',\n     );\n-\n-    return response.id!;\n   }\n \n-  Future<void> updateNote({\n-    required String fileId,\n-    required String newTitle,\n-    required String newContent,\n-    DateTime? modifiedTime,\n-  }) async {\n-    debugPrint('DriveService: Updating note $fileId to $newTitle');\n-    await _ensureAuthenticated();\n-\n-    try {\n-      // First, update the content\n-      final bytes = utf8.encode(newContent);\n-      final media = drive.Media(Stream.value(bytes), bytes.length);\n-\n-      // Then update the metadata (including title)\n-      final file =\n-          drive.File()\n-            ..name = newTitle.endsWith('.txt') ? newTitle : '$newTitle.txt'\n-            ..modifiedTime = modifiedTime;\n-\n-      final result = await _driveApi.files.update(\n-        file,\n-        fileId,\n-        uploadMedia: media,\n-        $fields: 'id,name,modifiedTime',\n-      );\n-\n-      debugPrint(\n-        'DriveService: Successfully updated note with ID: ${result.id}',\n-      );\n-    } catch (e) {\n-      debugPrint('DriveService: Error updating note - $e');\n-      throw Exception('Failed to update note: $e');\n-    }\n-  }\n-\n   Future<List<drive.File>> listNotes() async {\n     await _ensureAuthenticated();\n     \n     final response = await _driveApi.files.list(\n       q: \"'$folderId' in parents and trashed = false\",\n       spaces: 'drive',\n-      fields: 'files(id, name, createdTime, modifiedTime)',\n     );\n     \n     return response.files ?? [];\n   }\n"
                },
                {
                    "date": 1744917365483,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -146,9 +146,8 @@\n     return utf8.decode(bytes);\n   }\n \n   Future<void> deleteNote(String fileId) async {\n-    debugPrint('DriveService: Deleting file $fileId');\n     await _ensureAuthenticated();\n     await _driveApi.files.delete(fileId);\n   }\n \n"
                },
                {
                    "date": 1744917420163,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,25 +5,19 @@\n import 'package:http/http.dart' as http;\n import 'package:flutter/foundation.dart';\n \n class DriveService {\n-  static final DriveService instance = DriveService._();\n-  DriveService._();\n-\n-  static const _storage = FlutterSecureStorage();\n+  final drive.DriveApi _driveApi;\n+  final String folderId;\n+  final _storage = const FlutterSecureStorage();\n   static const _scopes = [\n     drive.DriveApi.driveFileScope,\n     drive.DriveApi.driveReadonlyScope,\n   ];\n \n-  final drive.DriveApi _driveApi;\n-  final String folderId;\n+  DriveService({required drive.DriveApi driveApi, required this.folderId})\n+    : _driveApi = driveApi;\n \n-  DriveService({\n-    required drive.DriveApi driveApi,\n-    required this.folderId,\n-  }) : _driveApi = driveApi;\n-\n   Future<void> _ensureAuthenticated() async {\n     debugPrint('DriveService: Ensuring authentication...');\n     final accessToken = await _storage.read(key: 'access_token');\n     final refreshToken = await _storage.read(key: 'refresh_token');\n@@ -62,27 +56,16 @@\n           key: 'token_expiry',\n           value: credentials.accessToken.expiry.toUtc().toIso8601String(),\n         );\n \n-        _driveApi = drive.DriveApi(authenticatedClient(client, credentials));\n         debugPrint('DriveService: Successfully refreshed token');\n       } catch (e) {\n         debugPrint('DriveService: Error refreshing token - $e');\n         client.close();\n         rethrow;\n       }\n     } else {\n       debugPrint('DriveService: Using existing valid token');\n-      // Token still valid\n-      final credentials = AccessCredentials(\n-        AccessToken('Bearer', accessToken, expiry),\n-        refreshToken,\n-        _scopes,\n-      );\n-\n-      _driveApi = drive.DriveApi(\n-        authenticatedClient(http.Client(), credentials),\n-      );\n     }\n   }\n \n   Future<List<DriveFile>> listRawFiles() async {\n@@ -152,51 +135,44 @@\n   }\n \n   Future<void> createNote(String title, String content) async {\n     await _ensureAuthenticated();\n-    \n+\n     final file = drive.File();\n     file.name = '$title.md';\n     file.parents = [folderId];\n-    \n+\n     final media = drive.Media(\n       Stream.value(utf8.encode(content)),\n       content.length,\n     );\n \n-    await _driveApi.files.create(\n-      file,\n-      uploadMedia: media,\n-    );\n+    await _driveApi.files.create(file, uploadMedia: media);\n   }\n \n   Future<List<drive.File>> listNotes() async {\n     await _ensureAuthenticated();\n-    \n+\n     final response = await _driveApi.files.list(\n       q: \"'$folderId' in parents and trashed = false\",\n       spaces: 'drive',\n     );\n-    \n+\n     return response.files ?? [];\n   }\n \n   Future<void> updateNote(String fileId, String title, String content) async {\n     await _ensureAuthenticated();\n-    \n+\n     final file = drive.File();\n     file.name = '$title.md';\n-    \n+\n     final media = drive.Media(\n       Stream.value(utf8.encode(content)),\n       content.length,\n     );\n \n-    await _driveApi.files.update(\n-      file,\n-      fileId,\n-      uploadMedia: media,\n-    );\n+    await _driveApi.files.update(file, fileId, uploadMedia: media);\n   }\n }\n \n class DriveFile {\n"
                },
                {
                    "date": 1744917598738,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,18 +5,18 @@\n import 'package:http/http.dart' as http;\n import 'package:flutter/foundation.dart';\n \n class DriveService {\n-  final drive.DriveApi _driveApi;\n-  final String folderId;\n-  final _storage = const FlutterSecureStorage();\n+  static final DriveService instance = DriveService._();\n+  DriveService._();\n+\n+  static const _storage = FlutterSecureStorage();\n   static const _scopes = [\n     drive.DriveApi.driveFileScope,\n     drive.DriveApi.driveReadonlyScope,\n   ];\n \n-  DriveService({required drive.DriveApi driveApi, required this.folderId})\n-    : _driveApi = driveApi;\n+  late drive.DriveApi _driveApi;\n \n   Future<void> _ensureAuthenticated() async {\n     debugPrint('DriveService: Ensuring authentication...');\n     final accessToken = await _storage.read(key: 'access_token');\n@@ -56,16 +56,27 @@\n           key: 'token_expiry',\n           value: credentials.accessToken.expiry.toUtc().toIso8601String(),\n         );\n \n+        _driveApi = drive.DriveApi(authenticatedClient(client, credentials));\n         debugPrint('DriveService: Successfully refreshed token');\n       } catch (e) {\n         debugPrint('DriveService: Error refreshing token - $e');\n         client.close();\n         rethrow;\n       }\n     } else {\n       debugPrint('DriveService: Using existing valid token');\n+      // Token still valid\n+      final credentials = AccessCredentials(\n+        AccessToken('Bearer', accessToken, expiry),\n+        refreshToken,\n+        _scopes,\n+      );\n+\n+      _driveApi = drive.DriveApi(\n+        authenticatedClient(http.Client(), credentials),\n+      );\n     }\n   }\n \n   Future<List<DriveFile>> listRawFiles() async {\n@@ -80,9 +91,9 @@\n     try {\n       final response = await _driveApi.files.list(\n         q: query,\n         spaces: 'drive',\n-        $fields: 'files(id, name, modifiedTime)',\n+        $fields: 'files(id, name)',\n         orderBy: 'modifiedTime desc',\n         pageSize: 1000,\n       );\n \n@@ -96,15 +107,9 @@\n       }\n \n       return response.files\n               ?.where((f) => f.id != null && f.name != null)\n-              .map(\n-                (f) => DriveFile(\n-                  id: f.id!,\n-                  name: f.name!,\n-                  modifiedTime: f.modifiedTime,\n-                ),\n-              )\n+              .map((f) => DriveFile(id: f.id!, name: f.name!))\n               .toList() ??\n           [];\n     } catch (e) {\n       debugPrint('DriveService: Error listing files - $e');\n@@ -129,56 +134,78 @@\n     return utf8.decode(bytes);\n   }\n \n   Future<void> deleteNote(String fileId) async {\n+    debugPrint('DriveService: Deleting file $fileId');\n     await _ensureAuthenticated();\n     await _driveApi.files.delete(fileId);\n   }\n \n   Future<void> createNote(String title, String content) async {\n+    debugPrint('DriveService: Creating new note: $title');\n     await _ensureAuthenticated();\n \n-    final file = drive.File();\n-    file.name = '$title.md';\n-    file.parents = [folderId];\n+    try {\n+      final file =\n+          drive.File()\n+            ..name = title.endsWith('.txt') ? title : '$title.txt'\n+            ..mimeType = 'text/plain';\n \n-    final media = drive.Media(\n-      Stream.value(utf8.encode(content)),\n-      content.length,\n-    );\n+      final bytes = utf8.encode(content);\n+      final media = drive.Media(Stream.value(bytes), bytes.length);\n \n-    await _driveApi.files.create(file, uploadMedia: media);\n+      final result = await _driveApi.files.create(\n+        file,\n+        uploadMedia: media,\n+        $fields: 'id,name',\n+      );\n+\n+      debugPrint(\n+        'DriveService: Successfully created note with ID: ${result.id}',\n+      );\n+    } catch (e) {\n+      debugPrint('DriveService: Error creating note - $e');\n+      throw Exception('Failed to create note: $e');\n+    }\n   }\n \n-  Future<List<drive.File>> listNotes() async {\n+  Future<void> updateNote({\n+    required String fileId,\n+    required String newTitle,\n+    required String newContent,\n+  }) async {\n+    debugPrint('DriveService: Updating note $fileId to $newTitle');\n     await _ensureAuthenticated();\n \n-    final response = await _driveApi.files.list(\n-      q: \"'$folderId' in parents and trashed = false\",\n-      spaces: 'drive',\n-    );\n+    try {\n+      // First, update the content\n+      final bytes = utf8.encode(newContent);\n+      final media = drive.Media(Stream.value(bytes), bytes.length);\n \n-    return response.files ?? [];\n-  }\n+      // Then update the metadata (including title)\n+      final file =\n+          drive.File()\n+            ..name = newTitle.endsWith('.txt') ? newTitle : '$newTitle.txt';\n \n-  Future<void> updateNote(String fileId, String title, String content) async {\n-    await _ensureAuthenticated();\n+      final result = await _driveApi.files.update(\n+        file,\n+        fileId,\n+        uploadMedia: media,\n+        $fields: 'id,name',\n+      );\n \n-    final file = drive.File();\n-    file.name = '$title.md';\n-\n-    final media = drive.Media(\n-      Stream.value(utf8.encode(content)),\n-      content.length,\n-    );\n-\n-    await _driveApi.files.update(file, fileId, uploadMedia: media);\n+      debugPrint(\n+        'DriveService: Successfully updated note with ID: ${result.id}',\n+      );\n+    } catch (e) {\n+      debugPrint('DriveService: Error updating note - $e');\n+      throw Exception('Failed to update note: $e');\n+    }\n   }\n }\n \n class DriveFile {\n   final String id;\n   final String name;\n-  final DateTime? modifiedTime;\n \n-  DriveFile({required this.id, required this.name, this.modifiedTime});\n+  DriveFile({required this.id, required this.name});\n }\n"
                },
                {
                    "date": 1744969668783,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -83,9 +83,9 @@\n     debugPrint('DriveService: Fetching .txt files from Drive...');\n     await _ensureAuthenticated();\n \n     // Simple query to find only .txt files\n-    final query = \"fileExtension = 'txt' and trashed = false\";\n+    const query = \"fileExtension = 'txt' and trashed = false\";\n \n     debugPrint('DriveService: Using query: $query');\n \n     try {\n"
                },
                {
                    "date": 1744972214792,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -139,9 +139,9 @@\n     await _ensureAuthenticated();\n     await _driveApi.files.delete(fileId);\n   }\n \n-  Future<void> createNote(String title, String content) async {\n+  Future<String> createNote(String title, String content) async {\n     debugPrint('DriveService: Creating new note: $title');\n     await _ensureAuthenticated();\n \n     try {\n@@ -161,8 +161,9 @@\n \n       debugPrint(\n         'DriveService: Successfully created note with ID: ${result.id}',\n       );\n+      return result.id!;\n     } catch (e) {\n       debugPrint('DriveService: Error creating note - $e');\n       throw Exception('Failed to create note: $e');\n     }\n"
                },
                {
                    "date": 1744973132726,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -136,9 +136,15 @@\n \n   Future<void> deleteNote(String fileId) async {\n     debugPrint('DriveService: Deleting file $fileId');\n     await _ensureAuthenticated();\n-    await _driveApi.files.delete(fileId);\n+    try {\n+      await _driveApi.files.delete(fileId);\n+      debugPrint('DriveService: Successfully deleted file $fileId');\n+    } catch (e) {\n+      debugPrint('DriveService: Error deleting file $fileId - $e');\n+      rethrow;\n+    }\n   }\n \n   Future<String> createNote(String title, String content) async {\n     debugPrint('DriveService: Creating new note: $title');\n"
                },
                {
                    "date": 1744973271878,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -134,15 +134,17 @@\n     return utf8.decode(bytes);\n   }\n \n   Future<void> deleteNote(String fileId) async {\n-    debugPrint('DriveService: Deleting file $fileId');\n+    debugPrint('DriveService: Starting delete operation for file $fileId');\n     await _ensureAuthenticated();\n     try {\n+      debugPrint('DriveService: Attempting to delete file $fileId from Drive');\n       await _driveApi.files.delete(fileId);\n-      debugPrint('DriveService: Successfully deleted file $fileId');\n-    } catch (e) {\n+      debugPrint('DriveService: Successfully deleted file $fileId from Drive');\n+    } catch (e, stack) {\n       debugPrint('DriveService: Error deleting file $fileId - $e');\n+      debugPrint('DriveService: Stack trace: $stack');\n       rethrow;\n     }\n   }\n \n"
                },
                {
                    "date": 1744973290285,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -134,17 +134,15 @@\n     return utf8.decode(bytes);\n   }\n \n   Future<void> deleteNote(String fileId) async {\n-    debugPrint('DriveService: Starting delete operation for file $fileId');\n+    debugPrint('DriveService: Deleting file $fileId');\n     await _ensureAuthenticated();\n     try {\n-      debugPrint('DriveService: Attempting to delete file $fileId from Drive');\n       await _driveApi.files.delete(fileId);\n-      debugPrint('DriveService: Successfully deleted file $fileId from Drive');\n-    } catch (e, stack) {\n+      debugPrint('DriveService: Successfully deleted file $fileId');\n+    } catch (e) {\n       debugPrint('DriveService: Error deleting file $fileId - $e');\n-      debugPrint('DriveService: Stack trace: $stack');\n       rethrow;\n     }\n   }\n \n"
                },
                {
                    "date": 1744973318592,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -134,15 +134,17 @@\n     return utf8.decode(bytes);\n   }\n \n   Future<void> deleteNote(String fileId) async {\n-    debugPrint('DriveService: Deleting file $fileId');\n+    debugPrint('DriveService: Starting delete operation for file $fileId');\n     await _ensureAuthenticated();\n     try {\n+      debugPrint('DriveService: Attempting to delete file $fileId from Drive');\n       await _driveApi.files.delete(fileId);\n-      debugPrint('DriveService: Successfully deleted file $fileId');\n-    } catch (e) {\n+      debugPrint('DriveService: Successfully deleted file $fileId from Drive');\n+    } catch (e, stackTrace) {\n       debugPrint('DriveService: Error deleting file $fileId - $e');\n+      debugPrint('DriveService: Stack trace: $stackTrace');\n       rethrow;\n     }\n   }\n \n"
                }
            ],
            "date": 1744897345236,
            "name": "Commit-0",
            "content": "class DriveService {\r\n  static final DriveService instance = DriveService._();\r\n  DriveService._();\r\n\r\n  Future<void> ensureFolderExists() async {\r\n    // TODO: Implement folder creation\r\n  }\r\n\r\n  Future<List<DriveFile>> listRawFiles() async {\r\n    // TODO: Implement file listing\r\n    return [];\r\n  }\r\n\r\n  Future<String> fetchContent(String fileId) async {\r\n    // TODO: Implement content fetching\r\n    return '';\r\n  }\r\n\r\n  Future<void> deleteNote(String fileId) async {\r\n    // TODO: Implement note deletion\r\n  }\r\n}\r\n\r\nclass DriveFile {\r\n  final String? id;\r\n  final String? name;\r\n\r\n  DriveFile({this.id, this.name});\r\n} "
        }
    ]
}