{
    "sourceFile": "lib/features/notes/data/local_database.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1744969834918,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1744970004004,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,21 +42,17 @@\n   }\r\n \r\n   Future<void> insertNote(NoteModel note) async {\r\n     final db = await database;\r\n-    await db.insert(\r\n-      _tableName,\r\n-      {\r\n-        'id': note.id,\r\n-        'title': note.title,\r\n-        'content': note.content,\r\n-        'createdAt': note.createdAt.toIso8601String(),\r\n-        'updatedAt': note.updatedAt.toIso8601String(),\r\n-        'isSynced': 0,\r\n-        'driveId': null,\r\n-      },\r\n-      conflictAlgorithm: ConflictAlgorithm.replace,\r\n-    );\r\n+    await db.insert(_tableName, {\r\n+      'id': note.id,\r\n+      'title': note.title,\r\n+      'content': note.content,\r\n+      'createdAt': note.createdAt.toIso8601String(),\r\n+      'updatedAt': note.updatedAt.toIso8601String(),\r\n+      'isSynced': 0,\r\n+      'driveId': null,\r\n+    }, conflictAlgorithm: ConflictAlgorithm.replace);\r\n   }\r\n \r\n   Future<List<NoteModel>> getUnsyncedNotes() async {\r\n     final db = await database;\r\n@@ -80,12 +76,9 @@\n   Future<void> markNoteAsSynced(String id, String driveId) async {\r\n     final db = await database;\r\n     await db.update(\r\n       _tableName,\r\n-      {\r\n-        'isSynced': 1,\r\n-        'driveId': driveId,\r\n-      },\r\n+      {'isSynced': 1, 'driveId': driveId},\r\n       where: 'id = ?',\r\n       whereArgs: [id],\r\n     );\r\n   }\r\n@@ -106,11 +99,28 @@\n   }\r\n \r\n   Future<void> deleteNote(String id) async {\r\n     final db = await database;\r\n-    await db.delete(\r\n+    await db.delete(_tableName, where: 'id = ?', whereArgs: [id]);\r\n+  }\r\n+\r\n+  Future<NoteModel?> getNoteById(String id) async {\r\n+    final db = await database;\r\n+    final List<Map<String, dynamic>> maps = await db.query(\r\n\\ No newline at end of file\n       _tableName,\r\n       where: 'id = ?',\r\n       whereArgs: [id],\r\n+      limit: 1,\r\n     );\r\n+\r\n+    if (maps.isEmpty) return null;\r\n+    return NoteModel(\r\n+      id: maps[0]['id'],\r\n+      title: maps[0]['title'],\r\n+      content: maps[0]['content'],\r\n+      createdAt: DateTime.parse(maps[0]['createdAt']),\r\n+      updatedAt: DateTime.parse(maps[0]['updatedAt']),\r\n+      fileId: maps[0]['driveId'],\r\n+      isSynced: maps[0]['isSynced'] == 1,\r\n+    );\r\n   }\r\n-} \n+}\r\n"
                },
                {
                    "date": 1744970817381,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,13 +16,13 @@\n     return _database!;\r\n   }\r\n \r\n   Future<Database> _initDatabase() async {\r\n-    final path = await getDatabasesPath();\r\n-    final databasePath = join(path, _databaseName);\r\n+    final databasesPath = await getDatabasesPath();\r\n+    final path = join(databasesPath, _databaseName);\r\n \r\n     return await openDatabase(\r\n-      databasePath,\r\n+      path,\r\n       version: _databaseVersion,\r\n       onCreate: _onCreate,\r\n     );\r\n   }\r\n@@ -48,10 +48,10 @@\n       'title': note.title,\r\n       'content': note.content,\r\n       'createdAt': note.createdAt.toIso8601String(),\r\n       'updatedAt': note.updatedAt.toIso8601String(),\r\n-      'isSynced': 0,\r\n-      'driveId': null,\r\n+      'isSynced': note.isSynced ? 1 : 0,\r\n+      'driveId': note.fileId,\r\n     }, conflictAlgorithm: ConflictAlgorithm.replace);\r\n   }\r\n \r\n   Future<List<NoteModel>> getUnsyncedNotes() async {\r\n@@ -68,8 +68,10 @@\n         title: maps[i]['title'],\r\n         content: maps[i]['content'],\r\n         createdAt: DateTime.parse(maps[i]['createdAt']),\r\n         updatedAt: DateTime.parse(maps[i]['updatedAt']),\r\n+        fileId: maps[i]['driveId'],\r\n+        isSynced: maps[i]['isSynced'] == 1,\r\n       );\r\n     });\r\n   }\r\n \r\n@@ -93,8 +95,10 @@\n         title: maps[i]['title'],\r\n         content: maps[i]['content'],\r\n         createdAt: DateTime.parse(maps[i]['createdAt']),\r\n         updatedAt: DateTime.parse(maps[i]['updatedAt']),\r\n+        fileId: maps[i]['driveId'],\r\n+        isSynced: maps[i]['isSynced'] == 1,\r\n       );\r\n     });\r\n   }\r\n \r\n@@ -122,5 +126,5 @@\n       fileId: maps[0]['driveId'],\r\n       isSynced: maps[0]['isSynced'] == 1,\r\n     );\r\n   }\r\n-}\n\\ No newline at end of file\n+}\r\n"
                },
                {
                    "date": 1744971146181,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,8 +9,12 @@\n   static const _tableName = 'notes';\r\n \r\n   static Database? _database;\r\n \r\n+  LocalDatabase() {\r\n+    _initDatabase();\r\n+  }\r\n+\r\n   Future<Database> get database async {\r\n     if (_database != null) return _database!;\r\n     _database = await _initDatabase();\r\n     return _database!;\r\n"
                },
                {
                    "date": 1744971224843,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,18 +3,21 @@\n import 'package:sqflite/sqflite.dart';\r\n import 'package:uuid/uuid.dart';\r\n \r\n class LocalDatabase {\r\n+  static final LocalDatabase instance = LocalDatabase._internal();\r\n   static const _databaseName = 'drivenotes.db';\r\n   static const _databaseVersion = 1;\r\n   static const _tableName = 'notes';\r\n \r\n   static Database? _database;\r\n \r\n-  LocalDatabase() {\r\n-    _initDatabase();\r\n+  factory LocalDatabase() {\r\n+    return instance;\r\n   }\r\n \r\n+  LocalDatabase._internal();\r\n+\r\n   Future<Database> get database async {\r\n     if (_database != null) return _database!;\r\n     _database = await _initDatabase();\r\n     return _database!;\r\n"
                },
                {
                    "date": 1744971434035,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,7 @@\n import 'package:drivenotes/features/notes/domain/models/note_model.dart';\r\n import 'package:path/path.dart';\r\n import 'package:sqflite/sqflite.dart';\r\n-import 'package:uuid/uuid.dart';\r\n \r\n class LocalDatabase {\r\n   static final LocalDatabase instance = LocalDatabase._internal();\r\n   static const _databaseName = 'drivenotes.db';\r\n@@ -42,9 +41,9 @@\n         content TEXT NOT NULL,\r\n         createdAt TEXT NOT NULL,\r\n         updatedAt TEXT NOT NULL,\r\n         isSynced INTEGER NOT NULL DEFAULT 0,\r\n-        driveId TEXT\r\n+        fileId TEXT\r\n       )\r\n     ''');\r\n   }\r\n \r\n@@ -56,43 +55,12 @@\n       'content': note.content,\r\n       'createdAt': note.createdAt.toIso8601String(),\r\n       'updatedAt': note.updatedAt.toIso8601String(),\r\n       'isSynced': note.isSynced ? 1 : 0,\r\n-      'driveId': note.fileId,\r\n+      'fileId': note.fileId,\r\n     }, conflictAlgorithm: ConflictAlgorithm.replace);\r\n   }\r\n \r\n-  Future<List<NoteModel>> getUnsyncedNotes() async {\r\n-    final db = await database;\r\n-    final List<Map<String, dynamic>> maps = await db.query(\r\n-      _tableName,\r\n-      where: 'isSynced = ?',\r\n-      whereArgs: [0],\r\n-    );\r\n-\r\n-    return List.generate(maps.length, (i) {\r\n-      return NoteModel(\r\n-        id: maps[i]['id'],\r\n-        title: maps[i]['title'],\r\n-        content: maps[i]['content'],\r\n-        createdAt: DateTime.parse(maps[i]['createdAt']),\r\n-        updatedAt: DateTime.parse(maps[i]['updatedAt']),\r\n-        fileId: maps[i]['driveId'],\r\n-        isSynced: maps[i]['isSynced'] == 1,\r\n-      );\r\n-    });\r\n-  }\r\n-\r\n-  Future<void> markNoteAsSynced(String id, String driveId) async {\r\n-    final db = await database;\r\n-    await db.update(\r\n-      _tableName,\r\n-      {'isSynced': 1, 'driveId': driveId},\r\n-      where: 'id = ?',\r\n-      whereArgs: [id],\r\n-    );\r\n-  }\r\n-\r\n   Future<List<NoteModel>> getAllNotes() async {\r\n     final db = await database;\r\n     final List<Map<String, dynamic>> maps = await db.query(_tableName);\r\n \r\n@@ -102,19 +70,14 @@\n         title: maps[i]['title'],\r\n         content: maps[i]['content'],\r\n         createdAt: DateTime.parse(maps[i]['createdAt']),\r\n         updatedAt: DateTime.parse(maps[i]['updatedAt']),\r\n-        fileId: maps[i]['driveId'],\r\n+        fileId: maps[i]['fileId'],\r\n         isSynced: maps[i]['isSynced'] == 1,\r\n       );\r\n     });\r\n   }\r\n \r\n-  Future<void> deleteNote(String id) async {\r\n-    final db = await database;\r\n-    await db.delete(_tableName, where: 'id = ?', whereArgs: [id]);\r\n-  }\r\n-\r\n   Future<NoteModel?> getNoteById(String id) async {\r\n     final db = await database;\r\n     final List<Map<String, dynamic>> maps = await db.query(\r\n       _tableName,\r\n@@ -129,9 +92,14 @@\n       title: maps[0]['title'],\r\n       content: maps[0]['content'],\r\n       createdAt: DateTime.parse(maps[0]['createdAt']),\r\n       updatedAt: DateTime.parse(maps[0]['updatedAt']),\r\n-      fileId: maps[0]['driveId'],\r\n+      fileId: maps[0]['fileId'],\r\n       isSynced: maps[0]['isSynced'] == 1,\r\n     );\r\n   }\r\n+\r\n+  Future<void> deleteNote(String id) async {\r\n+    final db = await database;\r\n+    await db.delete(_tableName, where: 'id = ?', whereArgs: [id]);\r\n+  }\r\n }\r\n"
                },
                {
                    "date": 1744971479809,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,105 +1,137 @@\n-import 'package:drivenotes/features/notes/domain/models/note_model.dart';\r\n-import 'package:path/path.dart';\r\n-import 'package:sqflite/sqflite.dart';\r\n-\r\n-class LocalDatabase {\r\n-  static final LocalDatabase instance = LocalDatabase._internal();\r\n-  static const _databaseName = 'drivenotes.db';\r\n-  static const _databaseVersion = 1;\r\n-  static const _tableName = 'notes';\r\n-\r\n-  static Database? _database;\r\n-\r\n-  factory LocalDatabase() {\r\n-    return instance;\r\n-  }\r\n-\r\n-  LocalDatabase._internal();\r\n-\r\n-  Future<Database> get database async {\r\n-    if (_database != null) return _database!;\r\n-    _database = await _initDatabase();\r\n-    return _database!;\r\n-  }\r\n-\r\n-  Future<Database> _initDatabase() async {\r\n-    final databasesPath = await getDatabasesPath();\r\n-    final path = join(databasesPath, _databaseName);\r\n-\r\n-    return await openDatabase(\r\n-      path,\r\n-      version: _databaseVersion,\r\n-      onCreate: _onCreate,\r\n-    );\r\n-  }\r\n-\r\n-  Future<void> _onCreate(Database db, int version) async {\r\n-    await db.execute('''\r\n-      CREATE TABLE $_tableName (\r\n-        id TEXT PRIMARY KEY,\r\n-        title TEXT NOT NULL,\r\n-        content TEXT NOT NULL,\r\n-        createdAt TEXT NOT NULL,\r\n-        updatedAt TEXT NOT NULL,\r\n-        isSynced INTEGER NOT NULL DEFAULT 0,\r\n-        fileId TEXT\r\n-      )\r\n-    ''');\r\n-  }\r\n-\r\n-  Future<void> insertNote(NoteModel note) async {\r\n-    final db = await database;\r\n-    await db.insert(_tableName, {\r\n-      'id': note.id,\r\n-      'title': note.title,\r\n-      'content': note.content,\r\n-      'createdAt': note.createdAt.toIso8601String(),\r\n-      'updatedAt': note.updatedAt.toIso8601String(),\r\n-      'isSynced': note.isSynced ? 1 : 0,\r\n-      'fileId': note.fileId,\r\n-    }, conflictAlgorithm: ConflictAlgorithm.replace);\r\n-  }\r\n-\r\n-  Future<List<NoteModel>> getAllNotes() async {\r\n-    final db = await database;\r\n-    final List<Map<String, dynamic>> maps = await db.query(_tableName);\r\n-\r\n-    return List.generate(maps.length, (i) {\r\n-      return NoteModel(\r\n-        id: maps[i]['id'],\r\n-        title: maps[i]['title'],\r\n-        content: maps[i]['content'],\r\n-        createdAt: DateTime.parse(maps[i]['createdAt']),\r\n-        updatedAt: DateTime.parse(maps[i]['updatedAt']),\r\n-        fileId: maps[i]['fileId'],\r\n-        isSynced: maps[i]['isSynced'] == 1,\r\n-      );\r\n-    });\r\n-  }\r\n-\r\n-  Future<NoteModel?> getNoteById(String id) async {\r\n-    final db = await database;\r\n-    final List<Map<String, dynamic>> maps = await db.query(\r\n-      _tableName,\r\n-      where: 'id = ?',\r\n-      whereArgs: [id],\r\n-      limit: 1,\r\n-    );\r\n-\r\n-    if (maps.isEmpty) return null;\r\n-    return NoteModel(\r\n-      id: maps[0]['id'],\r\n-      title: maps[0]['title'],\r\n-      content: maps[0]['content'],\r\n-      createdAt: DateTime.parse(maps[0]['createdAt']),\r\n-      updatedAt: DateTime.parse(maps[0]['updatedAt']),\r\n-      fileId: maps[0]['fileId'],\r\n-      isSynced: maps[0]['isSynced'] == 1,\r\n-    );\r\n-  }\r\n-\r\n-  Future<void> deleteNote(String id) async {\r\n-    final db = await database;\r\n-    await db.delete(_tableName, where: 'id = ?', whereArgs: [id]);\r\n-  }\r\n-}\r\n+import 'package:drivenotes/features/notes/domain/models/note_model.dart';\n+import 'package:path/path.dart';\n+import 'package:sqflite/sqflite.dart';\n+import 'package:uuid/uuid.dart';\n+\n+class LocalDatabase {\n+  static final LocalDatabase instance = LocalDatabase._internal();\n+  static const _databaseName = 'drivenotes.db';\n+  static const _databaseVersion = 1;\n+  static const _tableName = 'notes';\n+\n+  static Database? _database;\n+\n+  factory LocalDatabase() {\n+    return instance;\n+  }\n+\n+  LocalDatabase._internal();\n+\n+  Future<Database> get database async {\n+    if (_database != null) return _database!;\n+    _database = await _initDatabase();\n+    return _database!;\n+  }\n+\n+  Future<Database> _initDatabase() async {\n+    final databasesPath = await getDatabasesPath();\n+    final path = join(databasesPath, _databaseName);\n+\n+    return await openDatabase(\n+      path,\n+      version: _databaseVersion,\n+      onCreate: _onCreate,\n+    );\n+  }\n+\n+  Future<void> _onCreate(Database db, int version) async {\n+    await db.execute('''\n+      CREATE TABLE $_tableName (\n+        id TEXT PRIMARY KEY,\n+        title TEXT NOT NULL,\n+        content TEXT NOT NULL,\n+        createdAt TEXT NOT NULL,\n+        updatedAt TEXT NOT NULL,\n+        isSynced INTEGER NOT NULL DEFAULT 0,\n+        driveId TEXT\n+      )\n+    ''');\n+  }\n+\n+  Future<void> insertNote(NoteModel note) async {\n+    final db = await database;\n+    await db.insert(_tableName, {\n+      'id': note.id,\n+      'title': note.title,\n+      'content': note.content,\n+      'createdAt': note.createdAt.toIso8601String(),\n+      'updatedAt': note.updatedAt.toIso8601String(),\n+      'isSynced': note.isSynced ? 1 : 0,\n+      'driveId': note.fileId,\n+    }, conflictAlgorithm: ConflictAlgorithm.replace);\n+  }\n+\n+  Future<List<NoteModel>> getUnsyncedNotes() async {\n+    final db = await database;\n+    final List<Map<String, dynamic>> maps = await db.query(\n+      _tableName,\n+      where: 'isSynced = ?',\n+      whereArgs: [0],\n+    );\n+\n+    return List.generate(maps.length, (i) {\n+      return NoteModel(\n+        id: maps[i]['id'],\n+        title: maps[i]['title'],\n+        content: maps[i]['content'],\n+        createdAt: DateTime.parse(maps[i]['createdAt']),\n+        updatedAt: DateTime.parse(maps[i]['updatedAt']),\n+        fileId: maps[i]['driveId'],\n+        isSynced: maps[i]['isSynced'] == 1,\n+      );\n+    });\n+  }\n+\n+  Future<void> markNoteAsSynced(String id, String driveId) async {\n+    final db = await database;\n+    await db.update(\n+      _tableName,\n+      {'isSynced': 1, 'driveId': driveId},\n+      where: 'id = ?',\n+      whereArgs: [id],\n+    );\n+  }\n+\n+  Future<List<NoteModel>> getAllNotes() async {\n+    final db = await database;\n+    final List<Map<String, dynamic>> maps = await db.query(_tableName);\n+\n+    return List.generate(maps.length, (i) {\n+      return NoteModel(\n+        id: maps[i]['id'],\n+        title: maps[i]['title'],\n+        content: maps[i]['content'],\n+        createdAt: DateTime.parse(maps[i]['createdAt']),\n+        updatedAt: DateTime.parse(maps[i]['updatedAt']),\n+        fileId: maps[i]['driveId'],\n+        isSynced: maps[i]['isSynced'] == 1,\n+      );\n+    });\n+  }\n+\n+  Future<void> deleteNote(String id) async {\n+    final db = await database;\n+    await db.delete(_tableName, where: 'id = ?', whereArgs: [id]);\n+  }\n+\n+  Future<NoteModel?> getNoteById(String id) async {\n+    final db = await database;\n+    final List<Map<String, dynamic>> maps = await db.query(\n+      _tableName,\n+      where: 'id = ?',\n+      whereArgs: [id],\n+      limit: 1,\n+    );\n+\n+    if (maps.isEmpty) return null;\n+    return NoteModel(\n+      id: maps[0]['id'],\n+      title: maps[0]['title'],\n+      content: maps[0]['content'],\n+      createdAt: DateTime.parse(maps[0]['createdAt']),\n+      updatedAt: DateTime.parse(maps[0]['updatedAt']),\n+      fileId: maps[0]['driveId'],\n+      isSynced: maps[0]['isSynced'] == 1,\n+    );\n+  }\n+}\n"
                }
            ],
            "date": 1744969834918,
            "name": "Commit-0",
            "content": "import 'package:drivenotes/features/notes/domain/models/note_model.dart';\r\nimport 'package:path/path.dart';\r\nimport 'package:sqflite/sqflite.dart';\r\nimport 'package:uuid/uuid.dart';\r\n\r\nclass LocalDatabase {\r\n  static const _databaseName = 'drivenotes.db';\r\n  static const _databaseVersion = 1;\r\n  static const _tableName = 'notes';\r\n\r\n  static Database? _database;\r\n\r\n  Future<Database> get database async {\r\n    if (_database != null) return _database!;\r\n    _database = await _initDatabase();\r\n    return _database!;\r\n  }\r\n\r\n  Future<Database> _initDatabase() async {\r\n    final path = await getDatabasesPath();\r\n    final databasePath = join(path, _databaseName);\r\n\r\n    return await openDatabase(\r\n      databasePath,\r\n      version: _databaseVersion,\r\n      onCreate: _onCreate,\r\n    );\r\n  }\r\n\r\n  Future<void> _onCreate(Database db, int version) async {\r\n    await db.execute('''\r\n      CREATE TABLE $_tableName (\r\n        id TEXT PRIMARY KEY,\r\n        title TEXT NOT NULL,\r\n        content TEXT NOT NULL,\r\n        createdAt TEXT NOT NULL,\r\n        updatedAt TEXT NOT NULL,\r\n        isSynced INTEGER NOT NULL DEFAULT 0,\r\n        driveId TEXT\r\n      )\r\n    ''');\r\n  }\r\n\r\n  Future<void> insertNote(NoteModel note) async {\r\n    final db = await database;\r\n    await db.insert(\r\n      _tableName,\r\n      {\r\n        'id': note.id,\r\n        'title': note.title,\r\n        'content': note.content,\r\n        'createdAt': note.createdAt.toIso8601String(),\r\n        'updatedAt': note.updatedAt.toIso8601String(),\r\n        'isSynced': 0,\r\n        'driveId': null,\r\n      },\r\n      conflictAlgorithm: ConflictAlgorithm.replace,\r\n    );\r\n  }\r\n\r\n  Future<List<NoteModel>> getUnsyncedNotes() async {\r\n    final db = await database;\r\n    final List<Map<String, dynamic>> maps = await db.query(\r\n      _tableName,\r\n      where: 'isSynced = ?',\r\n      whereArgs: [0],\r\n    );\r\n\r\n    return List.generate(maps.length, (i) {\r\n      return NoteModel(\r\n        id: maps[i]['id'],\r\n        title: maps[i]['title'],\r\n        content: maps[i]['content'],\r\n        createdAt: DateTime.parse(maps[i]['createdAt']),\r\n        updatedAt: DateTime.parse(maps[i]['updatedAt']),\r\n      );\r\n    });\r\n  }\r\n\r\n  Future<void> markNoteAsSynced(String id, String driveId) async {\r\n    final db = await database;\r\n    await db.update(\r\n      _tableName,\r\n      {\r\n        'isSynced': 1,\r\n        'driveId': driveId,\r\n      },\r\n      where: 'id = ?',\r\n      whereArgs: [id],\r\n    );\r\n  }\r\n\r\n  Future<List<NoteModel>> getAllNotes() async {\r\n    final db = await database;\r\n    final List<Map<String, dynamic>> maps = await db.query(_tableName);\r\n\r\n    return List.generate(maps.length, (i) {\r\n      return NoteModel(\r\n        id: maps[i]['id'],\r\n        title: maps[i]['title'],\r\n        content: maps[i]['content'],\r\n        createdAt: DateTime.parse(maps[i]['createdAt']),\r\n        updatedAt: DateTime.parse(maps[i]['updatedAt']),\r\n      );\r\n    });\r\n  }\r\n\r\n  Future<void> deleteNote(String id) async {\r\n    final db = await database;\r\n    await db.delete(\r\n      _tableName,\r\n      where: 'id = ?',\r\n      whereArgs: [id],\r\n    );\r\n  }\r\n} "
        }
    ]
}