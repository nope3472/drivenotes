{
    "sourceFile": "lib/features/notes/data/datasources/local_database.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1744972606872,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1744972612339,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,13 +18,9 @@\n   Future<Database> _initDatabase() async {\r\n     final dbPath = await getDatabasesPath();\r\n     final path = join(dbPath, 'notes.db');\r\n \r\n-    return await openDatabase(\r\n-      path,\r\n-      version: 1,\r\n-      onCreate: _createDb,\r\n-    );\r\n+    return await openDatabase(path, version: 1, onCreate: _createDb);\r\n   }\r\n \r\n   Future<void> _createDb(Database db, int version) async {\r\n     await db.execute('''\r\n@@ -41,21 +37,17 @@\n   }\r\n \r\n   Future<void> insertNote(NoteModel note) async {\r\n     final db = await database;\r\n-    await db.insert(\r\n-      'notes',\r\n-      {\r\n-        'id': note.id,\r\n-        'title': note.title,\r\n-        'content': note.content,\r\n-        'createdAt': note.createdAt.toIso8601String(),\r\n-        'updatedAt': note.updatedAt.toIso8601String(),\r\n-        'isSynced': note.isSynced ? 1 : 0,\r\n-        'driveId': note.driveId,\r\n-      },\r\n-      conflictAlgorithm: ConflictAlgorithm.replace,\r\n-    );\r\n+    await db.insert('notes', {\r\n+      'id': note.id,\r\n+      'title': note.title,\r\n+      'content': note.content,\r\n+      'createdAt': note.createdAt.toIso8601String(),\r\n+      'updatedAt': note.updatedAt.toIso8601String(),\r\n+      'isSynced': note.isSynced ? 1 : 0,\r\n+      'driveId': note.driveId,\r\n+    }, conflictAlgorithm: ConflictAlgorithm.replace);\r\n   }\r\n \r\n   Future<List<NoteModel>> getAllNotes() async {\r\n     final db = await database;\r\n@@ -98,24 +90,17 @@\n   Future<void> markNoteAsSynced(String id, String driveId) async {\r\n     final db = await database;\r\n     await db.update(\r\n       'notes',\r\n-      {\r\n-        'isSynced': 1,\r\n-        'driveId': driveId,\r\n-      },\r\n+      {'isSynced': 1, 'driveId': driveId},\r\n       where: 'id = ?',\r\n       whereArgs: [id],\r\n     );\r\n   }\r\n \r\n   Future<void> deleteNote(String id) async {\r\n     final db = await database;\r\n-    await db.delete(\r\n-      'notes',\r\n-      where: 'id = ?',\r\n-      whereArgs: [id],\r\n-    );\r\n+    await db.delete('notes', where: 'id = ?', whereArgs: [id]);\r\n   }\r\n \r\n   Future<NoteModel?> getNoteById(String id) async {\r\n     final db = await database;\r\n@@ -136,5 +121,5 @@\n       isSynced: maps[0]['isSynced'] == 1,\r\n       driveId: maps[0]['driveId'],\r\n     );\r\n   }\r\n-} \n\\ No newline at end of file\n+}\r\n"
                },
                {
                    "date": 1744972668673,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,125 +1,1 @@\n-import 'package:sqflite/sqflite.dart';\r\n-import 'package:path/path.dart';\r\n-import 'package:drivenotes/features/notes/domain/entities/note_model.dart';\r\n-import 'package:flutter/foundation.dart';\r\n-\r\n-class LocalDatabase {\r\n-  static final LocalDatabase instance = LocalDatabase._();\r\n-  LocalDatabase._();\r\n-\r\n-  static Database? _database;\r\n-\r\n-  Future<Database> get database async {\r\n-    if (_database != null) return _database!;\r\n-    _database = await _initDatabase();\r\n-    return _database!;\r\n-  }\r\n-\r\n-  Future<Database> _initDatabase() async {\r\n-    final dbPath = await getDatabasesPath();\r\n-    final path = join(dbPath, 'notes.db');\r\n-\r\n-    return await openDatabase(path, version: 1, onCreate: _createDb);\r\n-  }\r\n-\r\n-  Future<void> _createDb(Database db, int version) async {\r\n-    await db.execute('''\r\n-      CREATE TABLE notes(\r\n-        id TEXT PRIMARY KEY,\r\n-        title TEXT NOT NULL,\r\n-        content TEXT NOT NULL,\r\n-        createdAt TEXT NOT NULL,\r\n-        updatedAt TEXT NOT NULL,\r\n-        isSynced INTEGER NOT NULL DEFAULT 0,\r\n-        driveId TEXT\r\n-      )\r\n-    ''');\r\n-  }\r\n-\r\n-  Future<void> insertNote(NoteModel note) async {\r\n-    final db = await database;\r\n-    await db.insert('notes', {\r\n-      'id': note.id,\r\n-      'title': note.title,\r\n-      'content': note.content,\r\n-      'createdAt': note.createdAt.toIso8601String(),\r\n-      'updatedAt': note.updatedAt.toIso8601String(),\r\n-      'isSynced': note.isSynced ? 1 : 0,\r\n-      'driveId': note.driveId,\r\n-    }, conflictAlgorithm: ConflictAlgorithm.replace);\r\n-  }\r\n-\r\n-  Future<List<NoteModel>> getAllNotes() async {\r\n-    final db = await database;\r\n-    final List<Map<String, dynamic>> maps = await db.query('notes');\r\n-\r\n-    return List.generate(maps.length, (i) {\r\n-      return NoteModel(\r\n-        id: maps[i]['id'],\r\n-        title: maps[i]['title'],\r\n-        content: maps[i]['content'],\r\n-        createdAt: DateTime.parse(maps[i]['createdAt']),\r\n-        updatedAt: DateTime.parse(maps[i]['updatedAt']),\r\n-        isSynced: maps[i]['isSynced'] == 1,\r\n-        driveId: maps[i]['driveId'],\r\n-      );\r\n-    });\r\n-  }\r\n-\r\n-  Future<List<NoteModel>> getUnsyncedNotes() async {\r\n-    final db = await database;\r\n-    final List<Map<String, dynamic>> maps = await db.query(\r\n-      'notes',\r\n-      where: 'isSynced = ?',\r\n-      whereArgs: [0],\r\n-    );\r\n-\r\n-    return List.generate(maps.length, (i) {\r\n-      return NoteModel(\r\n-        id: maps[i]['id'],\r\n-        title: maps[i]['title'],\r\n-        content: maps[i]['content'],\r\n-        createdAt: DateTime.parse(maps[i]['createdAt']),\r\n-        updatedAt: DateTime.parse(maps[i]['updatedAt']),\r\n-        isSynced: false,\r\n-        driveId: maps[i]['driveId'],\r\n-      );\r\n-    });\r\n-  }\r\n-\r\n-  Future<void> markNoteAsSynced(String id, String driveId) async {\r\n-    final db = await database;\r\n-    await db.update(\r\n-      'notes',\r\n-      {'isSynced': 1, 'driveId': driveId},\r\n-      where: 'id = ?',\r\n-      whereArgs: [id],\r\n-    );\r\n-  }\r\n-\r\n-  Future<void> deleteNote(String id) async {\r\n-    final db = await database;\r\n-    await db.delete('notes', where: 'id = ?', whereArgs: [id]);\r\n-  }\r\n-\r\n-  Future<NoteModel?> getNoteById(String id) async {\r\n-    final db = await database;\r\n-    final List<Map<String, dynamic>> maps = await db.query(\r\n-      'notes',\r\n-      where: 'id = ?',\r\n-      whereArgs: [id],\r\n-    );\r\n-\r\n-    if (maps.isEmpty) return null;\r\n-\r\n-    return NoteModel(\r\n-      id: maps[0]['id'],\r\n-      title: maps[0]['title'],\r\n-      content: maps[0]['content'],\r\n-      createdAt: DateTime.parse(maps[0]['createdAt']),\r\n-      updatedAt: DateTime.parse(maps[0]['updatedAt']),\r\n-      isSynced: maps[0]['isSynced'] == 1,\r\n-      driveId: maps[0]['driveId'],\r\n-    );\r\n-  }\r\n-}\r\n+ \n\\ No newline at end of file\n"
                }
            ],
            "date": 1744972606872,
            "name": "Commit-0",
            "content": "import 'package:sqflite/sqflite.dart';\r\nimport 'package:path/path.dart';\r\nimport 'package:drivenotes/features/notes/domain/entities/note_model.dart';\r\nimport 'package:flutter/foundation.dart';\r\n\r\nclass LocalDatabase {\r\n  static final LocalDatabase instance = LocalDatabase._();\r\n  LocalDatabase._();\r\n\r\n  static Database? _database;\r\n\r\n  Future<Database> get database async {\r\n    if (_database != null) return _database!;\r\n    _database = await _initDatabase();\r\n    return _database!;\r\n  }\r\n\r\n  Future<Database> _initDatabase() async {\r\n    final dbPath = await getDatabasesPath();\r\n    final path = join(dbPath, 'notes.db');\r\n\r\n    return await openDatabase(\r\n      path,\r\n      version: 1,\r\n      onCreate: _createDb,\r\n    );\r\n  }\r\n\r\n  Future<void> _createDb(Database db, int version) async {\r\n    await db.execute('''\r\n      CREATE TABLE notes(\r\n        id TEXT PRIMARY KEY,\r\n        title TEXT NOT NULL,\r\n        content TEXT NOT NULL,\r\n        createdAt TEXT NOT NULL,\r\n        updatedAt TEXT NOT NULL,\r\n        isSynced INTEGER NOT NULL DEFAULT 0,\r\n        driveId TEXT\r\n      )\r\n    ''');\r\n  }\r\n\r\n  Future<void> insertNote(NoteModel note) async {\r\n    final db = await database;\r\n    await db.insert(\r\n      'notes',\r\n      {\r\n        'id': note.id,\r\n        'title': note.title,\r\n        'content': note.content,\r\n        'createdAt': note.createdAt.toIso8601String(),\r\n        'updatedAt': note.updatedAt.toIso8601String(),\r\n        'isSynced': note.isSynced ? 1 : 0,\r\n        'driveId': note.driveId,\r\n      },\r\n      conflictAlgorithm: ConflictAlgorithm.replace,\r\n    );\r\n  }\r\n\r\n  Future<List<NoteModel>> getAllNotes() async {\r\n    final db = await database;\r\n    final List<Map<String, dynamic>> maps = await db.query('notes');\r\n\r\n    return List.generate(maps.length, (i) {\r\n      return NoteModel(\r\n        id: maps[i]['id'],\r\n        title: maps[i]['title'],\r\n        content: maps[i]['content'],\r\n        createdAt: DateTime.parse(maps[i]['createdAt']),\r\n        updatedAt: DateTime.parse(maps[i]['updatedAt']),\r\n        isSynced: maps[i]['isSynced'] == 1,\r\n        driveId: maps[i]['driveId'],\r\n      );\r\n    });\r\n  }\r\n\r\n  Future<List<NoteModel>> getUnsyncedNotes() async {\r\n    final db = await database;\r\n    final List<Map<String, dynamic>> maps = await db.query(\r\n      'notes',\r\n      where: 'isSynced = ?',\r\n      whereArgs: [0],\r\n    );\r\n\r\n    return List.generate(maps.length, (i) {\r\n      return NoteModel(\r\n        id: maps[i]['id'],\r\n        title: maps[i]['title'],\r\n        content: maps[i]['content'],\r\n        createdAt: DateTime.parse(maps[i]['createdAt']),\r\n        updatedAt: DateTime.parse(maps[i]['updatedAt']),\r\n        isSynced: false,\r\n        driveId: maps[i]['driveId'],\r\n      );\r\n    });\r\n  }\r\n\r\n  Future<void> markNoteAsSynced(String id, String driveId) async {\r\n    final db = await database;\r\n    await db.update(\r\n      'notes',\r\n      {\r\n        'isSynced': 1,\r\n        'driveId': driveId,\r\n      },\r\n      where: 'id = ?',\r\n      whereArgs: [id],\r\n    );\r\n  }\r\n\r\n  Future<void> deleteNote(String id) async {\r\n    final db = await database;\r\n    await db.delete(\r\n      'notes',\r\n      where: 'id = ?',\r\n      whereArgs: [id],\r\n    );\r\n  }\r\n\r\n  Future<NoteModel?> getNoteById(String id) async {\r\n    final db = await database;\r\n    final List<Map<String, dynamic>> maps = await db.query(\r\n      'notes',\r\n      where: 'id = ?',\r\n      whereArgs: [id],\r\n    );\r\n\r\n    if (maps.isEmpty) return null;\r\n\r\n    return NoteModel(\r\n      id: maps[0]['id'],\r\n      title: maps[0]['title'],\r\n      content: maps[0]['content'],\r\n      createdAt: DateTime.parse(maps[0]['createdAt']),\r\n      updatedAt: DateTime.parse(maps[0]['updatedAt']),\r\n      isSynced: maps[0]['isSynced'] == 1,\r\n      driveId: maps[0]['driveId'],\r\n    );\r\n  }\r\n} "
        }
    ]
}