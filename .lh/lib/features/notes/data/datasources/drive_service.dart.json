{
    "sourceFile": "lib/features/notes/data/datasources/drive_service.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1744972589742,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1744972596332,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -208,5 +208,5 @@\n   final String id;\r\n   final String name;\r\n \r\n   DriveFile({required this.id, required this.name});\r\n-} \n\\ No newline at end of file\n+}\r\n"
                },
                {
                    "date": 1744972668548,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,212 +1,1 @@\n-import 'dart:convert';\r\n-import 'package:googleapis/drive/v3.dart' as drive;\r\n-import 'package:googleapis_auth/googleapis_auth.dart';\r\n-import 'package:flutter_secure_storage/flutter_secure_storage.dart';\r\n-import 'package:http/http.dart' as http;\r\n-import 'package:flutter/foundation.dart';\r\n-\r\n-class DriveService {\r\n-  static final DriveService instance = DriveService._();\r\n-  DriveService._();\r\n-\r\n-  static const _storage = FlutterSecureStorage();\r\n-  static const _scopes = [\r\n-    drive.DriveApi.driveFileScope,\r\n-    drive.DriveApi.driveReadonlyScope,\r\n-  ];\r\n-\r\n-  late drive.DriveApi _driveApi;\r\n-\r\n-  Future<void> _ensureAuthenticated() async {\r\n-    debugPrint('DriveService: Ensuring authentication...');\r\n-    final accessToken = await _storage.read(key: 'access_token');\r\n-    final refreshToken = await _storage.read(key: 'refresh_token');\r\n-    final expiryStr = await _storage.read(key: 'token_expiry');\r\n-\r\n-    if (accessToken == null || refreshToken == null || expiryStr == null) {\r\n-      debugPrint('DriveService: Missing authentication tokens');\r\n-      throw Exception('Not authenticated');\r\n-    }\r\n-\r\n-    final expiry = DateTime.parse(expiryStr).toUtc();\r\n-    if (expiry.isBefore(DateTime.now().toUtc())) {\r\n-      debugPrint('DriveService: Token expired, refreshing...');\r\n-      // Token expired, refresh it\r\n-      final client = http.Client();\r\n-      try {\r\n-        final credentials = await refreshCredentials(\r\n-          ClientId(\r\n-            '93768373598-your-client-id.apps.googleusercontent.com',\r\n-            null,\r\n-          ),\r\n-          AccessCredentials(\r\n-            AccessToken('Bearer', accessToken, expiry),\r\n-            refreshToken,\r\n-            _scopes,\r\n-          ),\r\n-          client,\r\n-        );\r\n-\r\n-        // Save new tokens\r\n-        await _storage.write(\r\n-          key: 'access_token',\r\n-          value: credentials.accessToken.data,\r\n-        );\r\n-        await _storage.write(\r\n-          key: 'token_expiry',\r\n-          value: credentials.accessToken.expiry.toUtc().toIso8601String(),\r\n-        );\r\n-\r\n-        _driveApi = drive.DriveApi(authenticatedClient(client, credentials));\r\n-        debugPrint('DriveService: Successfully refreshed token');\r\n-      } catch (e) {\r\n-        debugPrint('DriveService: Error refreshing token - $e');\r\n-        client.close();\r\n-        rethrow;\r\n-      }\r\n-    } else {\r\n-      debugPrint('DriveService: Using existing valid token');\r\n-      // Token still valid\r\n-      final credentials = AccessCredentials(\r\n-        AccessToken('Bearer', accessToken, expiry),\r\n-        refreshToken,\r\n-        _scopes,\r\n-      );\r\n-\r\n-      _driveApi = drive.DriveApi(\r\n-        authenticatedClient(http.Client(), credentials),\r\n-      );\r\n-    }\r\n-  }\r\n-\r\n-  Future<List<DriveFile>> listRawFiles() async {\r\n-    debugPrint('DriveService: Fetching .txt files from Drive...');\r\n-    await _ensureAuthenticated();\r\n-\r\n-    // Simple query to find only .txt files\r\n-    const query = \"fileExtension = 'txt' and trashed = false\";\r\n-\r\n-    debugPrint('DriveService: Using query: $query');\r\n-\r\n-    try {\r\n-      final response = await _driveApi.files.list(\r\n-        q: query,\r\n-        spaces: 'drive',\r\n-        $fields: 'files(id, name)',\r\n-        orderBy: 'modifiedTime desc',\r\n-        pageSize: 1000,\r\n-      );\r\n-\r\n-      debugPrint(\r\n-        'DriveService: Found ${response.files?.length ?? 0} .txt files',\r\n-      );\r\n-      if (response.files?.isNotEmpty == true) {\r\n-        for (var file in response.files!) {\r\n-          debugPrint('DriveService: Found file: ${file.name} - ID: ${file.id}');\r\n-        }\r\n-      }\r\n-\r\n-      return response.files\r\n-              ?.where((f) => f.id != null && f.name != null)\r\n-              .map((f) => DriveFile(id: f.id!, name: f.name!))\r\n-              .toList() ??\r\n-          [];\r\n-    } catch (e) {\r\n-      debugPrint('DriveService: Error listing files - $e');\r\n-      rethrow;\r\n-    }\r\n-  }\r\n-\r\n-  Future<String> fetchContent(String fileId) async {\r\n-    debugPrint('DriveService: Fetching content for file $fileId');\r\n-    await _ensureAuthenticated();\r\n-    final media =\r\n-        await _driveApi.files.get(\r\n-              fileId,\r\n-              downloadOptions: drive.DownloadOptions.fullMedia,\r\n-            )\r\n-            as drive.Media;\r\n-\r\n-    final bytes = await media.stream.fold<List<int>>(\r\n-      [],\r\n-      (previous, element) => previous..addAll(element),\r\n-    );\r\n-    return utf8.decode(bytes);\r\n-  }\r\n-\r\n-  Future<void> deleteNote(String fileId) async {\r\n-    debugPrint('DriveService: Deleting file $fileId');\r\n-    await _ensureAuthenticated();\r\n-    await _driveApi.files.delete(fileId);\r\n-  }\r\n-\r\n-  Future<String> createNote(String title, String content) async {\r\n-    debugPrint('DriveService: Creating new note: $title');\r\n-    await _ensureAuthenticated();\r\n-\r\n-    try {\r\n-      final file =\r\n-          drive.File()\r\n-            ..name = title.endsWith('.txt') ? title : '$title.txt'\r\n-            ..mimeType = 'text/plain';\r\n-\r\n-      final bytes = utf8.encode(content);\r\n-      final media = drive.Media(Stream.value(bytes), bytes.length);\r\n-\r\n-      final result = await _driveApi.files.create(\r\n-        file,\r\n-        uploadMedia: media,\r\n-        $fields: 'id,name',\r\n-      );\r\n-\r\n-      debugPrint(\r\n-        'DriveService: Successfully created note with ID: ${result.id}',\r\n-      );\r\n-      return result.id!;\r\n-    } catch (e) {\r\n-      debugPrint('DriveService: Error creating note - $e');\r\n-      throw Exception('Failed to create note: $e');\r\n-    }\r\n-  }\r\n-\r\n-  Future<void> updateNote({\r\n-    required String fileId,\r\n-    required String newTitle,\r\n-    required String newContent,\r\n-  }) async {\r\n-    debugPrint('DriveService: Updating note $fileId to $newTitle');\r\n-    await _ensureAuthenticated();\r\n-\r\n-    try {\r\n-      // First, update the content\r\n-      final bytes = utf8.encode(newContent);\r\n-      final media = drive.Media(Stream.value(bytes), bytes.length);\r\n-\r\n-      // Then update the metadata (including title)\r\n-      final file =\r\n-          drive.File()\r\n-            ..name = newTitle.endsWith('.txt') ? newTitle : '$newTitle.txt';\r\n-\r\n-      final result = await _driveApi.files.update(\r\n-        file,\r\n-        fileId,\r\n-        uploadMedia: media,\r\n-        $fields: 'id,name',\r\n-      );\r\n-\r\n-      debugPrint(\r\n-        'DriveService: Successfully updated note with ID: ${result.id}',\r\n-      );\r\n-    } catch (e) {\r\n-      debugPrint('DriveService: Error updating note - $e');\r\n-      throw Exception('Failed to update note: $e');\r\n-    }\r\n-  }\r\n-}\r\n-\r\n-class DriveFile {\r\n-  final String id;\r\n-  final String name;\r\n-\r\n-  DriveFile({required this.id, required this.name});\r\n-}\r\n+ \n\\ No newline at end of file\n"
                }
            ],
            "date": 1744972589742,
            "name": "Commit-0",
            "content": "import 'dart:convert';\r\nimport 'package:googleapis/drive/v3.dart' as drive;\r\nimport 'package:googleapis_auth/googleapis_auth.dart';\r\nimport 'package:flutter_secure_storage/flutter_secure_storage.dart';\r\nimport 'package:http/http.dart' as http;\r\nimport 'package:flutter/foundation.dart';\r\n\r\nclass DriveService {\r\n  static final DriveService instance = DriveService._();\r\n  DriveService._();\r\n\r\n  static const _storage = FlutterSecureStorage();\r\n  static const _scopes = [\r\n    drive.DriveApi.driveFileScope,\r\n    drive.DriveApi.driveReadonlyScope,\r\n  ];\r\n\r\n  late drive.DriveApi _driveApi;\r\n\r\n  Future<void> _ensureAuthenticated() async {\r\n    debugPrint('DriveService: Ensuring authentication...');\r\n    final accessToken = await _storage.read(key: 'access_token');\r\n    final refreshToken = await _storage.read(key: 'refresh_token');\r\n    final expiryStr = await _storage.read(key: 'token_expiry');\r\n\r\n    if (accessToken == null || refreshToken == null || expiryStr == null) {\r\n      debugPrint('DriveService: Missing authentication tokens');\r\n      throw Exception('Not authenticated');\r\n    }\r\n\r\n    final expiry = DateTime.parse(expiryStr).toUtc();\r\n    if (expiry.isBefore(DateTime.now().toUtc())) {\r\n      debugPrint('DriveService: Token expired, refreshing...');\r\n      // Token expired, refresh it\r\n      final client = http.Client();\r\n      try {\r\n        final credentials = await refreshCredentials(\r\n          ClientId(\r\n            '93768373598-your-client-id.apps.googleusercontent.com',\r\n            null,\r\n          ),\r\n          AccessCredentials(\r\n            AccessToken('Bearer', accessToken, expiry),\r\n            refreshToken,\r\n            _scopes,\r\n          ),\r\n          client,\r\n        );\r\n\r\n        // Save new tokens\r\n        await _storage.write(\r\n          key: 'access_token',\r\n          value: credentials.accessToken.data,\r\n        );\r\n        await _storage.write(\r\n          key: 'token_expiry',\r\n          value: credentials.accessToken.expiry.toUtc().toIso8601String(),\r\n        );\r\n\r\n        _driveApi = drive.DriveApi(authenticatedClient(client, credentials));\r\n        debugPrint('DriveService: Successfully refreshed token');\r\n      } catch (e) {\r\n        debugPrint('DriveService: Error refreshing token - $e');\r\n        client.close();\r\n        rethrow;\r\n      }\r\n    } else {\r\n      debugPrint('DriveService: Using existing valid token');\r\n      // Token still valid\r\n      final credentials = AccessCredentials(\r\n        AccessToken('Bearer', accessToken, expiry),\r\n        refreshToken,\r\n        _scopes,\r\n      );\r\n\r\n      _driveApi = drive.DriveApi(\r\n        authenticatedClient(http.Client(), credentials),\r\n      );\r\n    }\r\n  }\r\n\r\n  Future<List<DriveFile>> listRawFiles() async {\r\n    debugPrint('DriveService: Fetching .txt files from Drive...');\r\n    await _ensureAuthenticated();\r\n\r\n    // Simple query to find only .txt files\r\n    const query = \"fileExtension = 'txt' and trashed = false\";\r\n\r\n    debugPrint('DriveService: Using query: $query');\r\n\r\n    try {\r\n      final response = await _driveApi.files.list(\r\n        q: query,\r\n        spaces: 'drive',\r\n        $fields: 'files(id, name)',\r\n        orderBy: 'modifiedTime desc',\r\n        pageSize: 1000,\r\n      );\r\n\r\n      debugPrint(\r\n        'DriveService: Found ${response.files?.length ?? 0} .txt files',\r\n      );\r\n      if (response.files?.isNotEmpty == true) {\r\n        for (var file in response.files!) {\r\n          debugPrint('DriveService: Found file: ${file.name} - ID: ${file.id}');\r\n        }\r\n      }\r\n\r\n      return response.files\r\n              ?.where((f) => f.id != null && f.name != null)\r\n              .map((f) => DriveFile(id: f.id!, name: f.name!))\r\n              .toList() ??\r\n          [];\r\n    } catch (e) {\r\n      debugPrint('DriveService: Error listing files - $e');\r\n      rethrow;\r\n    }\r\n  }\r\n\r\n  Future<String> fetchContent(String fileId) async {\r\n    debugPrint('DriveService: Fetching content for file $fileId');\r\n    await _ensureAuthenticated();\r\n    final media =\r\n        await _driveApi.files.get(\r\n              fileId,\r\n              downloadOptions: drive.DownloadOptions.fullMedia,\r\n            )\r\n            as drive.Media;\r\n\r\n    final bytes = await media.stream.fold<List<int>>(\r\n      [],\r\n      (previous, element) => previous..addAll(element),\r\n    );\r\n    return utf8.decode(bytes);\r\n  }\r\n\r\n  Future<void> deleteNote(String fileId) async {\r\n    debugPrint('DriveService: Deleting file $fileId');\r\n    await _ensureAuthenticated();\r\n    await _driveApi.files.delete(fileId);\r\n  }\r\n\r\n  Future<String> createNote(String title, String content) async {\r\n    debugPrint('DriveService: Creating new note: $title');\r\n    await _ensureAuthenticated();\r\n\r\n    try {\r\n      final file =\r\n          drive.File()\r\n            ..name = title.endsWith('.txt') ? title : '$title.txt'\r\n            ..mimeType = 'text/plain';\r\n\r\n      final bytes = utf8.encode(content);\r\n      final media = drive.Media(Stream.value(bytes), bytes.length);\r\n\r\n      final result = await _driveApi.files.create(\r\n        file,\r\n        uploadMedia: media,\r\n        $fields: 'id,name',\r\n      );\r\n\r\n      debugPrint(\r\n        'DriveService: Successfully created note with ID: ${result.id}',\r\n      );\r\n      return result.id!;\r\n    } catch (e) {\r\n      debugPrint('DriveService: Error creating note - $e');\r\n      throw Exception('Failed to create note: $e');\r\n    }\r\n  }\r\n\r\n  Future<void> updateNote({\r\n    required String fileId,\r\n    required String newTitle,\r\n    required String newContent,\r\n  }) async {\r\n    debugPrint('DriveService: Updating note $fileId to $newTitle');\r\n    await _ensureAuthenticated();\r\n\r\n    try {\r\n      // First, update the content\r\n      final bytes = utf8.encode(newContent);\r\n      final media = drive.Media(Stream.value(bytes), bytes.length);\r\n\r\n      // Then update the metadata (including title)\r\n      final file =\r\n          drive.File()\r\n            ..name = newTitle.endsWith('.txt') ? newTitle : '$newTitle.txt';\r\n\r\n      final result = await _driveApi.files.update(\r\n        file,\r\n        fileId,\r\n        uploadMedia: media,\r\n        $fields: 'id,name',\r\n      );\r\n\r\n      debugPrint(\r\n        'DriveService: Successfully updated note with ID: ${result.id}',\r\n      );\r\n    } catch (e) {\r\n      debugPrint('DriveService: Error updating note - $e');\r\n      throw Exception('Failed to update note: $e');\r\n    }\r\n  }\r\n}\r\n\r\nclass DriveFile {\r\n  final String id;\r\n  final String name;\r\n\r\n  DriveFile({required this.id, required this.name});\r\n} "
        }
    ]
}