{
    "sourceFile": "lib/features/notes/presentation/pages/notes_list_page.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 30,
            "patches": [
                {
                    "date": 1744898253429,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1744899060885,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,12 +4,20 @@\n import 'package:drivenotes/notes_controller.dart';\r\n import 'package:flutter/material.dart';\r\n import 'package:flutter_riverpod/flutter_riverpod.dart';\r\n import 'package:go_router/go_router.dart';\r\n+import 'package:url_launcher/url_launcher.dart';\r\n \r\n class NotesListPage extends ConsumerWidget {\r\n   const NotesListPage({super.key});\r\n \r\n+  Future<void> _openDriveFolder() async {\r\n+    const url = 'https://drive.google.com';\r\n+    if (await canLaunchUrl(Uri.parse(url))) {\r\n+      await launchUrl(Uri.parse(url));\r\n+    }\r\n+  }\r\n+\r\n   @override\r\n   Widget build(BuildContext context, WidgetRef ref) {\r\n     final notesAsync = ref.watch(notesControllerProvider);\r\n \r\n@@ -17,92 +25,115 @@\n       appBar: AppBar(\r\n         title: const Text('My Notes'),\r\n         actions: [\r\n           IconButton(\r\n+            icon: const Icon(Icons.folder),\r\n+            onPressed: _openDriveFolder,\r\n+            tooltip: 'Open in Google Drive',\r\n+          ),\r\n+          IconButton(\r\n             icon: const Icon(Icons.logout),\r\n             onPressed: () => context.go('/login'),\r\n           ),\r\n         ],\r\n       ),\r\n       body: notesAsync.when(\r\n-        data: (notes) => notes.isEmpty\r\n-            ? const Center(child: Text('No notes yet'))\r\n-            : ListView.builder(\r\n-                itemCount: notes.length,\r\n-                itemBuilder: (context, index) {\r\n-                  final note = notes[index];\r\n-                  return Dismissible(\r\n-                    key: ValueKey(note.id),\r\n-                    direction: DismissDirection.endToStart,\r\n-                    background: Container(\r\n-                      color: Colors.red,\r\n-                      alignment: Alignment.centerRight,\r\n-                      padding: const EdgeInsets.only(right: 16),\r\n-                      child: const Icon(Icons.delete, color: Colors.white),\r\n-                    ),\r\n-                    confirmDismiss: (_) => showDialog(\r\n-                      context: context,\r\n-                      builder: (context) => AlertDialog(\r\n-                        title: const Text('Delete Note'),\r\n-                        content: const Text('Are you sure?'),\r\n-                        actions: [\r\n-                          TextButton(\r\n-                            onPressed: () => Navigator.pop(context, false),\r\n-                            child: const Text('CANCEL'),\r\n+        data:\r\n+            (notes) =>\r\n+                notes.isEmpty\r\n+                    ? const Center(child: Text('No notes yet'))\r\n+                    : ListView.builder(\r\n+                      itemCount: notes.length,\r\n+                      itemBuilder: (context, index) {\r\n+                        final note = notes[index];\r\n+                        return Dismissible(\r\n+                          key: ValueKey(note.id),\r\n+                          direction: DismissDirection.endToStart,\r\n+                          background: Container(\r\n+                            color: Colors.red,\r\n+                            alignment: Alignment.centerRight,\r\n+                            padding: const EdgeInsets.only(right: 16),\r\n+                            child: const Icon(\r\n+                              Icons.delete,\r\n+                              color: Colors.white,\r\n+                            ),\r\n                           ),\r\n-                          TextButton(\r\n-                            onPressed: () => Navigator.pop(context, true),\r\n-                            child: const Text('DELETE'),\r\n+                          confirmDismiss:\r\n+                              (_) => showDialog(\r\n+                                context: context,\r\n+                                builder:\r\n+                                    (context) => AlertDialog(\r\n+                                      title: const Text('Delete Note'),\r\n+                                      content: const Text('Are you sure?'),\r\n+                                      actions: [\r\n+                                        TextButton(\r\n+                                          onPressed:\r\n+                                              () =>\r\n+                                                  Navigator.pop(context, false),\r\n+                                          child: const Text('CANCEL'),\r\n+                                        ),\r\n+                                        TextButton(\r\n+                                          onPressed:\r\n+                                              () =>\r\n+                                                  Navigator.pop(context, true),\r\n+                                          child: const Text('DELETE'),\r\n+                                        ),\r\n+                                      ],\r\n+                                    ),\r\n+                              ),\r\n+                          onDismissed: (_) {\r\n+                            ref\r\n+                                .read(notesControllerProvider.notifier)\r\n+                                .delete(note.id);\r\n+                            ScaffoldMessenger.of(context).showSnackBar(\r\n+                              SnackBar(content: Text('Deleted ${note.title}')),\r\n+                            );\r\n\\ No newline at end of file\n+                          },\r\n+                          child: ListTile(\r\n+                            title: Text(note.title),\r\n+                            subtitle: Text(\r\n+                              note.content,\r\n+                              maxLines: 2,\r\n+                              overflow: TextOverflow.ellipsis,\r\n+                            ),\r\n+                            onTap:\r\n+                                () => Navigator.push(\r\n+                                  context,\r\n+                                  MaterialPageRoute(\r\n+                                    builder:\r\n+                                        (_) =>\r\n+                                            NoteEditorPage(originalNote: note),\r\n+                                  ),\r\n+                                ),\r\n                           ),\r\n-                        ],\r\n-                      ),\r\n+                        );\r\n+                      },\r\n                     ),\r\n-                    onDismissed: (_) {\r\n-                      ref.read(notesControllerProvider.notifier).delete(note.id);\r\n-                      ScaffoldMessenger.of(context).showSnackBar(\r\n-                        SnackBar(content: Text('Deleted ${note.title}')),\r\n-                      );\r\n-                    },\r\n-                    child: ListTile(\r\n-                      title: Text(note.title),\r\n-                      subtitle: Text(\r\n-                        note.content,\r\n-                        maxLines: 2,\r\n-                        overflow: TextOverflow.ellipsis,\r\n-                      ),\r\n-                      onTap: () => Navigator.push(\r\n-                        context,\r\n-                        MaterialPageRoute(\r\n-                          builder: (_) => NoteEditorPage(originalNote: note),\r\n-                        ),\r\n-                      ),\r\n-                    ),\r\n-                  );\r\n-                },\r\n+        error:\r\n+            (error, _) => Center(\r\n+              child: Column(\r\n+                mainAxisSize: MainAxisSize.min,\r\n+                children: [\r\n+                  const Icon(Icons.error_outline, size: 48, color: Colors.red),\r\n+                  const SizedBox(height: 16),\r\n+                  Text('Error: $error'),\r\n+                  const SizedBox(height: 16),\r\n+                  ElevatedButton(\r\n+                    onPressed: () => ref.refresh(notesControllerProvider),\r\n+                    child: const Text('RETRY'),\r\n+                  ),\r\n+                ],\r\n               ),\r\n-        error: (error, _) => Center(\r\n-          child: Column(\r\n-            mainAxisSize: MainAxisSize.min,\r\n-            children: [\r\n-              const Icon(Icons.error_outline, size: 48, color: Colors.red),\r\n-              const SizedBox(height: 16),\r\n-              Text('Error: $error'),\r\n-              const SizedBox(height: 16),\r\n-              ElevatedButton(\r\n-                onPressed: () => ref.refresh(notesControllerProvider),\r\n-                child: const Text('RETRY'),\r\n-              ),\r\n-            ],\r\n-          ),\r\n-        ),\r\n+            ),\r\n         loading: () => const Center(child: CircularProgressIndicator()),\r\n       ),\r\n       floatingActionButton: FloatingActionButton(\r\n-        onPressed: () => Navigator.push(\r\n-          context,\r\n-          MaterialPageRoute(builder: (_) => const NoteEditorPage()),\r\n-        ),\r\n+        onPressed:\r\n+            () => Navigator.push(\r\n+              context,\r\n+              MaterialPageRoute(builder: (_) => const NoteEditorPage()),\r\n+            ),\r\n         child: const Icon(Icons.add),\r\n       ),\r\n     );\r\n   }\r\n-} \n+}\r\n"
                },
                {
                    "date": 1744899319495,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,8 +25,13 @@\n       appBar: AppBar(\r\n         title: const Text('My Notes'),\r\n         actions: [\r\n           IconButton(\r\n+            icon: const Icon(Icons.refresh),\r\n+            onPressed: () => ref.refresh(notesControllerProvider),\r\n+            tooltip: 'Refresh notes',\r\n+          ),\r\n+          IconButton(\r\n             icon: const Icon(Icons.folder),\r\n             onPressed: _openDriveFolder,\r\n             tooltip: 'Open in Google Drive',\r\n           ),\r\n@@ -36,104 +41,94 @@\n           ),\r\n         ],\r\n       ),\r\n       body: notesAsync.when(\r\n-        data:\r\n-            (notes) =>\r\n-                notes.isEmpty\r\n-                    ? const Center(child: Text('No notes yet'))\r\n-                    : ListView.builder(\r\n-                      itemCount: notes.length,\r\n-                      itemBuilder: (context, index) {\r\n-                        final note = notes[index];\r\n-                        return Dismissible(\r\n-                          key: ValueKey(note.id),\r\n-                          direction: DismissDirection.endToStart,\r\n-                          background: Container(\r\n-                            color: Colors.red,\r\n-                            alignment: Alignment.centerRight,\r\n-                            padding: const EdgeInsets.only(right: 16),\r\n-                            child: const Icon(\r\n-                              Icons.delete,\r\n-                              color: Colors.white,\r\n+        data: (notes) => notes.isEmpty\r\n+            ? const Center(child: Text('No notes yet'))\r\n+            : RefreshIndicator(\r\n+                onRefresh: () => ref.refresh(notesControllerProvider.future),\r\n+                child: ListView.builder(\r\n+                  itemCount: notes.length,\r\n+                  itemBuilder: (context, index) {\r\n+                    final note = notes[index];\r\n+                    return Dismissible(\r\n+                      key: ValueKey(note.id),\r\n+                      direction: DismissDirection.endToStart,\r\n+                      background: Container(\r\n+                        color: Colors.red,\r\n+                        alignment: Alignment.centerRight,\r\n+                        padding: const EdgeInsets.only(right: 16),\r\n+                        child: const Icon(\r\n+                          Icons.delete,\r\n+                          color: Colors.white,\r\n+                        ),\r\n+                      ),\r\n+                      confirmDismiss: (_) => showDialog(\r\n+                        context: context,\r\n+                        builder: (context) => AlertDialog(\r\n+                          title: const Text('Delete Note'),\r\n+                          content: const Text('Are you sure?'),\r\n+                          actions: [\r\n+                            TextButton(\r\n+                              onPressed: () => Navigator.pop(context, false),\r\n+                              child: const Text('CANCEL'),\r\n                             ),\r\n-                          ),\r\n-                          confirmDismiss:\r\n-                              (_) => showDialog(\r\n-                                context: context,\r\n-                                builder:\r\n-                                    (context) => AlertDialog(\r\n-                                      title: const Text('Delete Note'),\r\n-                                      content: const Text('Are you sure?'),\r\n-                                      actions: [\r\n-                                        TextButton(\r\n-                                          onPressed:\r\n-                                              () =>\r\n-                                                  Navigator.pop(context, false),\r\n-                                          child: const Text('CANCEL'),\r\n-                                        ),\r\n-                                        TextButton(\r\n-                                          onPressed:\r\n-                                              () =>\r\n-                                                  Navigator.pop(context, true),\r\n-                                          child: const Text('DELETE'),\r\n-                                        ),\r\n-                                      ],\r\n-                                    ),\r\n-                              ),\r\n-                          onDismissed: (_) {\r\n-                            ref\r\n-                                .read(notesControllerProvider.notifier)\r\n-                                .delete(note.id);\r\n-                            ScaffoldMessenger.of(context).showSnackBar(\r\n-                              SnackBar(content: Text('Deleted ${note.title}')),\r\n-                            );\r\n-                          },\r\n-                          child: ListTile(\r\n-                            title: Text(note.title),\r\n-                            subtitle: Text(\r\n-                              note.content,\r\n-                              maxLines: 2,\r\n-                              overflow: TextOverflow.ellipsis,\r\n+                            TextButton(\r\n+                              onPressed: () => Navigator.pop(context, true),\r\n+                              child: const Text('DELETE'),\r\n                             ),\r\n-                            onTap:\r\n-                                () => Navigator.push(\r\n-                                  context,\r\n-                                  MaterialPageRoute(\r\n-                                    builder:\r\n-                                        (_) =>\r\n-                                            NoteEditorPage(originalNote: note),\r\n-                                  ),\r\n-                                ),\r\n-                          ),\r\n\\ No newline at end of file\n+                          ],\r\n+                        ),\r\n+                      ),\r\n+                      onDismissed: (_) {\r\n+                        ref\r\n+                            .read(notesControllerProvider.notifier)\r\n+                            .delete(note.id);\r\n+                        ScaffoldMessenger.of(context).showSnackBar(\r\n+                          SnackBar(content: Text('Deleted ${note.title}')),\r\n                         );\r\n                       },\r\n-                    ),\r\n-        error:\r\n-            (error, _) => Center(\r\n-              child: Column(\r\n-                mainAxisSize: MainAxisSize.min,\r\n-                children: [\r\n-                  const Icon(Icons.error_outline, size: 48, color: Colors.red),\r\n-                  const SizedBox(height: 16),\r\n-                  Text('Error: $error'),\r\n-                  const SizedBox(height: 16),\r\n-                  ElevatedButton(\r\n-                    onPressed: () => ref.refresh(notesControllerProvider),\r\n-                    child: const Text('RETRY'),\r\n-                  ),\r\n-                ],\r\n+                      child: ListTile(\r\n+                        title: Text(note.title),\r\n+                        subtitle: Text(\r\n+                          note.content,\r\n+                          maxLines: 2,\r\n+                          overflow: TextOverflow.ellipsis,\r\n+                        ),\r\n+                        onTap: () => Navigator.push(\r\n+                          context,\r\n+                          MaterialPageRoute(\r\n+                            builder: (_) => NoteEditorPage(originalNote: note),\r\n+                          ),\r\n+                        ),\r\n+                      ),\r\n+                    );\r\n+                  },\r\n+                ),\r\n               ),\r\n-            ),\r\n+        error: (error, _) => Center(\r\n+          child: Column(\r\n+            mainAxisSize: MainAxisSize.min,\r\n+            children: [\r\n+              const Icon(Icons.error_outline, size: 48, color: Colors.red),\r\n+              const SizedBox(height: 16),\r\n+              Text('Error: $error'),\r\n+              const SizedBox(height: 16),\r\n+              ElevatedButton(\r\n+                onPressed: () => ref.refresh(notesControllerProvider),\r\n+                child: const Text('RETRY'),\r\n+              ),\r\n+            ],\r\n+          ),\r\n+        ),\r\n         loading: () => const Center(child: CircularProgressIndicator()),\r\n       ),\r\n       floatingActionButton: FloatingActionButton(\r\n-        onPressed:\r\n-            () => Navigator.push(\r\n-              context,\r\n-              MaterialPageRoute(builder: (_) => const NoteEditorPage()),\r\n-            ),\r\n+        onPressed: () => Navigator.push(\r\n+          context,\r\n+          MaterialPageRoute(builder: (_) => const NoteEditorPage()),\r\n+        ),\r\n         child: const Icon(Icons.add),\r\n       ),\r\n     );\r\n   }\r\n-}\n+}\r\n"
                },
                {
                    "date": 1744912893145,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,8 +16,52 @@\n       await launchUrl(Uri.parse(url));\r\n     }\r\n   }\r\n \r\n+  Future<bool?> _confirmDelete(BuildContext context, String noteTitle) {\r\n+    return showDialog<bool>(\r\n+      context: context,\r\n+      builder: (context) => AlertDialog(\r\n+        title: const Text('Delete Note'),\r\n+        content: Text('Are you sure you want to delete \"$noteTitle\"?'),\r\n+        actions: [\r\n+          TextButton(\r\n+            onPressed: () => Navigator.pop(context, false),\r\n+            child: const Text('CANCEL'),\r\n+          ),\r\n+          TextButton(\r\n+            style: TextButton.styleFrom(foregroundColor: Colors.red),\r\n+            onPressed: () => Navigator.pop(context, true),\r\n+            child: const Text('DELETE'),\r\n+          ),\r\n+        ],\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  Future<void> _deleteNote(BuildContext context, WidgetRef ref, NoteModel note) async {\r\n+    final shouldDelete = await _confirmDelete(context, note.title);\r\n+    if (shouldDelete == true) {\r\n+      await ref.read(notesControllerProvider.notifier).delete(note.id);\r\n+      if (context.mounted) {\r\n+        ScaffoldMessenger.of(context).showSnackBar(\r\n+          SnackBar(\r\n+            content: Text('Deleted ${note.title}'),\r\n+            action: SnackBarAction(\r\n+              label: 'UNDO',\r\n+              onPressed: () {\r\n+                // TODO: Implement undo functionality\r\n+                ScaffoldMessenger.of(context).showSnackBar(\r\n+                  const SnackBar(content: Text('Undo is not implemented yet')),\r\n+                );\r\n+              },\r\n+            ),\r\n+          ),\r\n+        );\r\n+      }\r\n+    }\r\n+  }\r\n+\r\n   @override\r\n   Widget build(BuildContext context, WidgetRef ref) {\r\n     final notesAsync = ref.watch(notesControllerProvider);\r\n \r\n@@ -61,33 +105,10 @@\n                           Icons.delete,\r\n                           color: Colors.white,\r\n                         ),\r\n                       ),\r\n-                      confirmDismiss: (_) => showDialog(\r\n-                        context: context,\r\n-                        builder: (context) => AlertDialog(\r\n-                          title: const Text('Delete Note'),\r\n-                          content: const Text('Are you sure?'),\r\n-                          actions: [\r\n-                            TextButton(\r\n-                              onPressed: () => Navigator.pop(context, false),\r\n-                              child: const Text('CANCEL'),\r\n-                            ),\r\n-                            TextButton(\r\n-                              onPressed: () => Navigator.pop(context, true),\r\n-                              child: const Text('DELETE'),\r\n-                            ),\r\n-                          ],\r\n-                        ),\r\n-                      ),\r\n-                      onDismissed: (_) {\r\n-                        ref\r\n-                            .read(notesControllerProvider.notifier)\r\n-                            .delete(note.id);\r\n-                        ScaffoldMessenger.of(context).showSnackBar(\r\n-                          SnackBar(content: Text('Deleted ${note.title}')),\r\n-                        );\r\n-                      },\r\n+                      confirmDismiss: (_) => _confirmDelete(context, note.title),\r\n+                      onDismissed: (_) => _deleteNote(context, ref, note),\r\n                       child: ListTile(\r\n                         title: Text(note.title),\r\n                         subtitle: Text(\r\n                           note.content,\r\n@@ -99,8 +120,9 @@\n                           MaterialPageRoute(\r\n                             builder: (_) => NoteEditorPage(originalNote: note),\r\n                           ),\r\n                         ),\r\n+                        onLongPress: () => _deleteNote(context, ref, note),\r\n                       ),\r\n                     );\r\n                   },\r\n                 ),\r\n"
                },
                {
                    "date": 1744913044568,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,41 +5,63 @@\n import 'package:flutter/material.dart';\r\n import 'package:flutter_riverpod/flutter_riverpod.dart';\r\n import 'package:go_router/go_router.dart';\r\n import 'package:url_launcher/url_launcher.dart';\r\n+import 'package:drivenotes/services/drive_service.dart';\r\n \r\n class NotesListPage extends ConsumerWidget {\r\n   const NotesListPage({super.key});\r\n \r\n   Future<void> _openDriveFolder() async {\r\n-    const url = 'https://drive.google.com';\r\n-    if (await canLaunchUrl(Uri.parse(url))) {\r\n-      await launchUrl(Uri.parse(url));\r\n+    try {\r\n+      final folderId = await DriveService.instance.getFolderId();\r\n+      if (folderId == null) {\r\n+        throw Exception('Could not find or create DriveNotes folder');\r\n+      }\r\n+      \r\n+      final url = 'https://drive.google.com/drive/folders/$folderId';\r\n+      if (await canLaunchUrl(Uri.parse(url))) {\r\n+        await launchUrl(Uri.parse(url));\r\n+      } else {\r\n+        throw Exception('Could not open folder');\r\n+      }\r\n+    } catch (e) {\r\n+      debugPrint('Error opening folder: $e');\r\n+      if (context.mounted) {\r\n+        ScaffoldMessenger.of(context).showSnackBar(\r\n+          SnackBar(content: Text('Error opening folder: $e')),\r\n+        );\r\n+      }\r\n     }\r\n   }\r\n \r\n   Future<bool?> _confirmDelete(BuildContext context, String noteTitle) {\r\n     return showDialog<bool>(\r\n       context: context,\r\n-      builder: (context) => AlertDialog(\r\n-        title: const Text('Delete Note'),\r\n-        content: Text('Are you sure you want to delete \"$noteTitle\"?'),\r\n-        actions: [\r\n-          TextButton(\r\n-            onPressed: () => Navigator.pop(context, false),\r\n-            child: const Text('CANCEL'),\r\n+      builder:\r\n+          (context) => AlertDialog(\r\n+            title: const Text('Delete Note'),\r\n+            content: Text('Are you sure you want to delete \"$noteTitle\"?'),\r\n+            actions: [\r\n+              TextButton(\r\n+                onPressed: () => Navigator.pop(context, false),\r\n+                child: const Text('CANCEL'),\r\n+              ),\r\n+              TextButton(\r\n+                style: TextButton.styleFrom(foregroundColor: Colors.red),\r\n+                onPressed: () => Navigator.pop(context, true),\r\n+                child: const Text('DELETE'),\r\n+              ),\r\n+            ],\r\n           ),\r\n-          TextButton(\r\n-            style: TextButton.styleFrom(foregroundColor: Colors.red),\r\n-            onPressed: () => Navigator.pop(context, true),\r\n-            child: const Text('DELETE'),\r\n-          ),\r\n-        ],\r\n-      ),\r\n     );\r\n   }\r\n \r\n-  Future<void> _deleteNote(BuildContext context, WidgetRef ref, NoteModel note) async {\r\n+  Future<void> _deleteNote(\r\n+    BuildContext context,\r\n+    WidgetRef ref,\r\n+    NoteModel note,\r\n+  ) async {\r\n     final shouldDelete = await _confirmDelete(context, note.title);\r\n     if (shouldDelete == true) {\r\n       await ref.read(notesControllerProvider.notifier).delete(note.id);\r\n       if (context.mounted) {\r\n@@ -85,71 +107,82 @@\n           ),\r\n         ],\r\n       ),\r\n       body: notesAsync.when(\r\n-        data: (notes) => notes.isEmpty\r\n-            ? const Center(child: Text('No notes yet'))\r\n-            : RefreshIndicator(\r\n-                onRefresh: () => ref.refresh(notesControllerProvider.future),\r\n-                child: ListView.builder(\r\n-                  itemCount: notes.length,\r\n-                  itemBuilder: (context, index) {\r\n-                    final note = notes[index];\r\n-                    return Dismissible(\r\n-                      key: ValueKey(note.id),\r\n-                      direction: DismissDirection.endToStart,\r\n-                      background: Container(\r\n-                        color: Colors.red,\r\n-                        alignment: Alignment.centerRight,\r\n-                        padding: const EdgeInsets.only(right: 16),\r\n-                        child: const Icon(\r\n-                          Icons.delete,\r\n-                          color: Colors.white,\r\n-                        ),\r\n+        data:\r\n+            (notes) =>\r\n+                notes.isEmpty\r\n+                    ? const Center(child: Text('No notes yet'))\r\n+                    : RefreshIndicator(\r\n+                      onRefresh:\r\n+                          () => ref.refresh(notesControllerProvider.future),\r\n+                      child: ListView.builder(\r\n+                        itemCount: notes.length,\r\n+                        itemBuilder: (context, index) {\r\n+                          final note = notes[index];\r\n+                          return Dismissible(\r\n+                            key: ValueKey(note.id),\r\n+                            direction: DismissDirection.endToStart,\r\n+                            background: Container(\r\n+                              color: Colors.red,\r\n+                              alignment: Alignment.centerRight,\r\n+                              padding: const EdgeInsets.only(right: 16),\r\n+                              child: const Icon(\r\n+                                Icons.delete,\r\n+                                color: Colors.white,\r\n+                              ),\r\n+                            ),\r\n+                            confirmDismiss:\r\n+                                (_) => _confirmDelete(context, note.title),\r\n+                            onDismissed: (_) => _deleteNote(context, ref, note),\r\n+                            child: ListTile(\r\n+                              title: Text(note.title),\r\n+                              subtitle: Text(\r\n+                                note.content,\r\n+                                maxLines: 2,\r\n+                                overflow: TextOverflow.ellipsis,\r\n+                              ),\r\n+                              onTap:\r\n+                                  () => Navigator.push(\r\n+                                    context,\r\n+                                    MaterialPageRoute(\r\n+                                      builder:\r\n+                                          (_) => NoteEditorPage(\r\n+                                            originalNote: note,\r\n+                                          ),\r\n+                                    ),\r\n+                                  ),\r\n+                              onLongPress:\r\n+                                  () => _deleteNote(context, ref, note),\r\n+                            ),\r\n+                          );\r\n+                        },\r\n                       ),\r\n-                      confirmDismiss: (_) => _confirmDelete(context, note.title),\r\n-                      onDismissed: (_) => _deleteNote(context, ref, note),\r\n-                      child: ListTile(\r\n-                        title: Text(note.title),\r\n-                        subtitle: Text(\r\n-                          note.content,\r\n-                          maxLines: 2,\r\n-                          overflow: TextOverflow.ellipsis,\r\n-                        ),\r\n-                        onTap: () => Navigator.push(\r\n-                          context,\r\n-                          MaterialPageRoute(\r\n-                            builder: (_) => NoteEditorPage(originalNote: note),\r\n-                          ),\r\n-                        ),\r\n-                        onLongPress: () => _deleteNote(context, ref, note),\r\n-                      ),\r\n-                    );\r\n-                  },\r\n-                ),\r\n+                    ),\r\n+        error:\r\n+            (error, _) => Center(\r\n+              child: Column(\r\n+                mainAxisSize: MainAxisSize.min,\r\n+                children: [\r\n+                  const Icon(Icons.error_outline, size: 48, color: Colors.red),\r\n+                  const SizedBox(height: 16),\r\n+                  Text('Error: $error'),\r\n+                  const SizedBox(height: 16),\r\n+                  ElevatedButton(\r\n+                    onPressed: () => ref.refresh(notesControllerProvider),\r\n+                    child: const Text('RETRY'),\r\n+                  ),\r\n+                ],\r\n               ),\r\n-        error: (error, _) => Center(\r\n-          child: Column(\r\n-            mainAxisSize: MainAxisSize.min,\r\n-            children: [\r\n-              const Icon(Icons.error_outline, size: 48, color: Colors.red),\r\n-              const SizedBox(height: 16),\r\n-              Text('Error: $error'),\r\n-              const SizedBox(height: 16),\r\n-              ElevatedButton(\r\n-                onPressed: () => ref.refresh(notesControllerProvider),\r\n-                child: const Text('RETRY'),\r\n-              ),\r\n-            ],\r\n-          ),\r\n-        ),\r\n+            ),\r\n         loading: () => const Center(child: CircularProgressIndicator()),\r\n       ),\r\n       floatingActionButton: FloatingActionButton(\r\n-        onPressed: () => Navigator.push(\r\n-          context,\r\n-          MaterialPageRoute(builder: (_) => const NoteEditorPage()),\r\n-        ),\r\n+        onPressed:\r\n+            () => Navigator.push(\r\n+              context,\r\n+              MaterialPageRoute(builder: (_) => const NoteEditorPage()),\r\n+            ),\r\n         child: const Icon(Icons.add),\r\n       ),\r\n     );\r\n   }\r\n"
                },
                {
                    "date": 1744913063741,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,14 +5,14 @@\n import 'package:flutter/material.dart';\r\n import 'package:flutter_riverpod/flutter_riverpod.dart';\r\n import 'package:go_router/go_router.dart';\r\n import 'package:url_launcher/url_launcher.dart';\r\n-import 'package:drivenotes/services/drive_service.dart';\r\n+import 'package:drivenotes/features/notes/data/drive_service.dart';\r\n \r\n class NotesListPage extends ConsumerWidget {\r\n   const NotesListPage({super.key});\r\n \r\n-  Future<void> _openDriveFolder() async {\r\n+  Future<void> _openDriveFolder(BuildContext context) async {\r\n     try {\r\n       final folderId = await DriveService.instance.getFolderId();\r\n       if (folderId == null) {\r\n         throw Exception('Could not find or create DriveNotes folder');\r\n@@ -97,9 +97,9 @@\n             tooltip: 'Refresh notes',\r\n           ),\r\n           IconButton(\r\n             icon: const Icon(Icons.folder),\r\n-            onPressed: _openDriveFolder,\r\n+            onPressed: () => _openDriveFolder(context),\r\n             tooltip: 'Open in Google Drive',\r\n           ),\r\n           IconButton(\r\n             icon: const Icon(Icons.logout),\r\n"
                },
                {
                    "date": 1744913101917,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,189 +1,172 @@\n-import 'package:drivenotes/features/notes/domain/models/note_model.dart';\r\n-import 'package:drivenotes/features/notes/presentation/providers/note_editor_controller.dart';\r\n-import 'package:drivenotes/note_editor_page.dart';\r\n-import 'package:drivenotes/notes_controller.dart';\r\n-import 'package:flutter/material.dart';\r\n-import 'package:flutter_riverpod/flutter_riverpod.dart';\r\n-import 'package:go_router/go_router.dart';\r\n-import 'package:url_launcher/url_launcher.dart';\r\n-import 'package:drivenotes/features/notes/data/drive_service.dart';\r\n-\r\n-class NotesListPage extends ConsumerWidget {\r\n-  const NotesListPage({super.key});\r\n-\r\n-  Future<void> _openDriveFolder(BuildContext context) async {\r\n-    try {\r\n-      final folderId = await DriveService.instance.getFolderId();\r\n-      if (folderId == null) {\r\n-        throw Exception('Could not find or create DriveNotes folder');\r\n-      }\r\n-      \r\n-      final url = 'https://drive.google.com/drive/folders/$folderId';\r\n-      if (await canLaunchUrl(Uri.parse(url))) {\r\n-        await launchUrl(Uri.parse(url));\r\n-      } else {\r\n-        throw Exception('Could not open folder');\r\n-      }\r\n-    } catch (e) {\r\n-      debugPrint('Error opening folder: $e');\r\n-      if (context.mounted) {\r\n-        ScaffoldMessenger.of(context).showSnackBar(\r\n-          SnackBar(content: Text('Error opening folder: $e')),\r\n-        );\r\n-      }\r\n-    }\r\n-  }\r\n-\r\n-  Future<bool?> _confirmDelete(BuildContext context, String noteTitle) {\r\n-    return showDialog<bool>(\r\n-      context: context,\r\n-      builder:\r\n-          (context) => AlertDialog(\r\n-            title: const Text('Delete Note'),\r\n-            content: Text('Are you sure you want to delete \"$noteTitle\"?'),\r\n-            actions: [\r\n-              TextButton(\r\n-                onPressed: () => Navigator.pop(context, false),\r\n-                child: const Text('CANCEL'),\r\n-              ),\r\n-              TextButton(\r\n-                style: TextButton.styleFrom(foregroundColor: Colors.red),\r\n-                onPressed: () => Navigator.pop(context, true),\r\n-                child: const Text('DELETE'),\r\n-              ),\r\n-            ],\r\n-          ),\r\n-    );\r\n-  }\r\n-\r\n-  Future<void> _deleteNote(\r\n-    BuildContext context,\r\n-    WidgetRef ref,\r\n-    NoteModel note,\r\n-  ) async {\r\n-    final shouldDelete = await _confirmDelete(context, note.title);\r\n-    if (shouldDelete == true) {\r\n-      await ref.read(notesControllerProvider.notifier).delete(note.id);\r\n-      if (context.mounted) {\r\n-        ScaffoldMessenger.of(context).showSnackBar(\r\n-          SnackBar(\r\n-            content: Text('Deleted ${note.title}'),\r\n-            action: SnackBarAction(\r\n-              label: 'UNDO',\r\n-              onPressed: () {\r\n-                // TODO: Implement undo functionality\r\n-                ScaffoldMessenger.of(context).showSnackBar(\r\n-                  const SnackBar(content: Text('Undo is not implemented yet')),\r\n-                );\r\n-              },\r\n-            ),\r\n-          ),\r\n-        );\r\n-      }\r\n-    }\r\n-  }\r\n-\r\n-  @override\r\n-  Widget build(BuildContext context, WidgetRef ref) {\r\n-    final notesAsync = ref.watch(notesControllerProvider);\r\n-\r\n-    return Scaffold(\r\n-      appBar: AppBar(\r\n-        title: const Text('My Notes'),\r\n-        actions: [\r\n-          IconButton(\r\n-            icon: const Icon(Icons.refresh),\r\n-            onPressed: () => ref.refresh(notesControllerProvider),\r\n-            tooltip: 'Refresh notes',\r\n-          ),\r\n-          IconButton(\r\n-            icon: const Icon(Icons.folder),\r\n-            onPressed: () => _openDriveFolder(context),\r\n-            tooltip: 'Open in Google Drive',\r\n-          ),\r\n-          IconButton(\r\n-            icon: const Icon(Icons.logout),\r\n-            onPressed: () => context.go('/login'),\r\n-          ),\r\n-        ],\r\n-      ),\r\n-      body: notesAsync.when(\r\n-        data:\r\n-            (notes) =>\r\n-                notes.isEmpty\r\n-                    ? const Center(child: Text('No notes yet'))\r\n-                    : RefreshIndicator(\r\n-                      onRefresh:\r\n-                          () => ref.refresh(notesControllerProvider.future),\r\n-                      child: ListView.builder(\r\n-                        itemCount: notes.length,\r\n-                        itemBuilder: (context, index) {\r\n-                          final note = notes[index];\r\n-                          return Dismissible(\r\n-                            key: ValueKey(note.id),\r\n-                            direction: DismissDirection.endToStart,\r\n-                            background: Container(\r\n-                              color: Colors.red,\r\n-                              alignment: Alignment.centerRight,\r\n-                              padding: const EdgeInsets.only(right: 16),\r\n-                              child: const Icon(\r\n-                                Icons.delete,\r\n-                                color: Colors.white,\r\n-                              ),\r\n-                            ),\r\n-                            confirmDismiss:\r\n-                                (_) => _confirmDelete(context, note.title),\r\n-                            onDismissed: (_) => _deleteNote(context, ref, note),\r\n-                            child: ListTile(\r\n-                              title: Text(note.title),\r\n-                              subtitle: Text(\r\n-                                note.content,\r\n-                                maxLines: 2,\r\n-                                overflow: TextOverflow.ellipsis,\r\n-                              ),\r\n-                              onTap:\r\n-                                  () => Navigator.push(\r\n-                                    context,\r\n-                                    MaterialPageRoute(\r\n-                                      builder:\r\n-                                          (_) => NoteEditorPage(\r\n-                                            originalNote: note,\r\n-                                          ),\r\n-                                    ),\r\n-                                  ),\r\n-                              onLongPress:\r\n-                                  () => _deleteNote(context, ref, note),\r\n-                            ),\r\n-                          );\r\n-                        },\r\n-                      ),\r\n-                    ),\r\n-        error:\r\n-            (error, _) => Center(\r\n-              child: Column(\r\n-                mainAxisSize: MainAxisSize.min,\r\n-                children: [\r\n-                  const Icon(Icons.error_outline, size: 48, color: Colors.red),\r\n-                  const SizedBox(height: 16),\r\n-                  Text('Error: $error'),\r\n-                  const SizedBox(height: 16),\r\n-                  ElevatedButton(\r\n-                    onPressed: () => ref.refresh(notesControllerProvider),\r\n-                    child: const Text('RETRY'),\r\n-                  ),\r\n-                ],\r\n-              ),\r\n-            ),\r\n-        loading: () => const Center(child: CircularProgressIndicator()),\r\n-      ),\r\n-      floatingActionButton: FloatingActionButton(\r\n-        onPressed:\r\n-            () => Navigator.push(\r\n-              context,\r\n-              MaterialPageRoute(builder: (_) => const NoteEditorPage()),\r\n-            ),\r\n-        child: const Icon(Icons.add),\r\n-      ),\r\n-    );\r\n-  }\r\n-}\r\n+import 'package:drivenotes/features/notes/domain/models/note_model.dart';\n+import 'package:drivenotes/features/notes/presentation/providers/note_editor_controller.dart';\n+import 'package:drivenotes/note_editor_page.dart';\n+import 'package:drivenotes/notes_controller.dart';\n+import 'package:flutter/material.dart';\n+import 'package:flutter_riverpod/flutter_riverpod.dart';\n+import 'package:go_router/go_router.dart';\n+import 'package:url_launcher/url_launcher.dart';\n+\n+class NotesListPage extends ConsumerWidget {\n+  const NotesListPage({super.key});\n+\n+  Future<void> _openDriveFolder() async {\n+    const url = 'https://drive.google.com';\n+    if (await canLaunchUrl(Uri.parse(url))) {\n+      await launchUrl(Uri.parse(url));\n+    }\n+  }\n+\n+  Future<bool?> _confirmDelete(BuildContext context, String noteTitle) {\n+    return showDialog<bool>(\n+      context: context,\n+      builder:\n+          (context) => AlertDialog(\n+            title: const Text('Delete Note'),\n+            content: Text('Are you sure you want to delete \"$noteTitle\"?'),\n+            actions: [\n+              TextButton(\n+                onPressed: () => Navigator.pop(context, false),\n+                child: const Text('CANCEL'),\n+              ),\n+              TextButton(\n+                style: TextButton.styleFrom(foregroundColor: Colors.red),\n+                onPressed: () => Navigator.pop(context, true),\n+                child: const Text('DELETE'),\n+              ),\n+            ],\n+          ),\n+    );\n+  }\n+\n+  Future<void> _deleteNote(\n+    BuildContext context,\n+    WidgetRef ref,\n+    NoteModel note,\n+  ) async {\n+    final shouldDelete = await _confirmDelete(context, note.title);\n+    if (shouldDelete == true) {\n+      await ref.read(notesControllerProvider.notifier).delete(note.id);\n+      if (context.mounted) {\n+        ScaffoldMessenger.of(context).showSnackBar(\n+          SnackBar(\n+            content: Text('Deleted ${note.title}'),\n+            action: SnackBarAction(\n+              label: 'UNDO',\n+              onPressed: () {\n+                // TODO: Implement undo functionality\n+                ScaffoldMessenger.of(context).showSnackBar(\n+                  const SnackBar(content: Text('Undo is not implemented yet')),\n+                );\n+              },\n+            ),\n+          ),\n+        );\n+      }\n+    }\n+  }\n+\n+  @override\n+  Widget build(BuildContext context, WidgetRef ref) {\n+    final notesAsync = ref.watch(notesControllerProvider);\n+\n+    return Scaffold(\n+      appBar: AppBar(\n+        title: const Text('My Notes'),\n+        actions: [\n+          IconButton(\n+            icon: const Icon(Icons.refresh),\n+            onPressed: () => ref.refresh(notesControllerProvider),\n+            tooltip: 'Refresh notes',\n+          ),\n+          IconButton(\n+            icon: const Icon(Icons.folder),\n+            onPressed: _openDriveFolder,\n+            tooltip: 'Open in Google Drive',\n+          ),\n+          IconButton(\n+            icon: const Icon(Icons.logout),\n+            onPressed: () => context.go('/login'),\n+          ),\n+        ],\n+      ),\n+      body: notesAsync.when(\n+        data:\n+            (notes) =>\n+                notes.isEmpty\n+                    ? const Center(child: Text('No notes yet'))\n+                    : RefreshIndicator(\n+                      onRefresh:\n+                          () => ref.refresh(notesControllerProvider.future),\n+                      child: ListView.builder(\n+                        itemCount: notes.length,\n+                        itemBuilder: (context, index) {\n+                          final note = notes[index];\n+                          return Dismissible(\n+                            key: ValueKey(note.id),\n+                            direction: DismissDirection.endToStart,\n+                            background: Container(\n+                              color: Colors.red,\n+                              alignment: Alignment.centerRight,\n+                              padding: const EdgeInsets.only(right: 16),\n+                              child: const Icon(\n+                                Icons.delete,\n+                                color: Colors.white,\n+                              ),\n+                            ),\n+                            confirmDismiss:\n+                                (_) => _confirmDelete(context, note.title),\n+                            onDismissed: (_) => _deleteNote(context, ref, note),\n+                            child: ListTile(\n+                              title: Text(note.title),\n+                              subtitle: Text(\n+                                note.content,\n+                                maxLines: 2,\n+                                overflow: TextOverflow.ellipsis,\n+                              ),\n+                              onTap:\n+                                  () => Navigator.push(\n+                                    context,\n+                                    MaterialPageRoute(\n+                                      builder:\n+                                          (_) => NoteEditorPage(\n+                                            originalNote: note,\n+                                          ),\n+                                    ),\n+                                  ),\n+                              onLongPress:\n+                                  () => _deleteNote(context, ref, note),\n+                            ),\n+                          );\n+                        },\n+                      ),\n+                    ),\n+        error:\n+            (error, _) => Center(\n+              child: Column(\n+                mainAxisSize: MainAxisSize.min,\n+                children: [\n+                  const Icon(Icons.error_outline, size: 48, color: Colors.red),\n+                  const SizedBox(height: 16),\n+                  Text('Error: $error'),\n+                  const SizedBox(height: 16),\n+                  ElevatedButton(\n+                    onPressed: () => ref.refresh(notesControllerProvider),\n+                    child: const Text('RETRY'),\n+                  ),\n+                ],\n+              ),\n+            ),\n+        loading: () => const Center(child: CircularProgressIndicator()),\n+      ),\n+      floatingActionButton: FloatingActionButton(\n+        onPressed:\n+            () => Navigator.push(\n+              context,\n+              MaterialPageRoute(builder: (_) => const NoteEditorPage()),\n+            ),\n+        child: const Icon(Icons.add),\n+      ),\n+    );\n+  }\n+}\n"
                },
                {
                    "date": 1744913792809,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,77 +5,185 @@\n import 'package:flutter/material.dart';\n import 'package:flutter_riverpod/flutter_riverpod.dart';\n import 'package:go_router/go_router.dart';\n import 'package:url_launcher/url_launcher.dart';\n+import 'package:flutter_staggered_grid_view/flutter_staggered_grid_view.dart';\n+import 'package:timeago/timeago.dart' as timeago;\n \n-class NotesListPage extends ConsumerWidget {\n+class NotesListPage extends ConsumerStatefulWidget {\n   const NotesListPage({super.key});\n \n+  @override\n+  ConsumerState<NotesListPage> createState() => _NotesListPageState();\n+}\n+\n+class _NotesListPageState extends ConsumerState<NotesListPage> {\n+  bool _isGridView = true;\n+\n   Future<void> _openDriveFolder() async {\n     const url = 'https://drive.google.com';\n     if (await canLaunchUrl(Uri.parse(url))) {\n       await launchUrl(Uri.parse(url));\n     }\n   }\n \n-  Future<bool?> _confirmDelete(BuildContext context, String noteTitle) {\n-    return showDialog<bool>(\n+  Future<void> _deleteNote(BuildContext context, NoteModel note) async {\n+    final shouldDelete = await showDialog<bool>(\n       context: context,\n-      builder:\n-          (context) => AlertDialog(\n-            title: const Text('Delete Note'),\n-            content: Text('Are you sure you want to delete \"$noteTitle\"?'),\n-            actions: [\n-              TextButton(\n-                onPressed: () => Navigator.pop(context, false),\n-                child: const Text('CANCEL'),\n-              ),\n-              TextButton(\n-                style: TextButton.styleFrom(foregroundColor: Colors.red),\n-                onPressed: () => Navigator.pop(context, true),\n-                child: const Text('DELETE'),\n-              ),\n-            ],\n+      builder: (context) => AlertDialog(\n+        title: const Text('Delete Note'),\n+        content: Text('Are you sure you want to delete \"${note.title}\"?'),\n+        actions: [\n+          TextButton(\n+            onPressed: () => Navigator.pop(context, false),\n+            child: const Text('CANCEL'),\n           ),\n+          TextButton(\n+            style: TextButton.styleFrom(foregroundColor: Colors.red),\n+            onPressed: () => Navigator.pop(context, true),\n+            child: const Text('DELETE'),\n+          ),\n+        ],\n+      ),\n     );\n-  }\n \n-  Future<void> _deleteNote(\n-    BuildContext context,\n-    WidgetRef ref,\n-    NoteModel note,\n-  ) async {\n-    final shouldDelete = await _confirmDelete(context, note.title);\n-    if (shouldDelete == true) {\n-      await ref.read(notesControllerProvider.notifier).delete(note.id);\n-      if (context.mounted) {\n-        ScaffoldMessenger.of(context).showSnackBar(\n-          SnackBar(\n-            content: Text('Deleted ${note.title}'),\n-            action: SnackBarAction(\n-              label: 'UNDO',\n-              onPressed: () {\n-                // TODO: Implement undo functionality\n-                ScaffoldMessenger.of(context).showSnackBar(\n-                  const SnackBar(content: Text('Undo is not implemented yet')),\n-                );\n-              },\n+    if (shouldDelete == true && mounted) {\n+      try {\n+        await ref.read(notesControllerProvider.notifier).delete(note.id);\n+        if (mounted) {\n+          ScaffoldMessenger.of(context).showSnackBar(\n+            SnackBar(\n+              content: Text('Deleted ${note.title}'),\n+              action: SnackBarAction(\n+                label: 'UNDO',\n+                onPressed: () {\n+                  ScaffoldMessenger.of(context).showSnackBar(\n+                    const SnackBar(content: Text('Undo is not implemented yet')),\n+                  );\n+                },\n+              ),\n             ),\n-          ),\n-        );\n+          );\n+        }\n+      } catch (e) {\n+        if (mounted) {\n+          ScaffoldMessenger.of(context).showSnackBar(\n+            SnackBar(content: Text('Error deleting note: $e')),\n+          );\n+        }\n       }\n     }\n   }\n \n+  Widget _buildNoteCard(BuildContext context, NoteModel note) {\n+    final theme = Theme.of(context);\n+    final lastModified = DateTime.now().subtract(const Duration(minutes: 30));\n+    \n+    return Card(\n+      elevation: 2,\n+      margin: const EdgeInsets.all(4),\n+      child: InkWell(\n+        onTap: () => Navigator.push(\n+          context,\n+          MaterialPageRoute(builder: (_) => NoteEditorPage(originalNote: note)),\n+        ),\n+        onLongPress: () => _deleteNote(context, note),\n+        borderRadius: BorderRadius.circular(12),\n+        child: Padding(\n+          padding: const EdgeInsets.all(16),\n+          child: Column(\n+            crossAxisAlignment: CrossAxisAlignment.start,\n+            children: [\n+              Row(\n+                children: [\n+                  Expanded(\n+                    child: Text(\n+                      note.title.replaceAll(RegExp(r'\\.txt$'), ''),\n+                      style: theme.textTheme.titleMedium?.copyWith(\n+                        fontWeight: FontWeight.bold,\n+                      ),\n+                      maxLines: 1,\n+                      overflow: TextOverflow.ellipsis,\n+                    ),\n+                  ),\n+                  IconButton(\n+                    icon: const Icon(Icons.more_vert),\n+                    onPressed: () {\n+                      showModalBottomSheet(\n+                        context: context,\n+                        builder: (context) => SafeArea(\n+                          child: Column(\n+                            mainAxisSize: MainAxisSize.min,\n+                            children: [\n+                              ListTile(\n+                                leading: const Icon(Icons.edit),\n+                                title: const Text('Edit'),\n+                                onTap: () {\n+                                  Navigator.pop(context);\n+                                  Navigator.push(\n+                                    context,\n+                                    MaterialPageRoute(\n+                                      builder: (_) => NoteEditorPage(\n+                                        originalNote: note,\n+                                      ),\n+                                    ),\n+                                  );\n+                                },\n+                              ),\n+                              ListTile(\n+                                leading: const Icon(Icons.delete, color: Colors.red),\n+                                title: const Text('Delete'),\n+                                onTap: () {\n+                                  Navigator.pop(context);\n+                                  _deleteNote(context, note);\n+                                },\n+                              ),\n+                            ],\n+                          ),\n+                        ),\n+                      );\n+                    },\n+                  ),\n+                ],\n+              ),\n+              if (note.content.isNotEmpty) ...[\n+                const SizedBox(height: 8),\n+                Text(\n+                  note.content,\n+                  style: theme.textTheme.bodyMedium?.copyWith(\n+                    color: theme.textTheme.bodySmall?.color,\n+                  ),\n+                  maxLines: _isGridView ? 6 : 2,\n+                  overflow: TextOverflow.ellipsis,\n+                ),\n+              ],\n+              const SizedBox(height: 8),\n+              Text(\n+                timeago.format(lastModified),\n+                style: theme.textTheme.bodySmall,\n+              ),\n+            ],\n+          ),\n+        ),\n+      ),\n+    );\n+  }\n+\n   @override\n-  Widget build(BuildContext context, WidgetRef ref) {\n+  Widget build(BuildContext context) {\n+    final theme = Theme.of(context);\n     final notesAsync = ref.watch(notesControllerProvider);\n \n     return Scaffold(\n       appBar: AppBar(\n         title: const Text('My Notes'),\n         actions: [\n           IconButton(\n+            icon: Icon(_isGridView ? Icons.view_list : Icons.grid_view),\n+            onPressed: () => setState(() => _isGridView = !_isGridView),\n+            tooltip: _isGridView ? 'List view' : 'Grid view',\n+          ),\n+          IconButton(\n             icon: const Icon(Icons.refresh),\n             onPressed: () => ref.refresh(notesControllerProvider),\n             tooltip: 'Refresh notes',\n           ),\n@@ -86,86 +194,84 @@\n           ),\n           IconButton(\n             icon: const Icon(Icons.logout),\n             onPressed: () => context.go('/login'),\n+            tooltip: 'Sign out',\n           ),\n         ],\n       ),\n       body: notesAsync.when(\n-        data:\n-            (notes) =>\n-                notes.isEmpty\n-                    ? const Center(child: Text('No notes yet'))\n-                    : RefreshIndicator(\n-                      onRefresh:\n-                          () => ref.refresh(notesControllerProvider.future),\n-                      child: ListView.builder(\n+        data: (notes) => notes.isEmpty\n+            ? Center(\n+                child: Column(\n+                  mainAxisSize: MainAxisSize.min,\n+                  children: [\n+                    Icon(\n+                      Icons.note_add,\n+                      size: 64,\n+                      color: theme.colorScheme.primary.withOpacity(0.5),\n+                    ),\n+                    const SizedBox(height: 16),\n+                    Text(\n+                      'No notes yet',\n+                      style: theme.textTheme.titleLarge?.copyWith(\n+                        color: theme.colorScheme.onSurface.withOpacity(0.7),\n+                      ),\n+                    ),\n+                    const SizedBox(height: 8),\n+                    Text(\n+                      'Tap + to create your first note',\n+                      style: theme.textTheme.bodyMedium?.copyWith(\n+                        color: theme.colorScheme.onSurface.withOpacity(0.5),\n+                      ),\n+                    ),\n+                  ],\n+                ),\n+              )\n+            : RefreshIndicator(\n+                onRefresh: () => ref.refresh(notesControllerProvider.future),\n+                child: _isGridView\n+                    ? MasonryGridView.count(\n+                        padding: const EdgeInsets.all(4),\n+                        crossAxisCount: 2,\n                         itemCount: notes.length,\n-                        itemBuilder: (context, index) {\n-                          final note = notes[index];\n-                          return Dismissible(\n-                            key: ValueKey(note.id),\n-                            direction: DismissDirection.endToStart,\n-                            background: Container(\n-                              color: Colors.red,\n-                              alignment: Alignment.centerRight,\n-                              padding: const EdgeInsets.only(right: 16),\n-                              child: const Icon(\n-                                Icons.delete,\n-                                color: Colors.white,\n-                              ),\n-                            ),\n-                            confirmDismiss:\n-                                (_) => _confirmDelete(context, note.title),\n-                            onDismissed: (_) => _deleteNote(context, ref, note),\n-                            child: ListTile(\n-                              title: Text(note.title),\n-                              subtitle: Text(\n-                                note.content,\n-                                maxLines: 2,\n-                                overflow: TextOverflow.ellipsis,\n-                              ),\n-                              onTap:\n-                                  () => Navigator.push(\n-                                    context,\n-                                    MaterialPageRoute(\n-                                      builder:\n-                                          (_) => NoteEditorPage(\n-                                            originalNote: note,\n-                                          ),\n-                                    ),\n-                                  ),\n-                              onLongPress:\n-                                  () => _deleteNote(context, ref, note),\n-                            ),\n-                          );\n-                        },\n+                        itemBuilder: (context, index) => _buildNoteCard(\n+                          context,\n+                          notes[index],\n+                        ),\n+                      )\n+                    : ListView.builder(\n+                        padding: const EdgeInsets.all(4),\n+                        itemCount: notes.length,\n+                        itemBuilder: (context, index) => _buildNoteCard(\n+                          context,\n+                          notes[index],\n+                        ),\n                       ),\n-                    ),\n-        error:\n-            (error, _) => Center(\n-              child: Column(\n-                mainAxisSize: MainAxisSize.min,\n-                children: [\n-                  const Icon(Icons.error_outline, size: 48, color: Colors.red),\n-                  const SizedBox(height: 16),\n-                  Text('Error: $error'),\n-                  const SizedBox(height: 16),\n-                  ElevatedButton(\n-                    onPressed: () => ref.refresh(notesControllerProvider),\n-                    child: const Text('RETRY'),\n-                  ),\n-                ],\n               ),\n-            ),\n+        error: (error, _) => Center(\n+          child: Column(\n+            mainAxisSize: MainAxisSize.min,\n+            children: [\n+              const Icon(Icons.error_outline, size: 48, color: Colors.red),\n+              const SizedBox(height: 16),\n+              Text('Error: $error'),\n+              const SizedBox(height: 16),\n+              ElevatedButton.icon(\n+                onPressed: () => ref.refresh(notesControllerProvider),\n+                icon: const Icon(Icons.refresh),\n+                label: const Text('RETRY'),\n+              ),\n+            ],\n+          ),\n+        ),\n         loading: () => const Center(child: CircularProgressIndicator()),\n       ),\n       floatingActionButton: FloatingActionButton(\n-        onPressed:\n-            () => Navigator.push(\n-              context,\n-              MaterialPageRoute(builder: (_) => const NoteEditorPage()),\n-            ),\n+        onPressed: () => Navigator.push(\n+          context,\n+          MaterialPageRoute(builder: (_) => const NoteEditorPage()),\n+        ),\n         child: const Icon(Icons.add),\n       ),\n     );\n   }\n"
                },
                {
                    "date": 1744913909066,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,23 +28,24 @@\n \n   Future<void> _deleteNote(BuildContext context, NoteModel note) async {\n     final shouldDelete = await showDialog<bool>(\n       context: context,\n-      builder: (context) => AlertDialog(\n-        title: const Text('Delete Note'),\n-        content: Text('Are you sure you want to delete \"${note.title}\"?'),\n-        actions: [\n-          TextButton(\n-            onPressed: () => Navigator.pop(context, false),\n-            child: const Text('CANCEL'),\n+      builder:\n+          (context) => AlertDialog(\n+            title: const Text('Delete Note'),\n+            content: Text('Are you sure you want to delete \"${note.title}\"?'),\n+            actions: [\n+              TextButton(\n+                onPressed: () => Navigator.pop(context, false),\n+                child: const Text('CANCEL'),\n+              ),\n+              TextButton(\n+                style: TextButton.styleFrom(foregroundColor: Colors.red),\n+                onPressed: () => Navigator.pop(context, true),\n+                child: const Text('DELETE'),\n+              ),\n+            ],\n           ),\n-          TextButton(\n-            style: TextButton.styleFrom(foregroundColor: Colors.red),\n-            onPressed: () => Navigator.pop(context, true),\n-            child: const Text('DELETE'),\n-          ),\n-        ],\n-      ),\n     );\n \n     if (shouldDelete == true && mounted) {\n       try {\n@@ -56,37 +57,34 @@\n               action: SnackBarAction(\n                 label: 'UNDO',\n                 onPressed: () {\n                   ScaffoldMessenger.of(context).showSnackBar(\n-                    const SnackBar(content: Text('Undo is not implemented yet')),\n+                    const SnackBar(\n+                      content: Text('Undo is not implemented yet'),\n+                    ),\n                   );\n                 },\n               ),\n             ),\n           );\n         }\n       } catch (e) {\n         if (mounted) {\n-          ScaffoldMessenger.of(context).showSnackBar(\n-            SnackBar(content: Text('Error deleting note: $e')),\n-          );\n+          ScaffoldMessenger.of(\n+            context,\n+          ).showSnackBar(SnackBar(content: Text('Error deleting note: $e')));\n         }\n       }\n     }\n   }\n \n   Widget _buildNoteCard(BuildContext context, NoteModel note) {\n     final theme = Theme.of(context);\n-    final lastModified = DateTime.now().subtract(const Duration(minutes: 30));\n-    \n     return Card(\n       elevation: 2,\n       margin: const EdgeInsets.all(4),\n       child: InkWell(\n-        onTap: () => Navigator.push(\n-          context,\n-          MaterialPageRoute(builder: (_) => NoteEditorPage(originalNote: note)),\n-        ),\n+        onTap: () => _openEditor(context, note),\n         onLongPress: () => _deleteNote(context, note),\n         borderRadius: BorderRadius.circular(12),\n         child: Padding(\n           padding: const EdgeInsets.all(16),\n@@ -109,38 +107,35 @@\n                     icon: const Icon(Icons.more_vert),\n                     onPressed: () {\n                       showModalBottomSheet(\n                         context: context,\n-                        builder: (context) => SafeArea(\n-                          child: Column(\n-                            mainAxisSize: MainAxisSize.min,\n-                            children: [\n-                              ListTile(\n-                                leading: const Icon(Icons.edit),\n-                                title: const Text('Edit'),\n-                                onTap: () {\n-                                  Navigator.pop(context);\n-                                  Navigator.push(\n-                                    context,\n-                                    MaterialPageRoute(\n-                                      builder: (_) => NoteEditorPage(\n-                                        originalNote: note,\n-                                      ),\n+                        builder:\n+                            (context) => SafeArea(\n+                              child: Column(\n+                                mainAxisSize: MainAxisSize.min,\n+                                children: [\n+                                  ListTile(\n+                                    leading: const Icon(Icons.edit),\n+                                    title: const Text('Edit'),\n+                                    onTap: () {\n+                                      Navigator.pop(context);\n+                                      _openEditor(context, note);\n+                                    },\n+                                  ),\n+                                  ListTile(\n+                                    leading: const Icon(\n+                                      Icons.delete,\n+                                      color: Colors.red,\n                                     ),\n-                                  );\n-                                },\n+                                    title: const Text('Delete'),\n+                                    onTap: () {\n+                                      Navigator.pop(context);\n+                                      _deleteNote(context, note);\n+                                    },\n+                                  ),\n+                                ],\n                               ),\n-                              ListTile(\n-                                leading: const Icon(Icons.delete, color: Colors.red),\n-                                title: const Text('Delete'),\n-                                onTap: () {\n-                                  Navigator.pop(context);\n-                                  _deleteNote(context, note);\n-                                },\n-                              ),\n-                            ],\n-                          ),\n-                        ),\n+                            ),\n                       );\n                     },\n                   ),\n                 ],\n@@ -157,9 +152,9 @@\n                 ),\n               ],\n               const SizedBox(height: 8),\n               Text(\n-                timeago.format(lastModified),\n+                timeago.format(note.updatedAt),\n                 style: theme.textTheme.bodySmall,\n               ),\n             ],\n           ),\n@@ -167,29 +162,31 @@\n       ),\n     );\n   }\n \n+  void _openEditor(BuildContext context, NoteModel? note) {\n+    Navigator.push(\n+      context,\n+      MaterialPageRoute(builder: (_) => NoteEditorPage(originalNote: note)),\n+    ).then((_) => ref.invalidate(notesControllerProvider));\n+  }\n+\n   @override\n   Widget build(BuildContext context) {\n     final theme = Theme.of(context);\n     final notesAsync = ref.watch(notesControllerProvider);\n \n     return Scaffold(\n       appBar: AppBar(\n-        title: const Text('My Notes'),\n+        title: const Text('DriveNotes'),\n         actions: [\n           IconButton(\n             icon: Icon(_isGridView ? Icons.view_list : Icons.grid_view),\n             onPressed: () => setState(() => _isGridView = !_isGridView),\n-            tooltip: _isGridView ? 'List view' : 'Grid view',\n+            tooltip: _isGridView ? 'List View' : 'Grid View',\n           ),\n           IconButton(\n-            icon: const Icon(Icons.refresh),\n-            onPressed: () => ref.refresh(notesControllerProvider),\n-            tooltip: 'Refresh notes',\n-          ),\n-          IconButton(\n-            icon: const Icon(Icons.folder),\n+            icon: const Icon(Icons.folder_outlined),\n             onPressed: _openDriveFolder,\n             tooltip: 'Open in Google Drive',\n           ),\n           IconButton(\n@@ -199,79 +196,85 @@\n           ),\n         ],\n       ),\n       body: notesAsync.when(\n-        data: (notes) => notes.isEmpty\n-            ? Center(\n-                child: Column(\n-                  mainAxisSize: MainAxisSize.min,\n-                  children: [\n-                    Icon(\n-                      Icons.note_add,\n-                      size: 64,\n-                      color: theme.colorScheme.primary.withOpacity(0.5),\n-                    ),\n-                    const SizedBox(height: 16),\n-                    Text(\n-                      'No notes yet',\n-                      style: theme.textTheme.titleLarge?.copyWith(\n-                        color: theme.colorScheme.onSurface.withOpacity(0.7),\n-                      ),\n-                    ),\n-                    const SizedBox(height: 8),\n-                    Text(\n-                      'Tap + to create your first note',\n-                      style: theme.textTheme.bodyMedium?.copyWith(\n-                        color: theme.colorScheme.onSurface.withOpacity(0.5),\n-                      ),\n-                    ),\n-                  ],\n-                ),\n-              )\n-            : RefreshIndicator(\n-                onRefresh: () => ref.refresh(notesControllerProvider.future),\n-                child: _isGridView\n-                    ? MasonryGridView.count(\n-                        padding: const EdgeInsets.all(4),\n-                        crossAxisCount: 2,\n-                        itemCount: notes.length,\n-                        itemBuilder: (context, index) => _buildNoteCard(\n-                          context,\n-                          notes[index],\n-                        ),\n-                      )\n-                    : ListView.builder(\n-                        padding: const EdgeInsets.all(4),\n-                        itemCount: notes.length,\n-                        itemBuilder: (context, index) => _buildNoteCard(\n-                          context,\n-                          notes[index],\n-                        ),\n-                      ),\n-              ),\n-        error: (error, _) => Center(\n+        loading: () => const Center(child: CircularProgressIndicator()),\n+        error: (error, stack) => Center(\n           child: Column(\n             mainAxisSize: MainAxisSize.min,\n             children: [\n               const Icon(Icons.error_outline, size: 48, color: Colors.red),\n               const SizedBox(height: 16),\n               Text('Error: $error'),\n               const SizedBox(height: 16),\n-              ElevatedButton.icon(\n-                onPressed: () => ref.refresh(notesControllerProvider),\n-                icon: const Icon(Icons.refresh),\n-                label: const Text('RETRY'),\n+              ElevatedButton(\n+                onPressed: () => ref.invalidate(notesControllerProvider),\n+                child: const Text('RETRY'),\n               ),\n             ],\n           ),\n         ),\n-        loading: () => const Center(child: CircularProgressIndicator()),\n+        data: (notes) {\n+          if (notes.isEmpty) {\n+            return Center(\n+              child: Column(\n+                mainAxisSize: MainAxisSize.min,\n+                children: [\n+                  Icon(\n+                    Icons.note_add,\n+                    size: 64,\n+                    color: theme.colorScheme.primary.withOpacity(0.5),\n+                  ),\n+                  const SizedBox(height: 16),\n+                  Text(\n+                    'No notes yet',\n+                    style: theme.textTheme.titleLarge?.copyWith(\n+                      color: theme.colorScheme.onSurface.withOpacity(\n+                        0.7,\n+                      ),\n+                    ),\n+                  ),\n+                  const SizedBox(height: 8),\n+                  Text(\n+                    'Tap the + button to create your first note',\n+                    style: theme.textTheme.bodyMedium?.copyWith(\n+                      color: theme.colorScheme.onSurface.withOpacity(\n+                        0.5,\n+                      ),\n+                    ),\n+                  ),\n+                ],\n+              ),\n+            );\n+          }\n+\n+          if (_isGridView) {\n+            return MasonryGridView.count(\n+              padding: const EdgeInsets.all(8),\n+              crossAxisCount: MediaQuery.of(context).size.width > 600 ? 3 : 2,\n+              mainAxisSpacing: 4,\n+              crossAxisSpacing: 4,\n+              itemCount: notes.length,\n+              itemBuilder: (context, index) => _buildNoteCard(\n+                context,\n+                notes[index],\n+              ),\n+            );\n+          }\n+\n+          return ListView.builder(\n+            padding: const EdgeInsets.all(8),\n+            itemCount: notes.length,\n+            itemBuilder: (context, index) => _buildNoteCard(\n+              context,\n+              notes[index],\n+            ),\n+          );\n+        },\n       ),\n       floatingActionButton: FloatingActionButton(\n-        onPressed: () => Navigator.push(\n-          context,\n-          MaterialPageRoute(builder: (_) => const NoteEditorPage()),\n-        ),\n+        onPressed: () => _openEditor(context, null),\n+        tooltip: 'Add Note',\n         child: const Icon(Icons.add),\n       ),\n     );\n   }\n"
                },
                {
                    "date": 1744915917349,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,8 +7,9 @@\n import 'package:go_router/go_router.dart';\n import 'package:url_launcher/url_launcher.dart';\n import 'package:flutter_staggered_grid_view/flutter_staggered_grid_view.dart';\n import 'package:timeago/timeago.dart' as timeago;\n+import 'package:drivenotes/features/notes/presentation/providers/note_save_provider.dart';\n \n class NotesListPage extends ConsumerStatefulWidget {\n   const NotesListPage({super.key});\n \n@@ -197,23 +198,24 @@\n         ],\n       ),\n       body: notesAsync.when(\n         loading: () => const Center(child: CircularProgressIndicator()),\n-        error: (error, stack) => Center(\n-          child: Column(\n-            mainAxisSize: MainAxisSize.min,\n-            children: [\n-              const Icon(Icons.error_outline, size: 48, color: Colors.red),\n-              const SizedBox(height: 16),\n-              Text('Error: $error'),\n-              const SizedBox(height: 16),\n-              ElevatedButton(\n-                onPressed: () => ref.invalidate(notesControllerProvider),\n-                child: const Text('RETRY'),\n+        error:\n+            (error, stack) => Center(\n+              child: Column(\n+                mainAxisSize: MainAxisSize.min,\n+                children: [\n+                  const Icon(Icons.error_outline, size: 48, color: Colors.red),\n+                  const SizedBox(height: 16),\n+                  Text('Error: $error'),\n+                  const SizedBox(height: 16),\n+                  ElevatedButton(\n+                    onPressed: () => ref.invalidate(notesControllerProvider),\n+                    child: const Text('RETRY'),\n+                  ),\n+                ],\n               ),\n-            ],\n-          ),\n-        ),\n+            ),\n         data: (notes) {\n           if (notes.isEmpty) {\n             return Center(\n               child: Column(\n@@ -227,20 +229,16 @@\n                   const SizedBox(height: 16),\n                   Text(\n                     'No notes yet',\n                     style: theme.textTheme.titleLarge?.copyWith(\n-                      color: theme.colorScheme.onSurface.withOpacity(\n-                        0.7,\n-                      ),\n+                      color: theme.colorScheme.onSurface.withOpacity(0.7),\n                     ),\n                   ),\n                   const SizedBox(height: 8),\n                   Text(\n                     'Tap the + button to create your first note',\n                     style: theme.textTheme.bodyMedium?.copyWith(\n-                      color: theme.colorScheme.onSurface.withOpacity(\n-                        0.5,\n-                      ),\n+                      color: theme.colorScheme.onSurface.withOpacity(0.5),\n                     ),\n                   ),\n                 ],\n               ),\n@@ -253,22 +251,18 @@\n               crossAxisCount: MediaQuery.of(context).size.width > 600 ? 3 : 2,\n               mainAxisSpacing: 4,\n               crossAxisSpacing: 4,\n               itemCount: notes.length,\n-              itemBuilder: (context, index) => _buildNoteCard(\n-                context,\n-                notes[index],\n-              ),\n+              itemBuilder:\n+                  (context, index) => _buildNoteCard(context, notes[index]),\n             );\n           }\n \n           return ListView.builder(\n             padding: const EdgeInsets.all(8),\n             itemCount: notes.length,\n-            itemBuilder: (context, index) => _buildNoteCard(\n-              context,\n-              notes[index],\n-            ),\n+            itemBuilder:\n+                (context, index) => _buildNoteCard(context, notes[index]),\n           );\n         },\n       ),\n       floatingActionButton: FloatingActionButton(\n"
                },
                {
                    "date": 1744916280348,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -79,110 +79,175 @@\n   }\n \n   Widget _buildNoteCard(BuildContext context, NoteModel note) {\n     final theme = Theme.of(context);\n-    return Card(\n-      elevation: 2,\n-      margin: const EdgeInsets.all(4),\n-      child: InkWell(\n-        onTap: () => _openEditor(context, note),\n-        onLongPress: () => _deleteNote(context, note),\n-        borderRadius: BorderRadius.circular(12),\n-        child: Padding(\n-          padding: const EdgeInsets.all(16),\n-          child: Column(\n-            crossAxisAlignment: CrossAxisAlignment.start,\n-            children: [\n-              Row(\n-                children: [\n-                  Expanded(\n-                    child: Text(\n-                      note.title.replaceAll(RegExp(r'\\.txt$'), ''),\n-                      style: theme.textTheme.titleMedium?.copyWith(\n-                        fontWeight: FontWeight.bold,\n+    return Hero(\n+      tag: 'note_${note.id}',\n+      child: Material(\n+        color: Colors.transparent,\n+        child: AnimatedContainer(\n+          duration: const Duration(milliseconds: 200),\n+          child: Card(\n+            elevation: 2,\n+            margin: const EdgeInsets.all(4),\n+            child: InkWell(\n+              onTap: () => _openEditor(context, note, heroTag: 'note_${note.id}'),\n+              onLongPress: () => _deleteNote(context, note),\n+              borderRadius: BorderRadius.circular(12),\n+              child: Padding(\n+                padding: const EdgeInsets.all(16),\n+                child: Column(\n+                  crossAxisAlignment: CrossAxisAlignment.start,\n+                  children: [\n+                    Row(\n+                      children: [\n+                        Expanded(\n+                          child: Hero(\n+                            tag: 'note_${note.id}_input',\n+                            child: Material(\n+                              color: Colors.transparent,\n+                              child: Text(\n+                                note.title.replaceAll(RegExp(r'\\.txt$'), ''),\n+                                style: theme.textTheme.titleMedium?.copyWith(\n+                                  fontWeight: FontWeight.bold,\n+                                ),\n+                                maxLines: 1,\n+                                overflow: TextOverflow.ellipsis,\n+                              ),\n+                            ),\n+                          ),\n+                        ),\n+                        IconButton(\n+                          icon: const Icon(Icons.more_vert),\n+                          onPressed: () {\n+                            HapticFeedback.lightImpact();\n+                            showModalBottomSheet(\n+                              context: context,\n+                              builder: (context) => SafeArea(\n+                                child: Column(\n+                                  mainAxisSize: MainAxisSize.min,\n+                                  children: [\n+                                    ListTile(\n+                                      leading: const Icon(Icons.edit),\n+                                      title: const Text('Edit'),\n+                                      onTap: () {\n+                                        Navigator.pop(context);\n+                                        _openEditor(\n+                                          context,\n+                                          note,\n+                                          heroTag: 'note_${note.id}',\n+                                        );\n+                                      },\n+                                    ),\n+                                    ListTile(\n+                                      leading: const Icon(\n+                                        Icons.delete,\n+                                        color: Colors.red,\n+                                      ),\n+                                      title: const Text('Delete'),\n+                                      onTap: () {\n+                                        Navigator.pop(context);\n+                                        _deleteNote(context, note);\n+                                      },\n+                                    ),\n+                                  ],\n+                                ),\n+                              ),\n+                            );\n+                          },\n+                        ),\n+                      ],\n+                    ),\n+                    if (note.content.isNotEmpty) ...[\n+                      const SizedBox(height: 8),\n+                      Text(\n+                        note.content,\n+                        style: theme.textTheme.bodyMedium?.copyWith(\n+                          color: theme.textTheme.bodySmall?.color,\n+                        ),\n+                        maxLines: _isGridView ? 6 : 2,\n+                        overflow: TextOverflow.ellipsis,\n                       ),\n-                      maxLines: 1,\n-                      overflow: TextOverflow.ellipsis,\n+                    ],\n+                    const SizedBox(height: 8),\n+                    Text(\n+                      timeago.format(note.updatedAt),\n+                      style: theme.textTheme.bodySmall,\n                     ),\n-                  ),\n-                  IconButton(\n-                    icon: const Icon(Icons.more_vert),\n-                    onPressed: () {\n-                      showModalBottomSheet(\n-                        context: context,\n-                        builder:\n-                            (context) => SafeArea(\n-                              child: Column(\n-                                mainAxisSize: MainAxisSize.min,\n-                                children: [\n-                                  ListTile(\n-                                    leading: const Icon(Icons.edit),\n-                                    title: const Text('Edit'),\n-                                    onTap: () {\n-                                      Navigator.pop(context);\n-                                      _openEditor(context, note);\n-                                    },\n-                                  ),\n-                                  ListTile(\n-                                    leading: const Icon(\n-                                      Icons.delete,\n-                                      color: Colors.red,\n-                                    ),\n-                                    title: const Text('Delete'),\n-                                    onTap: () {\n-                                      Navigator.pop(context);\n-                                      _deleteNote(context, note);\n-                                    },\n-                                  ),\n-                                ],\n-                              ),\n-                            ),\n-                      );\n-                    },\n-                  ),\n-                ],\n-              ),\n-              if (note.content.isNotEmpty) ...[\n-                const SizedBox(height: 8),\n-                Text(\n-                  note.content,\n-                  style: theme.textTheme.bodyMedium?.copyWith(\n-                    color: theme.textTheme.bodySmall?.color,\n-                  ),\n-                  maxLines: _isGridView ? 6 : 2,\n-                  overflow: TextOverflow.ellipsis,\n+                  ],\n                 ),\n-              ],\n-              const SizedBox(height: 8),\n-              Text(\n-                timeago.format(note.updatedAt),\n-                style: theme.textTheme.bodySmall,\n               ),\n-            ],\n+            ),\n           ),\n         ),\n       ),\n     );\n   }\n \n-  void _openEditor(BuildContext context, NoteModel? note) {\n+  void _openEditor(BuildContext context, NoteModel? note, {String? heroTag}) {\n     Navigator.push(\n       context,\n-      MaterialPageRoute(builder: (_) => NoteEditorPage(originalNote: note)),\n+      PageRouteBuilder(\n+        pageBuilder: (context, animation, secondaryAnimation) => NoteEditorPage(\n+          originalNote: note,\n+          heroTag: heroTag,\n+        ),\n+        transitionsBuilder: (context, animation, secondaryAnimation, child) {\n+          const begin = Offset(0.0, 0.05);\n+          const end = Offset.zero;\n+          const curve = Curves.easeOut;\n+          var tween = Tween(begin: begin, end: end).chain(\n+            CurveTween(curve: curve),\n+          );\n+          var offsetAnimation = animation.drive(tween);\n+          var fadeAnimation = animation.drive(\n+            CurveTween(curve: curve),\n+          );\n+\n+          return FadeTransition(\n+            opacity: fadeAnimation,\n+            child: SlideTransition(\n+              position: offsetAnimation,\n+              child: child,\n+            ),\n+          );\n+        },\n+        transitionDuration: const Duration(milliseconds: 300),\n+      ),\n     ).then((_) => ref.invalidate(notesControllerProvider));\n   }\n \n   @override\n   Widget build(BuildContext context) {\n     final theme = Theme.of(context);\n     final notesAsync = ref.watch(notesControllerProvider);\n+    final saveState = ref.watch(noteSaveProvider);\n \n+    // Auto-refresh notes list when save completes\n+    ref.listen(noteSaveProvider, (previous, next) {\n+      if (previous?.isSaving == true && next.isSaving == false && !next.isError) {\n+        ref.invalidate(notesControllerProvider);\n+      }\n+    });\n+\n     return Scaffold(\n       appBar: AppBar(\n-        title: const Text('DriveNotes'),\n+        title: const Hero(\n+          tag: 'note_title',\n+          child: Material(\n+            color: Colors.transparent,\n+            child: Text('DriveNotes'),\n+          ),\n+        ),\n         actions: [\n           IconButton(\n-            icon: Icon(_isGridView ? Icons.view_list : Icons.grid_view),\n+            icon: AnimatedSwitcher(\n+              duration: const Duration(milliseconds: 200),\n+              child: Icon(\n+                _isGridView ? Icons.view_list : Icons.grid_view,\n+                key: ValueKey(_isGridView),\n+              ),\n+            ),\n             onPressed: () => setState(() => _isGridView = !_isGridView),\n             tooltip: _isGridView ? 'List View' : 'Grid View',\n           ),\n           IconButton(\n@@ -196,80 +261,158 @@\n             tooltip: 'Sign out',\n           ),\n         ],\n       ),\n-      body: notesAsync.when(\n-        loading: () => const Center(child: CircularProgressIndicator()),\n-        error:\n-            (error, stack) => Center(\n-              child: Column(\n-                mainAxisSize: MainAxisSize.min,\n-                children: [\n-                  const Icon(Icons.error_outline, size: 48, color: Colors.red),\n-                  const SizedBox(height: 16),\n-                  Text('Error: $error'),\n-                  const SizedBox(height: 16),\n-                  ElevatedButton(\n-                    onPressed: () => ref.invalidate(notesControllerProvider),\n-                    child: const Text('RETRY'),\n-                  ),\n-                ],\n+      body: Stack(\n+        children: [\n+          AnimatedSwitcher(\n+            duration: const Duration(milliseconds: 300),\n+            child: notesAsync.when(\n+              loading: () => const Center(child: CircularProgressIndicator()),\n+              error: (error, stack) => Center(\n+                child: Column(\n+                  mainAxisSize: MainAxisSize.min,\n+                  children: [\n+                    const Icon(Icons.error_outline, size: 48, color: Colors.red),\n+                    const SizedBox(height: 16),\n+                    Text('Error: $error'),\n+                    const SizedBox(height: 16),\n+                    ElevatedButton(\n+                      onPressed: () => ref.invalidate(notesControllerProvider),\n+                      child: const Text('RETRY'),\n+                    ),\n+                  ],\n+                ),\n               ),\n+              data: (notes) {\n+                if (notes.isEmpty) {\n+                  return TweenAnimationBuilder<double>(\n+                    tween: Tween(begin: 0.0, end: 1.0),\n+                    duration: const Duration(milliseconds: 500),\n+                    builder: (context, value, child) {\n+                      return Opacity(\n+                        opacity: value,\n+                        child: Transform.translate(\n+                          offset: Offset(0, 20 * (1 - value)),\n+                          child: child,\n+                        ),\n+                      );\n+                    },\n+                    child: Center(\n+                      child: Column(\n+                        mainAxisSize: MainAxisSize.min,\n+                        children: [\n+                          Icon(\n+                            Icons.note_add,\n+                            size: 64,\n+                            color: theme.colorScheme.primary.withOpacity(0.5),\n+                          ),\n+                          const SizedBox(height: 16),\n+                          Text(\n+                            'No notes yet',\n+                            style: theme.textTheme.titleLarge?.copyWith(\n+                              color: theme.colorScheme.onSurface.withOpacity(0.7),\n+                            ),\n+                          ),\n+                          const SizedBox(height: 8),\n+                          Text(\n+                            'Tap the + button to create your first note',\n+                            style: theme.textTheme.bodyMedium?.copyWith(\n+                              color: theme.colorScheme.onSurface.withOpacity(0.5),\n+                            ),\n+                          ),\n+                        ],\n+                      ),\n+                    ),\n+                  );\n+                }\n+\n+                return AnimatedSwitcher(\n+                  duration: const Duration(milliseconds: 300),\n+                  child: _isGridView\n+                      ? MasonryGridView.count(\n+                          key: const ValueKey('grid'),\n+                          padding: const EdgeInsets.all(8),\n+                          crossAxisCount:\n+                              MediaQuery.of(context).size.width > 600 ? 3 : 2,\n+                          mainAxisSpacing: 4,\n+                          crossAxisSpacing: 4,\n+                          itemCount: notes.length,\n+                          itemBuilder: (context, index) =>\n+                              _buildNoteCard(context, notes[index]),\n+                        )\n+                      : ListView.builder(\n+                          key: const ValueKey('list'),\n+                          padding: const EdgeInsets.all(8),\n+                          itemCount: notes.length,\n+                          itemBuilder: (context, index) =>\n+                              _buildNoteCard(context, notes[index]),\n+                        ),\n+                );\n+              },\n             ),\n-        data: (notes) {\n-          if (notes.isEmpty) {\n-            return Center(\n-              child: Column(\n-                mainAxisSize: MainAxisSize.min,\n-                children: [\n-                  Icon(\n-                    Icons.note_add,\n-                    size: 64,\n-                    color: theme.colorScheme.primary.withOpacity(0.5),\n-                  ),\n-                  const SizedBox(height: 16),\n-                  Text(\n-                    'No notes yet',\n-                    style: theme.textTheme.titleLarge?.copyWith(\n-                      color: theme.colorScheme.onSurface.withOpacity(0.7),\n+          ),\n+          // Save progress indicator\n+          AnimatedPositioned(\n+            duration: const Duration(milliseconds: 300),\n+            curve: Curves.easeOut,\n+            left: 0,\n+            right: 0,\n+            bottom: saveState.isSaving || saveState.message != null ? 0 : -100,\n+            child: Material(\n+              elevation: 8,\n+              child: Container(\n+                padding: const EdgeInsets.symmetric(\n+                  horizontal: 16,\n+                  vertical: 12,\n+                ),\n+                decoration: BoxDecoration(\n+                  color: saveState.isError\n+                      ? theme.colorScheme.errorContainer\n+                      : theme.colorScheme.primaryContainer,\n+                ),\n+                child: Row(\n+                  children: [\n+                    if (saveState.isSaving) ...[\n+                      const SizedBox(\n+                        height: 16,\n+                        width: 16,\n+                        child: CircularProgressIndicator(strokeWidth: 2),\n+                      ),\n+                      const SizedBox(width: 16),\n+                    ],\n+                    Expanded(\n+                      child: Text(\n+                        saveState.message ?? '',\n+                        style: theme.textTheme.bodyMedium?.copyWith(\n+                          color: saveState.isError\n+                              ? theme.colorScheme.onErrorContainer\n+                              : theme.colorScheme.onPrimaryContainer,\n+                        ),\n+                      ),\n                     ),\n-                  ),\n-                  const SizedBox(height: 8),\n-                  Text(\n-                    'Tap the + button to create your first note',\n-                    style: theme.textTheme.bodyMedium?.copyWith(\n-                      color: theme.colorScheme.onSurface.withOpacity(0.5),\n-                    ),\n-                  ),\n-                ],\n+                    if (saveState.isError)\n+                      TextButton(\n+                        onPressed: () {\n+                          ref.read(noteSaveProvider.notifier).state =\n+                              const NoteSaveState();\n+                        },\n+                        child: const Text('DISMISS'),\n+                      ),\n+                  ],\n+                ),\n               ),\n-            );\n-          }\n-\n-          if (_isGridView) {\n-            return MasonryGridView.count(\n-              padding: const EdgeInsets.all(8),\n-              crossAxisCount: MediaQuery.of(context).size.width > 600 ? 3 : 2,\n-              mainAxisSpacing: 4,\n-              crossAxisSpacing: 4,\n-              itemCount: notes.length,\n-              itemBuilder:\n-                  (context, index) => _buildNoteCard(context, notes[index]),\n-            );\n-          }\n-\n-          return ListView.builder(\n-            padding: const EdgeInsets.all(8),\n-            itemCount: notes.length,\n-            itemBuilder:\n-                (context, index) => _buildNoteCard(context, notes[index]),\n-          );\n-        },\n+            ),\n+          ),\n+        ],\n       ),\n-      floatingActionButton: FloatingActionButton(\n-        onPressed: () => _openEditor(context, null),\n-        tooltip: 'Add Note',\n-        child: const Icon(Icons.add),\n+      floatingActionButton: Hero(\n+        tag: 'note_input',\n+        child: FloatingActionButton(\n+          onPressed: () => _openEditor(context, null),\n+          tooltip: 'Add Note',\n+          child: const Icon(Icons.add),\n+        ),\n       ),\n     );\n   }\n }\n"
                },
                {
                    "date": 1744916296196,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,9 @@\n import 'package:drivenotes/features/notes/presentation/providers/note_editor_controller.dart';\n import 'package:drivenotes/note_editor_page.dart';\n import 'package:drivenotes/notes_controller.dart';\n import 'package:flutter/material.dart';\n+import 'package:flutter/services.dart';\n import 'package:flutter_riverpod/flutter_riverpod.dart';\n import 'package:go_router/go_router.dart';\n import 'package:url_launcher/url_launcher.dart';\n import 'package:flutter_staggered_grid_view/flutter_staggered_grid_view.dart';\n@@ -89,9 +90,10 @@\n           child: Card(\n             elevation: 2,\n             margin: const EdgeInsets.all(4),\n             child: InkWell(\n-              onTap: () => _openEditor(context, note, heroTag: 'note_${note.id}'),\n+              onTap:\n+                  () => _openEditor(context, note, heroTag: 'note_${note.id}'),\n               onLongPress: () => _deleteNote(context, note),\n               borderRadius: BorderRadius.circular(12),\n               child: Padding(\n                 padding: const EdgeInsets.all(16),\n@@ -121,38 +123,39 @@\n                           onPressed: () {\n                             HapticFeedback.lightImpact();\n                             showModalBottomSheet(\n                               context: context,\n-                              builder: (context) => SafeArea(\n-                                child: Column(\n-                                  mainAxisSize: MainAxisSize.min,\n-                                  children: [\n-                                    ListTile(\n-                                      leading: const Icon(Icons.edit),\n-                                      title: const Text('Edit'),\n-                                      onTap: () {\n-                                        Navigator.pop(context);\n-                                        _openEditor(\n-                                          context,\n-                                          note,\n-                                          heroTag: 'note_${note.id}',\n-                                        );\n-                                      },\n+                              builder:\n+                                  (context) => SafeArea(\n+                                    child: Column(\n+                                      mainAxisSize: MainAxisSize.min,\n+                                      children: [\n+                                        ListTile(\n+                                          leading: const Icon(Icons.edit),\n+                                          title: const Text('Edit'),\n+                                          onTap: () {\n+                                            Navigator.pop(context);\n+                                            _openEditor(\n+                                              context,\n+                                              note,\n+                                              heroTag: 'note_${note.id}',\n+                                            );\n+                                          },\n+                                        ),\n+                                        ListTile(\n+                                          leading: const Icon(\n+                                            Icons.delete,\n+                                            color: Colors.red,\n+                                          ),\n+                                          title: const Text('Delete'),\n+                                          onTap: () {\n+                                            Navigator.pop(context);\n+                                            _deleteNote(context, note);\n+                                          },\n+                                        ),\n+                                      ],\n                                     ),\n-                                    ListTile(\n-                                      leading: const Icon(\n-                                        Icons.delete,\n-                                        color: Colors.red,\n-                                      ),\n-                                      title: const Text('Delete'),\n-                                      onTap: () {\n-                                        Navigator.pop(context);\n-                                        _deleteNote(context, note);\n-                                      },\n-                                    ),\n-                                  ],\n-                                ),\n-                              ),\n+                                  ),\n                             );\n                           },\n                         ),\n                       ],\n@@ -186,30 +189,25 @@\n   void _openEditor(BuildContext context, NoteModel? note, {String? heroTag}) {\n     Navigator.push(\n       context,\n       PageRouteBuilder(\n-        pageBuilder: (context, animation, secondaryAnimation) => NoteEditorPage(\n-          originalNote: note,\n-          heroTag: heroTag,\n-        ),\n+        pageBuilder:\n+            (context, animation, secondaryAnimation) =>\n+                NoteEditorPage(originalNote: note, heroTag: heroTag),\n         transitionsBuilder: (context, animation, secondaryAnimation, child) {\n           const begin = Offset(0.0, 0.05);\n           const end = Offset.zero;\n           const curve = Curves.easeOut;\n-          var tween = Tween(begin: begin, end: end).chain(\n-            CurveTween(curve: curve),\n-          );\n+          var tween = Tween(\n+            begin: begin,\n+            end: end,\n+          ).chain(CurveTween(curve: curve));\n           var offsetAnimation = animation.drive(tween);\n-          var fadeAnimation = animation.drive(\n-            CurveTween(curve: curve),\n-          );\n+          var fadeAnimation = animation.drive(CurveTween(curve: curve));\n \n           return FadeTransition(\n             opacity: fadeAnimation,\n-            child: SlideTransition(\n-              position: offsetAnimation,\n-              child: child,\n-            ),\n+            child: SlideTransition(position: offsetAnimation, child: child),\n           );\n         },\n         transitionDuration: const Duration(milliseconds: 300),\n       ),\n@@ -223,21 +221,20 @@\n     final saveState = ref.watch(noteSaveProvider);\n \n     // Auto-refresh notes list when save completes\n     ref.listen(noteSaveProvider, (previous, next) {\n-      if (previous?.isSaving == true && next.isSaving == false && !next.isError) {\n+      if (previous?.isSaving == true &&\n+          next.isSaving == false &&\n+          !next.isError) {\n         ref.invalidate(notesControllerProvider);\n       }\n     });\n \n     return Scaffold(\n       appBar: AppBar(\n         title: const Hero(\n           tag: 'note_title',\n-          child: Material(\n-            color: Colors.transparent,\n-            child: Text('DriveNotes'),\n-          ),\n+          child: Material(color: Colors.transparent, child: Text('DriveNotes')),\n         ),\n         actions: [\n           IconButton(\n             icon: AnimatedSwitcher(\n@@ -267,23 +264,29 @@\n           AnimatedSwitcher(\n             duration: const Duration(milliseconds: 300),\n             child: notesAsync.when(\n               loading: () => const Center(child: CircularProgressIndicator()),\n-              error: (error, stack) => Center(\n-                child: Column(\n-                  mainAxisSize: MainAxisSize.min,\n-                  children: [\n-                    const Icon(Icons.error_outline, size: 48, color: Colors.red),\n-                    const SizedBox(height: 16),\n-                    Text('Error: $error'),\n-                    const SizedBox(height: 16),\n-                    ElevatedButton(\n-                      onPressed: () => ref.invalidate(notesControllerProvider),\n-                      child: const Text('RETRY'),\n+              error:\n+                  (error, stack) => Center(\n+                    child: Column(\n+                      mainAxisSize: MainAxisSize.min,\n+                      children: [\n+                        const Icon(\n+                          Icons.error_outline,\n+                          size: 48,\n+                          color: Colors.red,\n+                        ),\n+                        const SizedBox(height: 16),\n+                        Text('Error: $error'),\n+                        const SizedBox(height: 16),\n+                        ElevatedButton(\n+                          onPressed:\n+                              () => ref.invalidate(notesControllerProvider),\n+                          child: const Text('RETRY'),\n+                        ),\n+                      ],\n                     ),\n-                  ],\n-                ),\n-              ),\n+                  ),\n               data: (notes) {\n                 if (notes.isEmpty) {\n                   return TweenAnimationBuilder<double>(\n                     tween: Tween(begin: 0.0, end: 1.0),\n@@ -309,16 +312,20 @@\n                           const SizedBox(height: 16),\n                           Text(\n                             'No notes yet',\n                             style: theme.textTheme.titleLarge?.copyWith(\n-                              color: theme.colorScheme.onSurface.withOpacity(0.7),\n+                              color: theme.colorScheme.onSurface.withOpacity(\n+                                0.7,\n+                              ),\n                             ),\n                           ),\n                           const SizedBox(height: 8),\n                           Text(\n                             'Tap the + button to create your first note',\n                             style: theme.textTheme.bodyMedium?.copyWith(\n-                              color: theme.colorScheme.onSurface.withOpacity(0.5),\n+                              color: theme.colorScheme.onSurface.withOpacity(\n+                                0.5,\n+                              ),\n                             ),\n                           ),\n                         ],\n                       ),\n@@ -327,27 +334,30 @@\n                 }\n \n                 return AnimatedSwitcher(\n                   duration: const Duration(milliseconds: 300),\n-                  child: _isGridView\n-                      ? MasonryGridView.count(\n-                          key: const ValueKey('grid'),\n-                          padding: const EdgeInsets.all(8),\n-                          crossAxisCount:\n-                              MediaQuery.of(context).size.width > 600 ? 3 : 2,\n-                          mainAxisSpacing: 4,\n-                          crossAxisSpacing: 4,\n-                          itemCount: notes.length,\n-                          itemBuilder: (context, index) =>\n-                              _buildNoteCard(context, notes[index]),\n-                        )\n-                      : ListView.builder(\n-                          key: const ValueKey('list'),\n-                          padding: const EdgeInsets.all(8),\n-                          itemCount: notes.length,\n-                          itemBuilder: (context, index) =>\n-                              _buildNoteCard(context, notes[index]),\n-                        ),\n+                  child:\n+                      _isGridView\n+                          ? MasonryGridView.count(\n+                            key: const ValueKey('grid'),\n+                            padding: const EdgeInsets.all(8),\n+                            crossAxisCount:\n+                                MediaQuery.of(context).size.width > 600 ? 3 : 2,\n+                            mainAxisSpacing: 4,\n+                            crossAxisSpacing: 4,\n+                            itemCount: notes.length,\n+                            itemBuilder:\n+                                (context, index) =>\n+                                    _buildNoteCard(context, notes[index]),\n+                          )\n+                          : ListView.builder(\n+                            key: const ValueKey('list'),\n+                            padding: const EdgeInsets.all(8),\n+                            itemCount: notes.length,\n+                            itemBuilder:\n+                                (context, index) =>\n+                                    _buildNoteCard(context, notes[index]),\n+                          ),\n                 );\n               },\n             ),\n           ),\n@@ -365,11 +375,12 @@\n                   horizontal: 16,\n                   vertical: 12,\n                 ),\n                 decoration: BoxDecoration(\n-                  color: saveState.isError\n-                      ? theme.colorScheme.errorContainer\n-                      : theme.colorScheme.primaryContainer,\n+                  color:\n+                      saveState.isError\n+                          ? theme.colorScheme.errorContainer\n+                          : theme.colorScheme.primaryContainer,\n                 ),\n                 child: Row(\n                   children: [\n                     if (saveState.isSaving) ...[\n@@ -383,11 +394,12 @@\n                     Expanded(\n                       child: Text(\n                         saveState.message ?? '',\n                         style: theme.textTheme.bodyMedium?.copyWith(\n-                          color: saveState.isError\n-                              ? theme.colorScheme.onErrorContainer\n-                              : theme.colorScheme.onPrimaryContainer,\n+                          color:\n+                              saveState.isError\n+                                  ? theme.colorScheme.onErrorContainer\n+                                  : theme.colorScheme.onPrimaryContainer,\n                         ),\n                       ),\n                     ),\n                     if (saveState.isError)\n"
                },
                {
                    "date": 1744916353008,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -81,19 +81,18 @@\n \n   Widget _buildNoteCard(BuildContext context, NoteModel note) {\n     final theme = Theme.of(context);\n     return Hero(\n-      tag: 'note_${note.id}',\n+      tag: 'note_card_${note.id}',\n       child: Material(\n         color: Colors.transparent,\n         child: AnimatedContainer(\n           duration: const Duration(milliseconds: 200),\n           child: Card(\n             elevation: 2,\n             margin: const EdgeInsets.all(4),\n             child: InkWell(\n-              onTap:\n-                  () => _openEditor(context, note, heroTag: 'note_${note.id}'),\n+              onTap: () => _openEditor(context, note, heroTag: 'note_card_${note.id}'),\n               onLongPress: () => _deleteNote(context, note),\n               borderRadius: BorderRadius.circular(12),\n               child: Padding(\n                 padding: const EdgeInsets.all(16),\n@@ -102,60 +101,53 @@\n                   children: [\n                     Row(\n                       children: [\n                         Expanded(\n-                          child: Hero(\n-                            tag: 'note_${note.id}_input',\n-                            child: Material(\n-                              color: Colors.transparent,\n-                              child: Text(\n-                                note.title.replaceAll(RegExp(r'\\.txt$'), ''),\n-                                style: theme.textTheme.titleMedium?.copyWith(\n-                                  fontWeight: FontWeight.bold,\n-                                ),\n-                                maxLines: 1,\n-                                overflow: TextOverflow.ellipsis,\n-                              ),\n+                          child: Text(\n+                            note.title.replaceAll(RegExp(r'\\.txt$'), ''),\n+                            style: theme.textTheme.titleMedium?.copyWith(\n+                              fontWeight: FontWeight.bold,\n                             ),\n+                            maxLines: 1,\n+                            overflow: TextOverflow.ellipsis,\n                           ),\n                         ),\n                         IconButton(\n                           icon: const Icon(Icons.more_vert),\n                           onPressed: () {\n                             HapticFeedback.lightImpact();\n                             showModalBottomSheet(\n                               context: context,\n-                              builder:\n-                                  (context) => SafeArea(\n-                                    child: Column(\n-                                      mainAxisSize: MainAxisSize.min,\n-                                      children: [\n-                                        ListTile(\n-                                          leading: const Icon(Icons.edit),\n-                                          title: const Text('Edit'),\n-                                          onTap: () {\n-                                            Navigator.pop(context);\n-                                            _openEditor(\n-                                              context,\n-                                              note,\n-                                              heroTag: 'note_${note.id}',\n-                                            );\n-                                          },\n-                                        ),\n-                                        ListTile(\n-                                          leading: const Icon(\n-                                            Icons.delete,\n-                                            color: Colors.red,\n-                                          ),\n-                                          title: const Text('Delete'),\n-                                          onTap: () {\n-                                            Navigator.pop(context);\n-                                            _deleteNote(context, note);\n-                                          },\n-                                        ),\n-                                      ],\n+                              builder: (context) => SafeArea(\n+                                child: Column(\n+                                  mainAxisSize: MainAxisSize.min,\n+                                  children: [\n+                                    ListTile(\n+                                      leading: const Icon(Icons.edit),\n+                                      title: const Text('Edit'),\n+                                      onTap: () {\n+                                        Navigator.pop(context);\n+                                        _openEditor(\n+                                          context,\n+                                          note,\n+                                          heroTag: 'note_card_${note.id}',\n+                                        );\n+                                      },\n                                     ),\n-                                  ),\n+                                    ListTile(\n+                                      leading: const Icon(\n+                                        Icons.delete,\n+                                        color: Colors.red,\n+                                      ),\n+                                      title: const Text('Delete'),\n+                                      onTap: () {\n+                                        Navigator.pop(context);\n+                                        _deleteNote(context, note);\n+                                      },\n+                                    ),\n+                                  ],\n+                                ),\n+                              ),\n                             );\n                           },\n                         ),\n                       ],\n@@ -416,15 +408,12 @@\n             ),\n           ),\n         ],\n       ),\n-      floatingActionButton: Hero(\n-        tag: 'note_input',\n-        child: FloatingActionButton(\n-          onPressed: () => _openEditor(context, null),\n-          tooltip: 'Add Note',\n-          child: const Icon(Icons.add),\n-        ),\n+      floatingActionButton: FloatingActionButton(\n+        onPressed: () => _openEditor(context, null, heroTag: 'new_note'),\n+        tooltip: 'Add Note',\n+        child: const Icon(Icons.add),\n       ),\n     );\n   }\n }\n"
                },
                {
                    "date": 1744916658268,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,8 +9,10 @@\n import 'package:url_launcher/url_launcher.dart';\n import 'package:flutter_staggered_grid_view/flutter_staggered_grid_view.dart';\n import 'package:timeago/timeago.dart' as timeago;\n import 'package:drivenotes/features/notes/presentation/providers/note_save_provider.dart';\n+import 'package:drivenotes/features/notes/presentation/providers/theme_provider.dart';\n+import 'package:google_sign_in/google_sign_in.dart';\n \n class NotesListPage extends ConsumerStatefulWidget {\n   const NotesListPage({super.key});\n \n@@ -19,9 +21,37 @@\n }\n \n class _NotesListPageState extends ConsumerState<NotesListPage> {\n   bool _isGridView = true;\n+  late GoogleSignInAccount? _currentUser;\n \n+  @override\n+  void initState() {\n+    super.initState();\n+    _loadUser();\n+  }\n+\n+  Future<void> _loadUser() async {\n+    _currentUser = await GoogleSignIn().signInSilently();\n+    if (mounted) setState(() {});\n+  }\n+\n+  Future<void> _openProfile() async {\n+    if (_currentUser == null) {\n+      _currentUser = await GoogleSignIn().signInSilently();\n+      if (!mounted) return;\n+    }\n+\n+    if (_currentUser != null && mounted) {\n+      Navigator.push(\n+        context,\n+        MaterialPageRoute(\n+          builder: (context) => ProfilePage(user: _currentUser!),\n+        ),\n+      );\n+    }\n+  }\n+\n   Future<void> _openDriveFolder() async {\n     const url = 'https://drive.google.com';\n     if (await canLaunchUrl(Uri.parse(url))) {\n       await launchUrl(Uri.parse(url));\n@@ -90,9 +120,14 @@\n           child: Card(\n             elevation: 2,\n             margin: const EdgeInsets.all(4),\n             child: InkWell(\n-              onTap: () => _openEditor(context, note, heroTag: 'note_card_${note.id}'),\n+              onTap:\n+                  () => _openEditor(\n+                    context,\n+                    note,\n+                    heroTag: 'note_card_${note.id}',\n+                  ),\n               onLongPress: () => _deleteNote(context, note),\n               borderRadius: BorderRadius.circular(12),\n               child: Padding(\n                 padding: const EdgeInsets.all(16),\n@@ -116,38 +151,39 @@\n                           onPressed: () {\n                             HapticFeedback.lightImpact();\n                             showModalBottomSheet(\n                               context: context,\n-                              builder: (context) => SafeArea(\n-                                child: Column(\n-                                  mainAxisSize: MainAxisSize.min,\n-                                  children: [\n-                                    ListTile(\n-                                      leading: const Icon(Icons.edit),\n-                                      title: const Text('Edit'),\n-                                      onTap: () {\n-                                        Navigator.pop(context);\n-                                        _openEditor(\n-                                          context,\n-                                          note,\n-                                          heroTag: 'note_card_${note.id}',\n-                                        );\n-                                      },\n+                              builder:\n+                                  (context) => SafeArea(\n+                                    child: Column(\n+                                      mainAxisSize: MainAxisSize.min,\n+                                      children: [\n+                                        ListTile(\n+                                          leading: const Icon(Icons.edit),\n+                                          title: const Text('Edit'),\n+                                          onTap: () {\n+                                            Navigator.pop(context);\n+                                            _openEditor(\n+                                              context,\n+                                              note,\n+                                              heroTag: 'note_card_${note.id}',\n+                                            );\n+                                          },\n+                                        ),\n+                                        ListTile(\n+                                          leading: const Icon(\n+                                            Icons.delete,\n+                                            color: Colors.red,\n+                                          ),\n+                                          title: const Text('Delete'),\n+                                          onTap: () {\n+                                            Navigator.pop(context);\n+                                            _deleteNote(context, note);\n+                                          },\n+                                        ),\n+                                      ],\n                                     ),\n-                                    ListTile(\n-                                      leading: const Icon(\n-                                        Icons.delete,\n-                                        color: Colors.red,\n-                                      ),\n-                                      title: const Text('Delete'),\n-                                      onTap: () {\n-                                        Navigator.pop(context);\n-                                        _deleteNote(context, note);\n-                                      },\n-                                    ),\n-                                  ],\n-                                ),\n-                              ),\n+                                  ),\n                             );\n                           },\n                         ),\n                       ],\n@@ -210,8 +246,9 @@\n   Widget build(BuildContext context) {\n     final theme = Theme.of(context);\n     final notesAsync = ref.watch(notesControllerProvider);\n     final saveState = ref.watch(noteSaveProvider);\n+    final themeMode = ref.watch(themeProvider);\n \n     // Auto-refresh notes list when save completes\n     ref.listen(noteSaveProvider, (previous, next) {\n       if (previous?.isSaving == true &&\n@@ -239,8 +276,28 @@\n             onPressed: () => setState(() => _isGridView = !_isGridView),\n             tooltip: _isGridView ? 'List View' : 'Grid View',\n           ),\n           IconButton(\n+            icon: Hero(\n+              tag: 'profile_image',\n+              child: CircleAvatar(\n+                radius: 14,\n+                backgroundImage: _currentUser?.photoUrl != null\n+                    ? NetworkImage(_currentUser!.photoUrl!)\n+                    : null,\n+                backgroundColor: theme.colorScheme.primary.withOpacity(0.1),\n+                child: _currentUser?.photoUrl == null\n+                    ? Text(\n+                        _currentUser?.displayName?[0].toUpperCase() ?? 'U',\n+                        style: theme.textTheme.bodySmall,\n+                      )\n+                    : null,\n+              ),\n+            ),\n+            onPressed: _openProfile,\n+            tooltip: 'Profile',\n+          ),\n+          IconButton(\n             icon: const Icon(Icons.folder_outlined),\n             onPressed: _openDriveFolder,\n             tooltip: 'Open in Google Drive',\n           ),\n"
                },
                {
                    "date": 1744916677406,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,8 +11,9 @@\n import 'package:timeago/timeago.dart' as timeago;\n import 'package:drivenotes/features/notes/presentation/providers/note_save_provider.dart';\n import 'package:drivenotes/features/notes/presentation/providers/theme_provider.dart';\n import 'package:google_sign_in/google_sign_in.dart';\n+import 'package:drivenotes/features/notes/presentation/pages/profile_page.dart';\n \n class NotesListPage extends ConsumerStatefulWidget {\n   const NotesListPage({super.key});\n \n@@ -280,18 +281,20 @@\n             icon: Hero(\n               tag: 'profile_image',\n               child: CircleAvatar(\n                 radius: 14,\n-                backgroundImage: _currentUser?.photoUrl != null\n-                    ? NetworkImage(_currentUser!.photoUrl!)\n-                    : null,\n+                backgroundImage:\n+                    _currentUser?.photoUrl != null\n+                        ? NetworkImage(_currentUser!.photoUrl!)\n+                        : null,\n                 backgroundColor: theme.colorScheme.primary.withOpacity(0.1),\n-                child: _currentUser?.photoUrl == null\n-                    ? Text(\n-                        _currentUser?.displayName?[0].toUpperCase() ?? 'U',\n-                        style: theme.textTheme.bodySmall,\n-                      )\n-                    : null,\n+                child:\n+                    _currentUser?.photoUrl == null\n+                        ? Text(\n+                          _currentUser?.displayName?[0].toUpperCase() ?? 'U',\n+                          style: theme.textTheme.bodySmall,\n+                        )\n+                        : null,\n               ),\n             ),\n             onPressed: _openProfile,\n             tooltip: 'Profile',\n"
                },
                {
                    "date": 1744916690310,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,15 +35,10 @@\n     _currentUser = await GoogleSignIn().signInSilently();\n     if (mounted) setState(() {});\n   }\n \n-  Future<void> _openProfile() async {\n-    if (_currentUser == null) {\n-      _currentUser = await GoogleSignIn().signInSilently();\n-      if (!mounted) return;\n-    }\n-\n-    if (_currentUser != null && mounted) {\n+  void _openProfile() {\n+    if (_currentUser != null) {\n       Navigator.push(\n         context,\n         MaterialPageRoute(\n           builder: (context) => ProfilePage(user: _currentUser!),\n"
                },
                {
                    "date": 1744916964869,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -128,8 +128,9 @@\n               child: Padding(\n                 padding: const EdgeInsets.all(16),\n                 child: Column(\n                   crossAxisAlignment: CrossAxisAlignment.start,\n+                  mainAxisSize: MainAxisSize.min,\n                   children: [\n                     Row(\n                       children: [\n                         Expanded(\n"
                },
                {
                    "date": 1744917049716,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,19 +22,33 @@\n }\n \n class _NotesListPageState extends ConsumerState<NotesListPage> {\n   bool _isGridView = true;\n-  late GoogleSignInAccount? _currentUser;\n+  GoogleSignInAccount? _currentUser;\n \n   @override\n   void initState() {\n     super.initState();\n     _loadUser();\n   }\n \n+  @override\n+  void didChangeDependencies() {\n+    super.didChangeDependencies();\n+    _loadUser();\n+  }\n+\n   Future<void> _loadUser() async {\n-    _currentUser = await GoogleSignIn().signInSilently();\n-    if (mounted) setState(() {});\n+    try {\n+      final user = await GoogleSignIn().signInSilently();\n+      if (mounted) {\n+        setState(() {\n+          _currentUser = user;\n+        });\n+      }\n+    } catch (e) {\n+      debugPrint('Error loading user: $e');\n+    }\n   }\n \n   void _openProfile() {\n     if (_currentUser != null) {\n"
                },
                {
                    "date": 1744917093445,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -162,39 +162,38 @@\n                           onPressed: () {\n                             HapticFeedback.lightImpact();\n                             showModalBottomSheet(\n                               context: context,\n-                              builder:\n-                                  (context) => SafeArea(\n-                                    child: Column(\n-                                      mainAxisSize: MainAxisSize.min,\n-                                      children: [\n-                                        ListTile(\n-                                          leading: const Icon(Icons.edit),\n-                                          title: const Text('Edit'),\n-                                          onTap: () {\n-                                            Navigator.pop(context);\n-                                            _openEditor(\n-                                              context,\n-                                              note,\n-                                              heroTag: 'note_card_${note.id}',\n-                                            );\n-                                          },\n-                                        ),\n-                                        ListTile(\n-                                          leading: const Icon(\n-                                            Icons.delete,\n-                                            color: Colors.red,\n-                                          ),\n-                                          title: const Text('Delete'),\n-                                          onTap: () {\n-                                            Navigator.pop(context);\n-                                            _deleteNote(context, note);\n-                                          },\n-                                        ),\n-                                      ],\n+                              builder: (context) => SafeArea(\n+                                child: ListView(\n+                                  shrinkWrap: true,\n+                                  children: [\n+                                    ListTile(\n+                                      leading: const Icon(Icons.edit),\n+                                      title: const Text('Edit'),\n+                                      onTap: () {\n+                                        Navigator.pop(context);\n+                                        _openEditor(\n+                                          context,\n+                                          note,\n+                                          heroTag: 'note_card_${note.id}',\n+                                        );\n+                                      },\n                                     ),\n-                                  ),\n+                                    ListTile(\n+                                      leading: const Icon(\n+                                        Icons.delete,\n+                                        color: Colors.red,\n+                                      ),\n+                                      title: const Text('Delete'),\n+                                      onTap: () {\n+                                        Navigator.pop(context);\n+                                        _deleteNote(context, note);\n+                                      },\n+                                    ),\n+                                  ],\n+                                ),\n+                              ),\n                             );\n                           },\n                         ),\n                       ],\n"
                },
                {
                    "date": 1744917140265,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -130,92 +130,99 @@\n           child: Card(\n             elevation: 2,\n             margin: const EdgeInsets.all(4),\n             child: InkWell(\n-              onTap:\n-                  () => _openEditor(\n-                    context,\n-                    note,\n-                    heroTag: 'note_card_${note.id}',\n-                  ),\n+              onTap: () => _openEditor(\n+                context,\n+                note,\n+                heroTag: 'note_card_${note.id}',\n+              ),\n               onLongPress: () => _deleteNote(context, note),\n               borderRadius: BorderRadius.circular(12),\n-              child: Padding(\n-                padding: const EdgeInsets.all(16),\n-                child: Column(\n-                  crossAxisAlignment: CrossAxisAlignment.start,\n-                  mainAxisSize: MainAxisSize.min,\n-                  children: [\n-                    Row(\n-                      children: [\n+              child: ConstrainedBox(\n+                constraints: BoxConstraints(\n+                  minHeight: 100,\n+                  maxHeight: _isGridView ? 300 : 150,\n+                ),\n+                child: Padding(\n+                  padding: const EdgeInsets.all(16),\n+                  child: Column(\n+                    crossAxisAlignment: CrossAxisAlignment.start,\n+                    mainAxisSize: MainAxisSize.min,\n+                    children: [\n+                      Row(\n+                        children: [\n+                          Expanded(\n+                            child: Text(\n+                              note.title.replaceAll(RegExp(r'\\.txt$'), ''),\n+                              style: theme.textTheme.titleMedium?.copyWith(\n+                                fontWeight: FontWeight.bold,\n+                              ),\n+                              maxLines: 1,\n+                              overflow: TextOverflow.ellipsis,\n+                            ),\n+                          ),\n+                          IconButton(\n+                            icon: const Icon(Icons.more_vert),\n+                            onPressed: () {\n+                              HapticFeedback.lightImpact();\n+                              showModalBottomSheet(\n+                                context: context,\n+                                builder: (context) => SafeArea(\n+                                  child: ListView(\n+                                    shrinkWrap: true,\n+                                    children: [\n+                                      ListTile(\n+                                        leading: const Icon(Icons.edit),\n+                                        title: const Text('Edit'),\n+                                        onTap: () {\n+                                          Navigator.pop(context);\n+                                          _openEditor(\n+                                            context,\n+                                            note,\n+                                            heroTag: 'note_card_${note.id}',\n+                                          );\n+                                        },\n+                                      ),\n+                                      ListTile(\n+                                        leading: const Icon(\n+                                          Icons.delete,\n+                                          color: Colors.red,\n+                                        ),\n+                                        title: const Text('Delete'),\n+                                        onTap: () {\n+                                          Navigator.pop(context);\n+                                          _deleteNote(context, note);\n+                                        },\n+                                      ),\n+                                    ],\n+                                  ),\n+                                ),\n+                              );\n+                            },\n+                          ),\n+                        ],\n+                      ),\n+                      if (note.content.isNotEmpty) ...[\n+                        const SizedBox(height: 8),\n                         Expanded(\n                           child: Text(\n-                            note.title.replaceAll(RegExp(r'\\.txt$'), ''),\n-                            style: theme.textTheme.titleMedium?.copyWith(\n-                              fontWeight: FontWeight.bold,\n+                            note.content,\n+                            style: theme.textTheme.bodyMedium?.copyWith(\n+                              color: theme.textTheme.bodySmall?.color,\n                             ),\n-                            maxLines: 1,\n+                            maxLines: _isGridView ? 6 : 2,\n                             overflow: TextOverflow.ellipsis,\n                           ),\n                         ),\n-                        IconButton(\n-                          icon: const Icon(Icons.more_vert),\n-                          onPressed: () {\n-                            HapticFeedback.lightImpact();\n-                            showModalBottomSheet(\n-                              context: context,\n-                              builder: (context) => SafeArea(\n-                                child: ListView(\n-                                  shrinkWrap: true,\n-                                  children: [\n-                                    ListTile(\n-                                      leading: const Icon(Icons.edit),\n-                                      title: const Text('Edit'),\n-                                      onTap: () {\n-                                        Navigator.pop(context);\n-                                        _openEditor(\n-                                          context,\n-                                          note,\n-                                          heroTag: 'note_card_${note.id}',\n-                                        );\n-                                      },\n-                                    ),\n-                                    ListTile(\n-                                      leading: const Icon(\n-                                        Icons.delete,\n-                                        color: Colors.red,\n-                                      ),\n-                                      title: const Text('Delete'),\n-                                      onTap: () {\n-                                        Navigator.pop(context);\n-                                        _deleteNote(context, note);\n-                                      },\n-                                    ),\n-                                  ],\n-                                ),\n-                              ),\n-                            );\n-                          },\n-                        ),\n                       ],\n-                    ),\n-                    if (note.content.isNotEmpty) ...[\n                       const SizedBox(height: 8),\n                       Text(\n-                        note.content,\n-                        style: theme.textTheme.bodyMedium?.copyWith(\n-                          color: theme.textTheme.bodySmall?.color,\n-                        ),\n-                        maxLines: _isGridView ? 6 : 2,\n-                        overflow: TextOverflow.ellipsis,\n+                        timeago.format(note.updatedAt),\n+                        style: theme.textTheme.bodySmall,\n                       ),\n                     ],\n-                    const SizedBox(height: 8),\n-                    Text(\n-                      timeago.format(note.updatedAt),\n-                      style: theme.textTheme.bodySmall,\n-                    ),\n-                  ],\n+                  ),\n                 ),\n               ),\n             ),\n           ),\n"
                },
                {
                    "date": 1744917781646,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -130,13 +130,14 @@\n           child: Card(\n             elevation: 2,\n             margin: const EdgeInsets.all(4),\n             child: InkWell(\n-              onTap: () => _openEditor(\n-                context,\n-                note,\n-                heroTag: 'note_card_${note.id}',\n-              ),\n+              onTap:\n+                  () => _openEditor(\n+                    context,\n+                    note,\n+                    heroTag: 'note_card_${note.id}',\n+                  ),\n               onLongPress: () => _deleteNote(context, note),\n               borderRadius: BorderRadius.circular(12),\n               child: ConstrainedBox(\n                 constraints: BoxConstraints(\n@@ -166,38 +167,39 @@\n                             onPressed: () {\n                               HapticFeedback.lightImpact();\n                               showModalBottomSheet(\n                                 context: context,\n-                                builder: (context) => SafeArea(\n-                                  child: ListView(\n-                                    shrinkWrap: true,\n-                                    children: [\n-                                      ListTile(\n-                                        leading: const Icon(Icons.edit),\n-                                        title: const Text('Edit'),\n-                                        onTap: () {\n-                                          Navigator.pop(context);\n-                                          _openEditor(\n-                                            context,\n-                                            note,\n-                                            heroTag: 'note_card_${note.id}',\n-                                          );\n-                                        },\n+                                builder:\n+                                    (context) => SafeArea(\n+                                      child: ListView(\n+                                        shrinkWrap: true,\n+                                        children: [\n+                                          ListTile(\n+                                            leading: const Icon(Icons.edit),\n+                                            title: const Text('Edit'),\n+                                            onTap: () {\n+                                              Navigator.pop(context);\n+                                              _openEditor(\n+                                                context,\n+                                                note,\n+                                                heroTag: 'note_card_${note.id}',\n+                                              );\n+                                            },\n+                                          ),\n+                                          ListTile(\n+                                            leading: const Icon(\n+                                              Icons.delete,\n+                                              color: Colors.red,\n+                                            ),\n+                                            title: const Text('Delete'),\n+                                            onTap: () {\n+                                              Navigator.pop(context);\n+                                              _deleteNote(context, note);\n+                                            },\n+                                          ),\n+                                        ],\n                                       ),\n-                                      ListTile(\n-                                        leading: const Icon(\n-                                          Icons.delete,\n-                                          color: Colors.red,\n-                                        ),\n-                                        title: const Text('Delete'),\n-                                        onTap: () {\n-                                          Navigator.pop(context);\n-                                          _deleteNote(context, note);\n-                                        },\n-                                      ),\n-                                    ],\n-                                  ),\n-                                ),\n+                                    ),\n                               );\n                             },\n                           ),\n                         ],\n"
                },
                {
                    "date": 1744919074799,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,8 +23,9 @@\n \n class _NotesListPageState extends ConsumerState<NotesListPage> {\n   bool _isGridView = true;\n   GoogleSignInAccount? _currentUser;\n+  bool _isLoadingUser = false;\n \n   @override\n   void initState() {\n     super.initState();\n@@ -37,29 +38,56 @@\n     _loadUser();\n   }\n \n   Future<void> _loadUser() async {\n+    if (_isLoadingUser) return;\n+    \n     try {\n-      final user = await GoogleSignIn().signInSilently();\n+      setState(() => _isLoadingUser = true);\n+      final googleSignIn = GoogleSignIn();\n+      \n+      // First try to get current user\n+      _currentUser = googleSignIn.currentUser;\n+      \n+      // If no current user, try silent sign in\n+      if (_currentUser == null) {\n+        _currentUser = await googleSignIn.signInSilently();\n+      }\n+      \n       if (mounted) {\n         setState(() {\n-          _currentUser = user;\n+          _isLoadingUser = false;\n         });\n       }\n     } catch (e) {\n       debugPrint('Error loading user: $e');\n+      if (mounted) {\n+        setState(() {\n+          _isLoadingUser = false;\n+          _currentUser = null;\n+        });\n+      }\n     }\n   }\n \n   void _openProfile() {\n-    if (_currentUser != null) {\n-      Navigator.push(\n-        context,\n-        MaterialPageRoute(\n-          builder: (context) => ProfilePage(user: _currentUser!),\n+    if (_currentUser == null) {\n+      ScaffoldMessenger.of(context).showSnackBar(\n+        const SnackBar(\n+          content: Text('Please sign in again'),\n+          duration: Duration(seconds: 2),\n         ),\n       );\n+      context.go('/login');\n+      return;\n     }\n+\n+    Navigator.push(\n+      context,\n+      MaterialPageRoute(\n+        builder: (context) => ProfilePage(user: _currentUser!),\n+      ),\n+    );\n   }\n \n   Future<void> _openDriveFolder() async {\n     const url = 'https://drive.google.com';\n"
                },
                {
                    "date": 1744919187580,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,21 +39,21 @@\n   }\n \n   Future<void> _loadUser() async {\n     if (_isLoadingUser) return;\n-    \n+\n     try {\n       setState(() => _isLoadingUser = true);\n       final googleSignIn = GoogleSignIn();\n-      \n+\n       // First try to get current user\n       _currentUser = googleSignIn.currentUser;\n-      \n+\n       // If no current user, try silent sign in\n       if (_currentUser == null) {\n         _currentUser = await googleSignIn.signInSilently();\n       }\n-      \n+\n       if (mounted) {\n         setState(() {\n           _isLoadingUser = false;\n         });\n@@ -69,9 +69,9 @@\n     }\n   }\n \n   void _openProfile() {\n-    if (_currentUser == null) {\n+    if (_currentUser == null || !mounted) {\n       ScaffoldMessenger.of(context).showSnackBar(\n         const SnackBar(\n           content: Text('Please sign in again'),\n           duration: Duration(seconds: 2),\n@@ -80,14 +80,18 @@\n       context.go('/login');\n       return;\n     }\n \n-    Navigator.push(\n-      context,\n-      MaterialPageRoute(\n-        builder: (context) => ProfilePage(user: _currentUser!),\n-      ),\n-    );\n+    // Create a local final variable to prevent null issues during navigation\n+    final user = _currentUser;\n+    if (user != null) {\n+      Navigator.push(\n+        context,\n+        MaterialPageRoute(\n+          builder: (context) => ProfilePage(user: user),\n+        ),\n+      );\n+    }\n   }\n \n   Future<void> _openDriveFolder() async {\n     const url = 'https://drive.google.com';\n"
                },
                {
                    "date": 1744919346189,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,67 +31,37 @@\n     super.initState();\n     _loadUser();\n   }\n \n-  @override\n-  void didChangeDependencies() {\n-    super.didChangeDependencies();\n-    _loadUser();\n-  }\n-\n   Future<void> _loadUser() async {\n     if (_isLoadingUser) return;\n \n     try {\n       setState(() => _isLoadingUser = true);\n       final googleSignIn = GoogleSignIn();\n-\n-      // First try to get current user\n-      _currentUser = googleSignIn.currentUser;\n-\n-      // If no current user, try silent sign in\n-      if (_currentUser == null) {\n-        _currentUser = await googleSignIn.signInSilently();\n-      }\n-\n-      if (mounted) {\n-        setState(() {\n-          _isLoadingUser = false;\n-        });\n-      }\n+      _currentUser = googleSignIn.currentUser ?? await googleSignIn.signInSilently();\n     } catch (e) {\n       debugPrint('Error loading user: $e');\n-      if (mounted) {\n-        setState(() {\n-          _isLoadingUser = false;\n-          _currentUser = null;\n-        });\n-      }\n+      _currentUser = null;\n+    } finally {\n+      if (mounted) setState(() => _isLoadingUser = false);\n     }\n   }\n \n   void _openProfile() {\n-    if (_currentUser == null || !mounted) {\n+    final user = _currentUser;\n+    if (user == null || !mounted) {\n       ScaffoldMessenger.of(context).showSnackBar(\n-        const SnackBar(\n-          content: Text('Please sign in again'),\n-          duration: Duration(seconds: 2),\n-        ),\n+        const SnackBar(content: Text('Please sign in again')),\n       );\n       context.go('/login');\n       return;\n     }\n \n-    // Create a local final variable to prevent null issues during navigation\n-    final user = _currentUser;\n-    if (user != null) {\n-      Navigator.push(\n-        context,\n-        MaterialPageRoute(\n-          builder: (context) => ProfilePage(user: user),\n-        ),\n-      );\n-    }\n+    Navigator.push(\n+      context,\n+      MaterialPageRoute(builder: (context) => ProfilePage(user: user)),\n+    );\n   }\n \n   Future<void> _openDriveFolder() async {\n     const url = 'https://drive.google.com';\n@@ -102,423 +72,222 @@\n \n   Future<void> _deleteNote(BuildContext context, NoteModel note) async {\n     final shouldDelete = await showDialog<bool>(\n       context: context,\n-      builder:\n-          (context) => AlertDialog(\n-            title: const Text('Delete Note'),\n-            content: Text('Are you sure you want to delete \"${note.title}\"?'),\n-            actions: [\n-              TextButton(\n-                onPressed: () => Navigator.pop(context, false),\n-                child: const Text('CANCEL'),\n-              ),\n-              TextButton(\n-                style: TextButton.styleFrom(foregroundColor: Colors.red),\n-                onPressed: () => Navigator.pop(context, true),\n-                child: const Text('DELETE'),\n-              ),\n-            ],\n+      builder: (context) => AlertDialog(\n+        title: const Text('Delete Note'),\n+        content: Text('Are you sure you want to delete \"${note.title}\"?'),\n+        actions: [\n+          TextButton(onPressed: () => Navigator.pop(context, false), child: const Text('CANCEL')),\n+          TextButton(\n+            style: TextButton.styleFrom(foregroundColor: Colors.red),\n+            onPressed: () => Navigator.pop(context, true),\n+            child: const Text('DELETE'),\n           ),\n+        ],\n+      ),\n     );\n \n     if (shouldDelete == true && mounted) {\n       try {\n         await ref.read(notesControllerProvider.notifier).delete(note.id);\n-        if (mounted) {\n-          ScaffoldMessenger.of(context).showSnackBar(\n-            SnackBar(\n-              content: Text('Deleted ${note.title}'),\n-              action: SnackBarAction(\n-                label: 'UNDO',\n-                onPressed: () {\n-                  ScaffoldMessenger.of(context).showSnackBar(\n-                    const SnackBar(\n-                      content: Text('Undo is not implemented yet'),\n-                    ),\n-                  );\n-                },\n-              ),\n-            ),\n-          );\n-        }\n+        ScaffoldMessenger.of(context).showSnackBar(\n+          SnackBar(content: Text('Deleted ${note.title}')),\n+        );\n       } catch (e) {\n-        if (mounted) {\n-          ScaffoldMessenger.of(\n-            context,\n-          ).showSnackBar(SnackBar(content: Text('Error deleting note: $e')));\n-        }\n+        ScaffoldMessenger.of(context).showSnackBar(\n+          SnackBar(content: Text('Error deleting note: $e')),\n+        );\n       }\n     }\n   }\n \n+  void _openEditor(BuildContext context, NoteModel? note, {String? heroTag}) {\n+    Navigator.push(\n+      context,\n+      PageRouteBuilder(\n+        pageBuilder: (_, __, ___) => NoteEditorPage(originalNote: note, heroTag: heroTag),\n+        transitionDuration: const Duration(milliseconds: 300),\n+        transitionsBuilder: (_, animation, __, child) => FadeTransition(\n+          opacity: animation,\n+          child: SlideTransition(\n+            position: Tween<Offset>(\n+              begin: const Offset(0, 0.05),\n+              end: Offset.zero,\n+            ).animate(animation),\n+            child: child,\n+          ),\n+        ),\n+      ),\n+    ).then((_) => ref.invalidate(notesControllerProvider));\n+  }\n+\n   Widget _buildNoteCard(BuildContext context, NoteModel note) {\n     final theme = Theme.of(context);\n     return Hero(\n       tag: 'note_card_${note.id}',\n-      child: Material(\n-        color: Colors.transparent,\n-        child: AnimatedContainer(\n-          duration: const Duration(milliseconds: 200),\n-          child: Card(\n-            elevation: 2,\n-            margin: const EdgeInsets.all(4),\n-            child: InkWell(\n-              onTap:\n-                  () => _openEditor(\n-                    context,\n-                    note,\n-                    heroTag: 'note_card_${note.id}',\n-                  ),\n-              onLongPress: () => _deleteNote(context, note),\n-              borderRadius: BorderRadius.circular(12),\n-              child: ConstrainedBox(\n-                constraints: BoxConstraints(\n-                  minHeight: 100,\n-                  maxHeight: _isGridView ? 300 : 150,\n-                ),\n-                child: Padding(\n-                  padding: const EdgeInsets.all(16),\n-                  child: Column(\n-                    crossAxisAlignment: CrossAxisAlignment.start,\n-                    mainAxisSize: MainAxisSize.min,\n+      child: Card(\n+        elevation: 2,\n+        margin: const EdgeInsets.all(4),\n+        child: InkWell(\n+          onTap: () => _openEditor(context, note, heroTag: 'note_card_${note.id}'),\n+          onLongPress: () => _deleteNote(context, note),\n+          borderRadius: BorderRadius.circular(12),\n+          child: ConstrainedBox(\n+            constraints: BoxConstraints(minHeight: 100, maxHeight: _isGridView ? 300 : 150),\n+            child: Padding(\n+              padding: const EdgeInsets.all(16),\n+              child: Column(\n+                crossAxisAlignment: CrossAxisAlignment.start,\n+                children: [\n+                  Row(\n                     children: [\n-                      Row(\n-                        children: [\n-                          Expanded(\n-                            child: Text(\n-                              note.title.replaceAll(RegExp(r'\\.txt$'), ''),\n-                              style: theme.textTheme.titleMedium?.copyWith(\n-                                fontWeight: FontWeight.bold,\n-                              ),\n-                              maxLines: 1,\n-                              overflow: TextOverflow.ellipsis,\n-                            ),\n-                          ),\n-                          IconButton(\n-                            icon: const Icon(Icons.more_vert),\n-                            onPressed: () {\n-                              HapticFeedback.lightImpact();\n-                              showModalBottomSheet(\n-                                context: context,\n-                                builder:\n-                                    (context) => SafeArea(\n-                                      child: ListView(\n-                                        shrinkWrap: true,\n-                                        children: [\n-                                          ListTile(\n-                                            leading: const Icon(Icons.edit),\n-                                            title: const Text('Edit'),\n-                                            onTap: () {\n-                                              Navigator.pop(context);\n-                                              _openEditor(\n-                                                context,\n-                                                note,\n-                                                heroTag: 'note_card_${note.id}',\n-                                              );\n-                                            },\n-                                          ),\n-                                          ListTile(\n-                                            leading: const Icon(\n-                                              Icons.delete,\n-                                              color: Colors.red,\n-                                            ),\n-                                            title: const Text('Delete'),\n-                                            onTap: () {\n-                                              Navigator.pop(context);\n-                                              _deleteNote(context, note);\n-                                            },\n-                                          ),\n-                                        ],\n-                                      ),\n-                                    ),\n-                              );\n-                            },\n-                          ),\n-                        ],\n+                      Expanded(\n+                        child: Text(\n+                          note.title.replaceAll(RegExp(r'\\.txt$'), ''),\n+                          style: theme.textTheme.titleMedium?.copyWith(fontWeight: FontWeight.bold),\n+                          maxLines: 1,\n+                          overflow: TextOverflow.ellipsis,\n+                        ),\n                       ),\n-                      if (note.content.isNotEmpty) ...[\n-                        const SizedBox(height: 8),\n-                        Expanded(\n-                          child: Text(\n-                            note.content,\n-                            style: theme.textTheme.bodyMedium?.copyWith(\n-                              color: theme.textTheme.bodySmall?.color,\n+                      IconButton(\n+                        icon: const Icon(Icons.more_vert),\n+                        onPressed: () {\n+                          HapticFeedback.lightImpact();\n+                          showModalBottomSheet(\n+                            context: context,\n+                            builder: (_) => ListView(\n+                              shrinkWrap: true,\n+                              children: [\n+                                ListTile(\n+                                  leading: const Icon(Icons.edit),\n+                                  title: const Text('Edit'),\n+                                  onTap: () {\n+                                    Navigator.pop(context);\n+                                    _openEditor(context, note, heroTag: 'note_card_${note.id}');\n+                                  },\n+                                ),\n+                                ListTile(\n+                                  leading: const Icon(Icons.delete, color: Colors.red),\n+                                  title: const Text('Delete'),\n+                                  onTap: () {\n+                                    Navigator.pop(context);\n+                                    _deleteNote(context, note);\n+                                  },\n+                                ),\n+                              ],\n                             ),\n-                            maxLines: _isGridView ? 6 : 2,\n-                            overflow: TextOverflow.ellipsis,\n-                          ),\n-                        ),\n-                      ],\n-                      const SizedBox(height: 8),\n-                      Text(\n-                        timeago.format(note.updatedAt),\n-                        style: theme.textTheme.bodySmall,\n+                          );\n+                        },\n                       ),\n                     ],\n                   ),\n-                ),\n+                  if (note.content.isNotEmpty) ...[\n+                    const SizedBox(height: 8),\n+                    Expanded(\n+                      child: Text(\n+                        note.content,\n+                        style: theme.textTheme.bodyMedium,\n+                        maxLines: _isGridView ? 6 : 2,\n+                        overflow: TextOverflow.ellipsis,\n+                      ),\n+                    ),\n+                  ],\n+                  const SizedBox(height: 8),\n+                  Text(timeago.format(note.updatedAt), style: theme.textTheme.bodySmall),\n+                ],\n               ),\n             ),\n           ),\n         ),\n       ),\n     );\n   }\n \n-  void _openEditor(BuildContext context, NoteModel? note, {String? heroTag}) {\n-    Navigator.push(\n-      context,\n-      PageRouteBuilder(\n-        pageBuilder:\n-            (context, animation, secondaryAnimation) =>\n-                NoteEditorPage(originalNote: note, heroTag: heroTag),\n-        transitionsBuilder: (context, animation, secondaryAnimation, child) {\n-          const begin = Offset(0.0, 0.05);\n-          const end = Offset.zero;\n-          const curve = Curves.easeOut;\n-          var tween = Tween(\n-            begin: begin,\n-            end: end,\n-          ).chain(CurveTween(curve: curve));\n-          var offsetAnimation = animation.drive(tween);\n-          var fadeAnimation = animation.drive(CurveTween(curve: curve));\n-\n-          return FadeTransition(\n-            opacity: fadeAnimation,\n-            child: SlideTransition(position: offsetAnimation, child: child),\n-          );\n-        },\n-        transitionDuration: const Duration(milliseconds: 300),\n-      ),\n-    ).then((_) => ref.invalidate(notesControllerProvider));\n-  }\n-\n   @override\n   Widget build(BuildContext context) {\n+    final notesAsync = ref.watch(notesControllerProvider);\n     final theme = Theme.of(context);\n-    final notesAsync = ref.watch(notesControllerProvider);\n-    final saveState = ref.watch(noteSaveProvider);\n-    final themeMode = ref.watch(themeProvider);\n \n-    // Auto-refresh notes list when save completes\n-    ref.listen(noteSaveProvider, (previous, next) {\n-      if (previous?.isSaving == true &&\n-          next.isSaving == false &&\n-          !next.isError) {\n-        ref.invalidate(notesControllerProvider);\n-      }\n-    });\n-\n     return Scaffold(\n       appBar: AppBar(\n-        title: const Hero(\n-          tag: 'note_title',\n-          child: Material(color: Colors.transparent, child: Text('DriveNotes')),\n-        ),\n+        title: const Text('DriveNotes'),\n         actions: [\n           IconButton(\n             icon: AnimatedSwitcher(\n               duration: const Duration(milliseconds: 200),\n-              child: Icon(\n-                _isGridView ? Icons.view_list : Icons.grid_view,\n-                key: ValueKey(_isGridView),\n-              ),\n+              child: Icon(_isGridView ? Icons.view_list : Icons.grid_view, key: ValueKey(_isGridView)),\n             ),\n             onPressed: () => setState(() => _isGridView = !_isGridView),\n-            tooltip: _isGridView ? 'List View' : 'Grid View',\n           ),\n           IconButton(\n             icon: Hero(\n               tag: 'profile_image',\n               child: CircleAvatar(\n                 radius: 14,\n-                backgroundImage:\n-                    _currentUser?.photoUrl != null\n-                        ? NetworkImage(_currentUser!.photoUrl!)\n-                        : null,\n+                backgroundImage: (_currentUser?.photoUrl?.isNotEmpty ?? false)\n+                    ? NetworkImage(_currentUser!.photoUrl!)\n+                    : null,\n                 backgroundColor: theme.colorScheme.primary.withOpacity(0.1),\n-                child:\n-                    _currentUser?.photoUrl == null\n-                        ? Text(\n-                          _currentUser?.displayName?[0].toUpperCase() ?? 'U',\n-                          style: theme.textTheme.bodySmall,\n-                        )\n-                        : null,\n+                child: (_currentUser?.photoUrl?.isEmpty ?? true)\n+                    ? Text(\n+                        (_currentUser?.displayName?.isNotEmpty ?? false)\n+                            ? _currentUser!.displayName![0].toUpperCase()\n+                            : 'U',\n+                        style: theme.textTheme.bodySmall,\n+                      )\n+                    : null,\n               ),\n             ),\n             onPressed: _openProfile,\n-            tooltip: 'Profile',\n           ),\n+          IconButton(icon: const Icon(Icons.folder_outlined), onPressed: _openDriveFolder),\n           IconButton(\n-            icon: const Icon(Icons.folder_outlined),\n-            onPressed: _openDriveFolder,\n-            tooltip: 'Open in Google Drive',\n-          ),\n-          IconButton(\n             icon: const Icon(Icons.logout),\n-            onPressed: () => context.go('/login'),\n             tooltip: 'Sign out',\n+            onPressed: () async {\n+              await GoogleSignIn().signOut();\n+              if (context.mounted) context.go('/login');\n+            },\n           ),\n         ],\n       ),\n-      body: Stack(\n-        children: [\n-          AnimatedSwitcher(\n-            duration: const Duration(milliseconds: 300),\n-            child: notesAsync.when(\n-              loading: () => const Center(child: CircularProgressIndicator()),\n-              error:\n-                  (error, stack) => Center(\n-                    child: Column(\n-                      mainAxisSize: MainAxisSize.min,\n-                      children: [\n-                        const Icon(\n-                          Icons.error_outline,\n-                          size: 48,\n-                          color: Colors.red,\n-                        ),\n-                        const SizedBox(height: 16),\n-                        Text('Error: $error'),\n-                        const SizedBox(height: 16),\n-                        ElevatedButton(\n-                          onPressed:\n-                              () => ref.invalidate(notesControllerProvider),\n-                          child: const Text('RETRY'),\n-                        ),\n-                      ],\n-                    ),\n-                  ),\n-              data: (notes) {\n-                if (notes.isEmpty) {\n-                  return TweenAnimationBuilder<double>(\n-                    tween: Tween(begin: 0.0, end: 1.0),\n-                    duration: const Duration(milliseconds: 500),\n-                    builder: (context, value, child) {\n-                      return Opacity(\n-                        opacity: value,\n-                        child: Transform.translate(\n-                          offset: Offset(0, 20 * (1 - value)),\n-                          child: child,\n-                        ),\n-                      );\n-                    },\n-                    child: Center(\n-                      child: Column(\n-                        mainAxisSize: MainAxisSize.min,\n-                        children: [\n-                          Icon(\n-                            Icons.note_add,\n-                            size: 64,\n-                            color: theme.colorScheme.primary.withOpacity(0.5),\n-                          ),\n-                          const SizedBox(height: 16),\n-                          Text(\n-                            'No notes yet',\n-                            style: theme.textTheme.titleLarge?.copyWith(\n-                              color: theme.colorScheme.onSurface.withOpacity(\n-                                0.7,\n-                              ),\n-                            ),\n-                          ),\n-                          const SizedBox(height: 8),\n-                          Text(\n-                            'Tap the + button to create your first note',\n-                            style: theme.textTheme.bodyMedium?.copyWith(\n-                              color: theme.colorScheme.onSurface.withOpacity(\n-                                0.5,\n-                              ),\n-                            ),\n-                          ),\n-                        ],\n-                      ),\n-                    ),\n-                  );\n-                }\n-\n-                return AnimatedSwitcher(\n-                  duration: const Duration(milliseconds: 300),\n-                  child:\n-                      _isGridView\n-                          ? MasonryGridView.count(\n-                            key: const ValueKey('grid'),\n-                            padding: const EdgeInsets.all(8),\n-                            crossAxisCount:\n-                                MediaQuery.of(context).size.width > 600 ? 3 : 2,\n-                            mainAxisSpacing: 4,\n-                            crossAxisSpacing: 4,\n-                            itemCount: notes.length,\n-                            itemBuilder:\n-                                (context, index) =>\n-                                    _buildNoteCard(context, notes[index]),\n-                          )\n-                          : ListView.builder(\n-                            key: const ValueKey('list'),\n-                            padding: const EdgeInsets.all(8),\n-                            itemCount: notes.length,\n-                            itemBuilder:\n-                                (context, index) =>\n-                                    _buildNoteCard(context, notes[index]),\n-                          ),\n-                );\n-              },\n-            ),\n-          ),\n-          // Save progress indicator\n-          AnimatedPositioned(\n-            duration: const Duration(milliseconds: 300),\n-            curve: Curves.easeOut,\n-            left: 0,\n-            right: 0,\n-            bottom: saveState.isSaving || saveState.message != null ? 0 : -100,\n-            child: Material(\n-              elevation: 8,\n-              child: Container(\n-                padding: const EdgeInsets.symmetric(\n-                  horizontal: 16,\n-                  vertical: 12,\n-                ),\n-                decoration: BoxDecoration(\n-                  color:\n-                      saveState.isError\n-                          ? theme.colorScheme.errorContainer\n-                          : theme.colorScheme.primaryContainer,\n-                ),\n-                child: Row(\n-                  children: [\n-                    if (saveState.isSaving) ...[\n-                      const SizedBox(\n-                        height: 16,\n-                        width: 16,\n-                        child: CircularProgressIndicator(strokeWidth: 2),\n-                      ),\n-                      const SizedBox(width: 16),\n-                    ],\n-                    Expanded(\n-                      child: Text(\n-                        saveState.message ?? '',\n-                        style: theme.textTheme.bodyMedium?.copyWith(\n-                          color:\n-                              saveState.isError\n-                                  ? theme.colorScheme.onErrorContainer\n-                                  : theme.colorScheme.onPrimaryContainer,\n-                        ),\n-                      ),\n-                    ),\n-                    if (saveState.isError)\n-                      TextButton(\n-                        onPressed: () {\n-                          ref.read(noteSaveProvider.notifier).state =\n-                              const NoteSaveState();\n-                        },\n-                        child: const Text('DISMISS'),\n-                      ),\n-                  ],\n-                ),\n+      body: notesAsync.when(\n+        loading: () => const Center(child: CircularProgressIndicator()),\n+        error: (err, _) => Center(\n+          child: Column(\n+            mainAxisSize: MainAxisSize.min,\n+            children: [\n+              const Icon(Icons.error_outline, size: 48, color: Colors.red),\n+              const SizedBox(height: 12),\n+              Text('Error: $err'),\n+              const SizedBox(height: 12),\n+              ElevatedButton(\n+                onPressed: () => ref.invalidate(notesControllerProvider),\n+                child: const Text('Retry'),\n               ),\n-            ),\n+            ],\n           ),\n-        ],\n+        ),\n+        data: (notes) {\n+          if (notes.isEmpty) {\n+            return const Center(child: Text('No notes yet. Tap + to create one.'));\n+          }\n+          return _isGridView\n+              ? MasonryGridView.count(\n+                  crossAxisCount: MediaQuery.of(context).size.width > 600 ? 3 : 2,\n+                  itemCount: notes.length,\n+                  itemBuilder: (_, i) => _buildNoteCard(context, notes[i]),\n+                  padding: const EdgeInsets.all(8),\n+                  mainAxisSpacing: 4,\n+                  crossAxisSpacing: 4,\n+                )\n+              : ListView.builder(\n+                  itemCount: notes.length,\n+                  padding: const EdgeInsets.all(8),\n+                  itemBuilder: (_, i) => _buildNoteCard(context, notes[i]),\n+                );\n+        },\n       ),\n       floatingActionButton: FloatingActionButton(\n         onPressed: () => _openEditor(context, null, heroTag: 'new_note'),\n         tooltip: 'Add Note',\n"
                },
                {
                    "date": 1744919406195,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,10 @@\n \n     try {\n       setState(() => _isLoadingUser = true);\n       final googleSignIn = GoogleSignIn();\n-      _currentUser = googleSignIn.currentUser ?? await googleSignIn.signInSilently();\n+      _currentUser =\n+          googleSignIn.currentUser ?? await googleSignIn.signInSilently();\n     } catch (e) {\n       debugPrint('Error loading user: $e');\n       _currentUser = null;\n     } finally {\n@@ -49,11 +50,11 @@\n \n   void _openProfile() {\n     final user = _currentUser;\n     if (user == null || !mounted) {\n-      ScaffoldMessenger.of(context).showSnackBar(\n-        const SnackBar(content: Text('Please sign in again')),\n-      );\n+      ScaffoldMessenger.of(\n+        context,\n+      ).showSnackBar(const SnackBar(content: Text('Please sign in again')));\n       context.go('/login');\n       return;\n     }\n \n@@ -72,130 +73,173 @@\n \n   Future<void> _deleteNote(BuildContext context, NoteModel note) async {\n     final shouldDelete = await showDialog<bool>(\n       context: context,\n-      builder: (context) => AlertDialog(\n-        title: const Text('Delete Note'),\n-        content: Text('Are you sure you want to delete \"${note.title}\"?'),\n-        actions: [\n-          TextButton(onPressed: () => Navigator.pop(context, false), child: const Text('CANCEL')),\n-          TextButton(\n-            style: TextButton.styleFrom(foregroundColor: Colors.red),\n-            onPressed: () => Navigator.pop(context, true),\n-            child: const Text('DELETE'),\n+      builder:\n+          (context) => AlertDialog(\n+            title: const Text('Delete Note'),\n+            content: Text('Are you sure you want to delete \"${note.title}\"?'),\n+            actions: [\n+              TextButton(\n+                onPressed: () => Navigator.pop(context, false),\n+                child: const Text('CANCEL'),\n+              ),\n+              TextButton(\n+                style: TextButton.styleFrom(foregroundColor: Colors.red),\n+                onPressed: () => Navigator.pop(context, true),\n+                child: const Text('DELETE'),\n+              ),\n+            ],\n           ),\n-        ],\n-      ),\n     );\n \n     if (shouldDelete == true && mounted) {\n       try {\n         await ref.read(notesControllerProvider.notifier).delete(note.id);\n-        ScaffoldMessenger.of(context).showSnackBar(\n-          SnackBar(content: Text('Deleted ${note.title}')),\n-        );\n+        ScaffoldMessenger.of(\n+          context,\n+        ).showSnackBar(SnackBar(content: Text('Deleted ${note.title}')));\n       } catch (e) {\n-        ScaffoldMessenger.of(context).showSnackBar(\n-          SnackBar(content: Text('Error deleting note: $e')),\n-        );\n+        ScaffoldMessenger.of(\n+          context,\n+        ).showSnackBar(SnackBar(content: Text('Error deleting note: $e')));\n       }\n     }\n   }\n \n   void _openEditor(BuildContext context, NoteModel? note, {String? heroTag}) {\n     Navigator.push(\n       context,\n       PageRouteBuilder(\n-        pageBuilder: (_, __, ___) => NoteEditorPage(originalNote: note, heroTag: heroTag),\n+        pageBuilder:\n+            (_, __, ___) =>\n+                NoteEditorPage(originalNote: note, heroTag: heroTag),\n         transitionDuration: const Duration(milliseconds: 300),\n-        transitionsBuilder: (_, animation, __, child) => FadeTransition(\n-          opacity: animation,\n-          child: SlideTransition(\n-            position: Tween<Offset>(\n-              begin: const Offset(0, 0.05),\n-              end: Offset.zero,\n-            ).animate(animation),\n-            child: child,\n-          ),\n-        ),\n+        transitionsBuilder:\n+            (_, animation, __, child) => FadeTransition(\n+              opacity: animation,\n+              child: SlideTransition(\n+                position: Tween<Offset>(\n+                  begin: const Offset(0, 0.05),\n+                  end: Offset.zero,\n+                ).animate(animation),\n+                child: child,\n+              ),\n+            ),\n       ),\n     ).then((_) => ref.invalidate(notesControllerProvider));\n   }\n \n   Widget _buildNoteCard(BuildContext context, NoteModel note) {\n     final theme = Theme.of(context);\n     return Hero(\n       tag: 'note_card_${note.id}',\n-      child: Card(\n-        elevation: 2,\n-        margin: const EdgeInsets.all(4),\n-        child: InkWell(\n-          onTap: () => _openEditor(context, note, heroTag: 'note_card_${note.id}'),\n-          onLongPress: () => _deleteNote(context, note),\n-          borderRadius: BorderRadius.circular(12),\n-          child: ConstrainedBox(\n-            constraints: BoxConstraints(minHeight: 100, maxHeight: _isGridView ? 300 : 150),\n-            child: Padding(\n-              padding: const EdgeInsets.all(16),\n-              child: Column(\n-                crossAxisAlignment: CrossAxisAlignment.start,\n-                children: [\n-                  Row(\n+      child: Material(\n+        color: Colors.transparent,\n+        child: AnimatedContainer(\n+          duration: const Duration(milliseconds: 200),\n+          child: Card(\n+            elevation: 2,\n+            margin: const EdgeInsets.all(4),\n+            child: InkWell(\n+              onTap:\n+                  () => _openEditor(\n+                    context,\n+                    note,\n+                    heroTag: 'note_card_${note.id}',\n+                  ),\n+              onLongPress: () => _deleteNote(context, note),\n+              borderRadius: BorderRadius.circular(12),\n+              child: ConstrainedBox(\n+                constraints: BoxConstraints(\n+                  minHeight: 100,\n+                  maxHeight: _isGridView ? 300 : 150,\n+                ),\n+                child: Padding(\n+                  padding: const EdgeInsets.all(16),\n+                  child: Column(\n+                    crossAxisAlignment: CrossAxisAlignment.start,\n+                    mainAxisSize: MainAxisSize.min,\n                     children: [\n-                      Expanded(\n-                        child: Text(\n-                          note.title.replaceAll(RegExp(r'\\.txt$'), ''),\n-                          style: theme.textTheme.titleMedium?.copyWith(fontWeight: FontWeight.bold),\n-                          maxLines: 1,\n-                          overflow: TextOverflow.ellipsis,\n-                        ),\n+                      Row(\n+                        mainAxisSize: MainAxisSize.min,\n+                        children: [\n+                          Expanded(\n+                            child: Text(\n+                              note.title.replaceAll(RegExp(r'\\.txt$'), ''),\n+                              style: theme.textTheme.titleMedium?.copyWith(\n+                                fontWeight: FontWeight.bold,\n+                              ),\n+                              maxLines: 1,\n+                              overflow: TextOverflow.ellipsis,\n+                            ),\n+                          ),\n+                          IconButton(\n+                            icon: const Icon(Icons.more_vert),\n+                            onPressed: () {\n+                              HapticFeedback.lightImpact();\n+                              showModalBottomSheet(\n+                                context: context,\n+                                builder:\n+                                    (context) => SafeArea(\n+                                      child: ListView(\n+                                        shrinkWrap: true,\n+                                        children: [\n+                                          ListTile(\n+                                            leading: const Icon(Icons.edit),\n+                                            title: const Text('Edit'),\n+                                            onTap: () {\n+                                              Navigator.pop(context);\n+                                              _openEditor(\n+                                                context,\n+                                                note,\n+                                                heroTag: 'note_card_${note.id}',\n+                                              );\n+                                            },\n+                                          ),\n+                                          ListTile(\n+                                            leading: const Icon(\n+                                              Icons.delete,\n+                                              color: Colors.red,\n+                                            ),\n+                                            title: const Text('Delete'),\n+                                            onTap: () {\n+                                              Navigator.pop(context);\n+                                              _deleteNote(context, note);\n+                                            },\n+                                          ),\n+                                        ],\n+                                      ),\n+                                    ),\n+                              );\n+                            },\n+                            padding: EdgeInsets.zero,\n+                            constraints: const BoxConstraints(),\n+                            visualDensity: VisualDensity.compact,\n+                          ),\n+                        ],\n                       ),\n-                      IconButton(\n-                        icon: const Icon(Icons.more_vert),\n-                        onPressed: () {\n-                          HapticFeedback.lightImpact();\n-                          showModalBottomSheet(\n-                            context: context,\n-                            builder: (_) => ListView(\n-                              shrinkWrap: true,\n-                              children: [\n-                                ListTile(\n-                                  leading: const Icon(Icons.edit),\n-                                  title: const Text('Edit'),\n-                                  onTap: () {\n-                                    Navigator.pop(context);\n-                                    _openEditor(context, note, heroTag: 'note_card_${note.id}');\n-                                  },\n-                                ),\n-                                ListTile(\n-                                  leading: const Icon(Icons.delete, color: Colors.red),\n-                                  title: const Text('Delete'),\n-                                  onTap: () {\n-                                    Navigator.pop(context);\n-                                    _deleteNote(context, note);\n-                                  },\n-                                ),\n-                              ],\n+                      if (note.content.isNotEmpty) ...[\n+                        const SizedBox(height: 8),\n+                        Expanded(\n+                          child: Text(\n+                            note.content,\n+                            style: theme.textTheme.bodyMedium?.copyWith(\n+                              color: theme.textTheme.bodySmall?.color,\n                             ),\n-                          );\n-                        },\n+                            maxLines: _isGridView ? 6 : 2,\n+                            overflow: TextOverflow.ellipsis,\n+                          ),\n+                        ),\n+                      ],\n+                      const SizedBox(height: 8),\n+                      Text(\n+                        timeago.format(note.updatedAt),\n+                        style: theme.textTheme.bodySmall,\n                       ),\n                     ],\n                   ),\n-                  if (note.content.isNotEmpty) ...[\n-                    const SizedBox(height: 8),\n-                    Expanded(\n-                      child: Text(\n-                        note.content,\n-                        style: theme.textTheme.bodyMedium,\n-                        maxLines: _isGridView ? 6 : 2,\n-                        overflow: TextOverflow.ellipsis,\n-                      ),\n-                    ),\n-                  ],\n-                  const SizedBox(height: 8),\n-                  Text(timeago.format(note.updatedAt), style: theme.textTheme.bodySmall),\n-                ],\n+                ),\n               ),\n             ),\n           ),\n         ),\n@@ -214,35 +258,43 @@\n         actions: [\n           IconButton(\n             icon: AnimatedSwitcher(\n               duration: const Duration(milliseconds: 200),\n-              child: Icon(_isGridView ? Icons.view_list : Icons.grid_view, key: ValueKey(_isGridView)),\n+              child: Icon(\n+                _isGridView ? Icons.view_list : Icons.grid_view,\n+                key: ValueKey(_isGridView),\n+              ),\n             ),\n             onPressed: () => setState(() => _isGridView = !_isGridView),\n           ),\n           IconButton(\n             icon: Hero(\n               tag: 'profile_image',\n               child: CircleAvatar(\n                 radius: 14,\n-                backgroundImage: (_currentUser?.photoUrl?.isNotEmpty ?? false)\n-                    ? NetworkImage(_currentUser!.photoUrl!)\n-                    : null,\n+                backgroundImage:\n+                    (_currentUser?.photoUrl?.isNotEmpty ?? false)\n+                        ? NetworkImage(_currentUser!.photoUrl!)\n+                        : null,\n                 backgroundColor: theme.colorScheme.primary.withOpacity(0.1),\n-                child: (_currentUser?.photoUrl?.isEmpty ?? true)\n-                    ? Text(\n-                        (_currentUser?.displayName?.isNotEmpty ?? false)\n-                            ? _currentUser!.displayName![0].toUpperCase()\n-                            : 'U',\n-                        style: theme.textTheme.bodySmall,\n-                      )\n-                    : null,\n+                child:\n+                    (_currentUser?.photoUrl?.isEmpty ?? true)\n+                        ? Text(\n+                          (_currentUser?.displayName?.isNotEmpty ?? false)\n+                              ? _currentUser!.displayName![0].toUpperCase()\n+                              : 'U',\n+                          style: theme.textTheme.bodySmall,\n+                        )\n+                        : null,\n               ),\n             ),\n             onPressed: _openProfile,\n           ),\n-          IconButton(icon: const Icon(Icons.folder_outlined), onPressed: _openDriveFolder),\n           IconButton(\n+            icon: const Icon(Icons.folder_outlined),\n+            onPressed: _openDriveFolder,\n+          ),\n+          IconButton(\n             icon: const Icon(Icons.logout),\n             tooltip: 'Sign out',\n             onPressed: () async {\n               await GoogleSignIn().signOut();\n@@ -252,41 +304,44 @@\n         ],\n       ),\n       body: notesAsync.when(\n         loading: () => const Center(child: CircularProgressIndicator()),\n-        error: (err, _) => Center(\n-          child: Column(\n-            mainAxisSize: MainAxisSize.min,\n-            children: [\n-              const Icon(Icons.error_outline, size: 48, color: Colors.red),\n-              const SizedBox(height: 12),\n-              Text('Error: $err'),\n-              const SizedBox(height: 12),\n-              ElevatedButton(\n-                onPressed: () => ref.invalidate(notesControllerProvider),\n-                child: const Text('Retry'),\n+        error:\n+            (err, _) => Center(\n+              child: Column(\n+                mainAxisSize: MainAxisSize.min,\n+                children: [\n+                  const Icon(Icons.error_outline, size: 48, color: Colors.red),\n+                  const SizedBox(height: 12),\n+                  Text('Error: $err'),\n+                  const SizedBox(height: 12),\n+                  ElevatedButton(\n+                    onPressed: () => ref.invalidate(notesControllerProvider),\n+                    child: const Text('Retry'),\n+                  ),\n+                ],\n               ),\n-            ],\n-          ),\n-        ),\n+            ),\n         data: (notes) {\n           if (notes.isEmpty) {\n-            return const Center(child: Text('No notes yet. Tap + to create one.'));\n+            return const Center(\n+              child: Text('No notes yet. Tap + to create one.'),\n+            );\n           }\n           return _isGridView\n               ? MasonryGridView.count(\n-                  crossAxisCount: MediaQuery.of(context).size.width > 600 ? 3 : 2,\n-                  itemCount: notes.length,\n-                  itemBuilder: (_, i) => _buildNoteCard(context, notes[i]),\n-                  padding: const EdgeInsets.all(8),\n-                  mainAxisSpacing: 4,\n-                  crossAxisSpacing: 4,\n-                )\n+                crossAxisCount: MediaQuery.of(context).size.width > 600 ? 3 : 2,\n+                itemCount: notes.length,\n+                itemBuilder: (_, i) => _buildNoteCard(context, notes[i]),\n+                padding: const EdgeInsets.all(8),\n+                mainAxisSpacing: 4,\n+                crossAxisSpacing: 4,\n+              )\n               : ListView.builder(\n-                  itemCount: notes.length,\n-                  padding: const EdgeInsets.all(8),\n-                  itemBuilder: (_, i) => _buildNoteCard(context, notes[i]),\n-                );\n+                itemCount: notes.length,\n+                padding: const EdgeInsets.all(8),\n+                itemBuilder: (_, i) => _buildNoteCard(context, notes[i]),\n+              );\n         },\n       ),\n       floatingActionButton: FloatingActionButton(\n         onPressed: () => _openEditor(context, null, heroTag: 'new_note'),\n"
                },
                {
                    "date": 1744919496190,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,38 +31,65 @@\n     super.initState();\n     _loadUser();\n   }\n \n+  @override\n+  void didChangeDependencies() {\n+    super.didChangeDependencies();\n+    _loadUser();\n+  }\n+\n   Future<void> _loadUser() async {\n     if (_isLoadingUser) return;\n \n     try {\n       setState(() => _isLoadingUser = true);\n       final googleSignIn = GoogleSignIn();\n-      _currentUser =\n-          googleSignIn.currentUser ?? await googleSignIn.signInSilently();\n+\n+      // First try to get current user\n+      _currentUser = googleSignIn.currentUser;\n+\n+      // If no current user, try silent sign in\n+      if (_currentUser == null) {\n+        _currentUser = await googleSignIn.signInSilently();\n+      }\n+\n+      if (mounted) {\n+        setState(() {\n+          _isLoadingUser = false;\n+        });\n+      }\n     } catch (e) {\n       debugPrint('Error loading user: $e');\n-      _currentUser = null;\n-    } finally {\n-      if (mounted) setState(() => _isLoadingUser = false);\n+      if (mounted) {\n+        setState(() {\n+          _isLoadingUser = false;\n+          _currentUser = null;\n+        });\n+      }\n     }\n   }\n \n   void _openProfile() {\n-    final user = _currentUser;\n-    if (user == null || !mounted) {\n-      ScaffoldMessenger.of(\n-        context,\n-      ).showSnackBar(const SnackBar(content: Text('Please sign in again')));\n+    if (_currentUser == null || !mounted) {\n+      ScaffoldMessenger.of(context).showSnackBar(\n+        const SnackBar(\n+          content: Text('Please sign in again'),\n+          duration: Duration(seconds: 2),\n+        ),\n+      );\n       context.go('/login');\n       return;\n     }\n \n-    Navigator.push(\n-      context,\n-      MaterialPageRoute(builder: (context) => ProfilePage(user: user)),\n-    );\n+    // Create a local final variable to prevent null issues during navigation\n+    final user = _currentUser;\n+    if (user != null) {\n+      Navigator.push(\n+        context,\n+        MaterialPageRoute(builder: (context) => ProfilePage(user: user)),\n+      );\n+    }\n   }\n \n   Future<void> _openDriveFolder() async {\n     const url = 'https://drive.google.com';\n@@ -94,42 +121,35 @@\n \n     if (shouldDelete == true && mounted) {\n       try {\n         await ref.read(notesControllerProvider.notifier).delete(note.id);\n-        ScaffoldMessenger.of(\n-          context,\n-        ).showSnackBar(SnackBar(content: Text('Deleted ${note.title}')));\n+        if (mounted) {\n+          ScaffoldMessenger.of(context).showSnackBar(\n+            SnackBar(\n+              content: Text('Deleted ${note.title}'),\n+              action: SnackBarAction(\n+                label: 'UNDO',\n+                onPressed: () {\n+                  ScaffoldMessenger.of(context).showSnackBar(\n+                    const SnackBar(\n+                      content: Text('Undo is not implemented yet'),\n+                    ),\n+                  );\n+                },\n+              ),\n+            ),\n+          );\n+        }\n       } catch (e) {\n-        ScaffoldMessenger.of(\n-          context,\n-        ).showSnackBar(SnackBar(content: Text('Error deleting note: $e')));\n+        if (mounted) {\n+          ScaffoldMessenger.of(\n+            context,\n+          ).showSnackBar(SnackBar(content: Text('Error deleting note: $e')));\n+        }\n       }\n     }\n   }\n \n-  void _openEditor(BuildContext context, NoteModel? note, {String? heroTag}) {\n-    Navigator.push(\n-      context,\n-      PageRouteBuilder(\n-        pageBuilder:\n-            (_, __, ___) =>\n-                NoteEditorPage(originalNote: note, heroTag: heroTag),\n-        transitionDuration: const Duration(milliseconds: 300),\n-        transitionsBuilder:\n-            (_, animation, __, child) => FadeTransition(\n-              opacity: animation,\n-              child: SlideTransition(\n-                position: Tween<Offset>(\n-                  begin: const Offset(0, 0.05),\n-                  end: Offset.zero,\n-                ).animate(animation),\n-                child: child,\n-              ),\n-            ),\n-      ),\n-    ).then((_) => ref.invalidate(notesControllerProvider));\n-  }\n-\n   Widget _buildNoteCard(BuildContext context, NoteModel note) {\n     final theme = Theme.of(context);\n     return Hero(\n       tag: 'note_card_${note.id}',\n@@ -160,9 +180,8 @@\n                     crossAxisAlignment: CrossAxisAlignment.start,\n                     mainAxisSize: MainAxisSize.min,\n                     children: [\n                       Row(\n-                        mainAxisSize: MainAxisSize.min,\n                         children: [\n                           Expanded(\n                             child: Text(\n                               note.title.replaceAll(RegExp(r'\\.txt$'), ''),\n@@ -211,11 +230,8 @@\n                                       ),\n                                     ),\n                               );\n                             },\n-                            padding: EdgeInsets.zero,\n-                            constraints: const BoxConstraints(),\n-                            visualDensity: VisualDensity.compact,\n                           ),\n                         ],\n                       ),\n                       if (note.content.isNotEmpty) ...[\n@@ -246,16 +262,58 @@\n       ),\n     );\n   }\n \n+  void _openEditor(BuildContext context, NoteModel? note, {String? heroTag}) {\n+    Navigator.push(\n+      context,\n+      PageRouteBuilder(\n+        pageBuilder:\n+            (context, animation, secondaryAnimation) =>\n+                NoteEditorPage(originalNote: note, heroTag: heroTag),\n+        transitionsBuilder: (context, animation, secondaryAnimation, child) {\n+          const begin = Offset(0.0, 0.05);\n+          const end = Offset.zero;\n+          const curve = Curves.easeOut;\n+          var tween = Tween(\n+            begin: begin,\n+            end: end,\n+          ).chain(CurveTween(curve: curve));\n+          var offsetAnimation = animation.drive(tween);\n+          var fadeAnimation = animation.drive(CurveTween(curve: curve));\n+\n+          return FadeTransition(\n+            opacity: fadeAnimation,\n+            child: SlideTransition(position: offsetAnimation, child: child),\n+          );\n+        },\n+        transitionDuration: const Duration(milliseconds: 300),\n+      ),\n+    ).then((_) => ref.invalidate(notesControllerProvider));\n+  }\n+\n   @override\n   Widget build(BuildContext context) {\n+    final theme = Theme.of(context);\n     final notesAsync = ref.watch(notesControllerProvider);\n-    final theme = Theme.of(context);\n+    final saveState = ref.watch(noteSaveProvider);\n+    final themeMode = ref.watch(themeProvider);\n \n+    // Auto-refresh notes list when save completes\n+    ref.listen(noteSaveProvider, (previous, next) {\n+      if (previous?.isSaving == true &&\n+          next.isSaving == false &&\n+          !next.isError) {\n+        ref.invalidate(notesControllerProvider);\n+      }\n+    });\n+\n     return Scaffold(\n       appBar: AppBar(\n-        title: const Text('DriveNotes'),\n+        title: const Hero(\n+          tag: 'note_title',\n+          child: Material(color: Colors.transparent, child: Text('DriveNotes')),\n+        ),\n         actions: [\n           IconButton(\n             icon: AnimatedSwitcher(\n               duration: const Duration(milliseconds: 200),\n@@ -264,85 +322,201 @@\n                 key: ValueKey(_isGridView),\n               ),\n             ),\n             onPressed: () => setState(() => _isGridView = !_isGridView),\n+            tooltip: _isGridView ? 'List View' : 'Grid View',\n           ),\n           IconButton(\n             icon: Hero(\n               tag: 'profile_image',\n               child: CircleAvatar(\n                 radius: 14,\n                 backgroundImage:\n-                    (_currentUser?.photoUrl?.isNotEmpty ?? false)\n+                    _currentUser?.photoUrl != null\n                         ? NetworkImage(_currentUser!.photoUrl!)\n                         : null,\n                 backgroundColor: theme.colorScheme.primary.withOpacity(0.1),\n                 child:\n-                    (_currentUser?.photoUrl?.isEmpty ?? true)\n+                    _currentUser?.photoUrl == null\n                         ? Text(\n-                          (_currentUser?.displayName?.isNotEmpty ?? false)\n-                              ? _currentUser!.displayName![0].toUpperCase()\n-                              : 'U',\n+                          _currentUser?.displayName?[0].toUpperCase() ?? 'U',\n                           style: theme.textTheme.bodySmall,\n                         )\n                         : null,\n               ),\n             ),\n             onPressed: _openProfile,\n+            tooltip: 'Profile',\n           ),\n           IconButton(\n             icon: const Icon(Icons.folder_outlined),\n             onPressed: _openDriveFolder,\n+            tooltip: 'Open in Google Drive',\n           ),\n           IconButton(\n             icon: const Icon(Icons.logout),\n+            onPressed: () => context.go('/login'),\n             tooltip: 'Sign out',\n-            onPressed: () async {\n-              await GoogleSignIn().signOut();\n-              if (context.mounted) context.go('/login');\n-            },\n           ),\n         ],\n       ),\n-      body: notesAsync.when(\n-        loading: () => const Center(child: CircularProgressIndicator()),\n-        error:\n-            (err, _) => Center(\n-              child: Column(\n-                mainAxisSize: MainAxisSize.min,\n-                children: [\n-                  const Icon(Icons.error_outline, size: 48, color: Colors.red),\n-                  const SizedBox(height: 12),\n-                  Text('Error: $err'),\n-                  const SizedBox(height: 12),\n-                  ElevatedButton(\n-                    onPressed: () => ref.invalidate(notesControllerProvider),\n-                    child: const Text('Retry'),\n+      body: Stack(\n+        children: [\n+          AnimatedSwitcher(\n+            duration: const Duration(milliseconds: 300),\n+            child: notesAsync.when(\n+              loading: () => const Center(child: CircularProgressIndicator()),\n+              error:\n+                  (error, stack) => Center(\n+                    child: Column(\n+                      mainAxisSize: MainAxisSize.min,\n+                      children: [\n+                        const Icon(\n+                          Icons.error_outline,\n+                          size: 48,\n+                          color: Colors.red,\n+                        ),\n+                        const SizedBox(height: 16),\n+                        Text('Error: $error'),\n+                        const SizedBox(height: 16),\n+                        ElevatedButton(\n+                          onPressed:\n+                              () => ref.invalidate(notesControllerProvider),\n+                          child: const Text('RETRY'),\n+                        ),\n+                      ],\n+                    ),\n                   ),\n-                ],\n+              data: (notes) {\n+                if (notes.isEmpty) {\n+                  return TweenAnimationBuilder<double>(\n+                    tween: Tween(begin: 0.0, end: 1.0),\n+                    duration: const Duration(milliseconds: 500),\n+                    builder: (context, value, child) {\n+                      return Opacity(\n+                        opacity: value,\n+                        child: Transform.translate(\n+                          offset: Offset(0, 20 * (1 - value)),\n+                          child: child,\n+                        ),\n+                      );\n+                    },\n+                    child: Center(\n+                      child: Column(\n+                        mainAxisSize: MainAxisSize.min,\n+                        children: [\n+                          Icon(\n+                            Icons.note_add,\n+                            size: 64,\n+                            color: theme.colorScheme.primary.withOpacity(0.5),\n+                          ),\n+                          const SizedBox(height: 16),\n+                          Text(\n+                            'No notes yet',\n+                            style: theme.textTheme.titleLarge?.copyWith(\n+                              color: theme.colorScheme.onSurface.withOpacity(\n+                                0.7,\n+                              ),\n+                            ),\n+                          ),\n+                          const SizedBox(height: 8),\n+                          Text(\n+                            'Tap the + button to create your first note',\n+                            style: theme.textTheme.bodyMedium?.copyWith(\n+                              color: theme.colorScheme.onSurface.withOpacity(\n+                                0.5,\n+                              ),\n+                            ),\n+                          ),\n+                        ],\n+                      ),\n+                    ),\n+                  );\n+                }\n+\n+                return AnimatedSwitcher(\n+                  duration: const Duration(milliseconds: 300),\n+                  child:\n+                      _isGridView\n+                          ? MasonryGridView.count(\n+                            key: const ValueKey('grid'),\n+                            padding: const EdgeInsets.all(8),\n+                            crossAxisCount:\n+                                MediaQuery.of(context).size.width > 600 ? 3 : 2,\n+                            mainAxisSpacing: 4,\n+                            crossAxisSpacing: 4,\n+                            itemCount: notes.length,\n+                            itemBuilder:\n+                                (context, index) =>\n+                                    _buildNoteCard(context, notes[index]),\n+                          )\n+                          : ListView.builder(\n+                            key: const ValueKey('list'),\n+                            padding: const EdgeInsets.all(8),\n+                            itemCount: notes.length,\n+                            itemBuilder:\n+                                (context, index) =>\n+                                    _buildNoteCard(context, notes[index]),\n+                          ),\n+                );\n+              },\n+            ),\n+          ),\n+          // Save progress indicator\n+          AnimatedPositioned(\n+            duration: const Duration(milliseconds: 300),\n+            curve: Curves.easeOut,\n+            left: 0,\n+            right: 0,\n+            bottom: saveState.isSaving || saveState.message != null ? 0 : -100,\n+            child: Material(\n+              elevation: 8,\n+              child: Container(\n+                padding: const EdgeInsets.symmetric(\n+                  horizontal: 16,\n+                  vertical: 12,\n+                ),\n+                decoration: BoxDecoration(\n+                  color:\n+                      saveState.isError\n+                          ? theme.colorScheme.errorContainer\n+                          : theme.colorScheme.primaryContainer,\n+                ),\n+                child: Row(\n+                  children: [\n+                    if (saveState.isSaving) ...[\n+                      const SizedBox(\n+                        height: 16,\n+                        width: 16,\n+                        child: CircularProgressIndicator(strokeWidth: 2),\n+                      ),\n+                      const SizedBox(width: 16),\n+                    ],\n+                    Expanded(\n+                      child: Text(\n+                        saveState.message ?? '',\n+                        style: theme.textTheme.bodyMedium?.copyWith(\n+                          color:\n+                              saveState.isError\n+                                  ? theme.colorScheme.onErrorContainer\n+                                  : theme.colorScheme.onPrimaryContainer,\n+                        ),\n+                      ),\n+                    ),\n+                    if (saveState.isError)\n+                      TextButton(\n+                        onPressed: () {\n+                          ref.read(noteSaveProvider.notifier).state =\n+                              const NoteSaveState();\n+                        },\n+                        child: const Text('DISMISS'),\n+                      ),\n+                  ],\n+                ),\n               ),\n             ),\n-        data: (notes) {\n-          if (notes.isEmpty) {\n-            return const Center(\n-              child: Text('No notes yet. Tap + to create one.'),\n-            );\n-          }\n-          return _isGridView\n-              ? MasonryGridView.count(\n-                crossAxisCount: MediaQuery.of(context).size.width > 600 ? 3 : 2,\n-                itemCount: notes.length,\n-                itemBuilder: (_, i) => _buildNoteCard(context, notes[i]),\n-                padding: const EdgeInsets.all(8),\n-                mainAxisSpacing: 4,\n-                crossAxisSpacing: 4,\n-              )\n-              : ListView.builder(\n-                itemCount: notes.length,\n-                padding: const EdgeInsets.all(8),\n-                itemBuilder: (_, i) => _buildNoteCard(context, notes[i]),\n-              );\n-        },\n+          ),\n+        ],\n       ),\n       floatingActionButton: FloatingActionButton(\n         onPressed: () => _openEditor(context, null, heroTag: 'new_note'),\n         tooltip: 'Add Note',\n"
                },
                {
                    "date": 1744919575853,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,529 @@\n+import 'package:drivenotes/features/notes/domain/models/note_model.dart';\n+import 'package:drivenotes/features/notes/presentation/providers/note_editor_controller.dart';\n+import 'package:drivenotes/note_editor_page.dart';\n+import 'package:drivenotes/notes_controller.dart';\n+import 'package:flutter/material.dart';\n+import 'package:flutter/services.dart';\n+import 'package:flutter_riverpod/flutter_riverpod.dart';\n+import 'package:go_router/go_router.dart';\n+import 'package:url_launcher/url_launcher.dart';\n+import 'package:flutter_staggered_grid_view/flutter_staggered_grid_view.dart';\n+import 'package:timeago/timeago.dart' as timeago;\n+import 'package:drivenotes/features/notes/presentation/providers/note_save_provider.dart';\n+import 'package:drivenotes/features/notes/presentation/providers/theme_provider.dart';\n+import 'package:google_sign_in/google_sign_in.dart';\n+import 'package:drivenotes/features/notes/presentation/pages/profile_page.dart';\n+\n+class NotesListPage extends ConsumerStatefulWidget {\n+  const NotesListPage({super.key});\n+\n+  @override\n+  ConsumerState<NotesListPage> createState() => _NotesListPageState();\n+}\n+\n+class _NotesListPageState extends ConsumerState<NotesListPage> {\n+  bool _isGridView = true;\n+  GoogleSignInAccount? _currentUser;\n+  bool _isLoadingUser = false;\n+\n+  @override\n+  void initState() {\n+    super.initState();\n+    _loadUser();\n+  }\n+\n+  @override\n+  void didChangeDependencies() {\n+    super.didChangeDependencies();\n+    _loadUser();\n+  }\n+\n+  Future<void> _loadUser() async {\n+    if (_isLoadingUser) return;\n+\n+    try {\n+      setState(() => _isLoadingUser = true);\n+      final googleSignIn = GoogleSignIn();\n+\n+      // First try to get current user\n+      _currentUser = googleSignIn.currentUser;\n+\n+      // If no current user, try silent sign in\n+      if (_currentUser == null) {\n+        _currentUser = await googleSignIn.signInSilently();\n+      }\n+\n+      if (mounted) {\n+        setState(() {\n+          _isLoadingUser = false;\n+        });\n+      }\n+    } catch (e) {\n+      debugPrint('Error loading user: $e');\n+      if (mounted) {\n+        setState(() {\n+          _isLoadingUser = false;\n+          _currentUser = null;\n+        });\n+      }\n+    }\n+  }\n+\n+  void _openProfile() {\n+    if (_currentUser == null || !mounted) {\n+      ScaffoldMessenger.of(context).showSnackBar(\n+        const SnackBar(\n+          content: Text('Please sign in again'),\n+          duration: Duration(seconds: 2),\n+        ),\n+      );\n+      context.go('/login');\n+      return;\n+    }\n+\n+    // Create a local final variable to prevent null issues during navigation\n+    final user = _currentUser;\n+    if (user != null) {\n+      Navigator.push(\n+        context,\n+        MaterialPageRoute(builder: (context) => ProfilePage(user: user)),\n+      );\n+    }\n+  }\n+\n+  Future<void> _openDriveFolder() async {\n+    const url = 'https://drive.google.com';\n+    if (await canLaunchUrl(Uri.parse(url))) {\n+      await launchUrl(Uri.parse(url));\n+    }\n+  }\n+\n+  Future<void> _deleteNote(BuildContext context, NoteModel note) async {\n+    final shouldDelete = await showDialog<bool>(\n+      context: context,\n+      builder:\n+          (context) => AlertDialog(\n+            title: const Text('Delete Note'),\n+            content: Text('Are you sure you want to delete \"${note.title}\"?'),\n+            actions: [\n+              TextButton(\n+                onPressed: () => Navigator.pop(context, false),\n+                child: const Text('CANCEL'),\n+              ),\n+              TextButton(\n+                style: TextButton.styleFrom(foregroundColor: Colors.red),\n+                onPressed: () => Navigator.pop(context, true),\n+                child: const Text('DELETE'),\n+              ),\n+            ],\n+          ),\n+    );\n+\n+    if (shouldDelete == true && mounted) {\n+      try {\n+        await ref.read(notesControllerProvider.notifier).delete(note.id);\n+        if (mounted) {\n+          ScaffoldMessenger.of(context).showSnackBar(\n+            SnackBar(\n+              content: Text('Deleted ${note.title}'),\n+              action: SnackBarAction(\n+                label: 'UNDO',\n+                onPressed: () {\n+                  ScaffoldMessenger.of(context).showSnackBar(\n+                    const SnackBar(\n+                      content: Text('Undo is not implemented yet'),\n+                    ),\n+                  );\n+                },\n+              ),\n+            ),\n+          );\n+        }\n+      } catch (e) {\n+        if (mounted) {\n+          ScaffoldMessenger.of(\n+            context,\n+          ).showSnackBar(SnackBar(content: Text('Error deleting note: $e')));\n+        }\n+      }\n+    }\n+  }\n+\n+  Widget _buildNoteCard(BuildContext context, NoteModel note) {\n+    final theme = Theme.of(context);\n+    return Hero(\n+      tag: 'note_card_${note.id}',\n+      child: Material(\n+        color: Colors.transparent,\n+        child: AnimatedContainer(\n+          duration: const Duration(milliseconds: 200),\n+          child: Card(\n+            elevation: 2,\n+            margin: const EdgeInsets.all(4),\n+            child: InkWell(\n+              onTap:\n+                  () => _openEditor(\n+                    context,\n+                    note,\n+                    heroTag: 'note_card_${note.id}',\n+                  ),\n+              onLongPress: () => _deleteNote(context, note),\n+              borderRadius: BorderRadius.circular(12),\n+              child: ConstrainedBox(\n+                constraints: BoxConstraints(\n+                  minHeight: 100,\n+                  maxHeight: _isGridView ? 300 : 150,\n+                ),\n+                child: Padding(\n+                  padding: const EdgeInsets.all(16),\n+                  child: Column(\n+                    crossAxisAlignment: CrossAxisAlignment.start,\n+                    mainAxisSize: MainAxisSize.min,\n+                    children: [\n+                      Row(\n+                        children: [\n+                          Expanded(\n+                            child: Text(\n+                              note.title.replaceAll(RegExp(r'\\.txt$'), ''),\n+                              style: theme.textTheme.titleMedium?.copyWith(\n+                                fontWeight: FontWeight.bold,\n+                              ),\n+                              maxLines: 1,\n+                              overflow: TextOverflow.ellipsis,\n+                            ),\n+                          ),\n+                          IconButton(\n+                            icon: const Icon(Icons.more_vert),\n+                            onPressed: () {\n+                              HapticFeedback.lightImpact();\n+                              showModalBottomSheet(\n+                                context: context,\n+                                builder:\n+                                    (context) => SafeArea(\n+                                      child: ListView(\n+                                        shrinkWrap: true,\n+                                        children: [\n+                                          ListTile(\n+                                            leading: const Icon(Icons.edit),\n+                                            title: const Text('Edit'),\n+                                            onTap: () {\n+                                              Navigator.pop(context);\n+                                              _openEditor(\n+                                                context,\n+                                                note,\n+                                                heroTag: 'note_card_${note.id}',\n+                                              );\n+                                            },\n+                                          ),\n+                                          ListTile(\n+                                            leading: const Icon(\n+                                              Icons.delete,\n+                                              color: Colors.red,\n+                                            ),\n+                                            title: const Text('Delete'),\n+                                            onTap: () {\n+                                              Navigator.pop(context);\n+                                              _deleteNote(context, note);\n+                                            },\n+                                          ),\n+                                        ],\n+                                      ),\n+                                    ),\n+                              );\n+                            },\n+                          ),\n+                        ],\n+                      ),\n+                      if (note.content.isNotEmpty) ...[\n+                        const SizedBox(height: 8),\n+                        Expanded(\n+                          child: Text(\n+                            note.content,\n+                            style: theme.textTheme.bodyMedium?.copyWith(\n+                              color: theme.textTheme.bodySmall?.color,\n+                            ),\n+                            maxLines: _isGridView ? 6 : 2,\n+                            overflow: TextOverflow.ellipsis,\n+                          ),\n+                        ),\n+                      ],\n+                      const SizedBox(height: 8),\n+                      Text(\n+                        timeago.format(note.updatedAt),\n+                        style: theme.textTheme.bodySmall,\n+                      ),\n+                    ],\n+                  ),\n+                ),\n+              ),\n+            ),\n+          ),\n+        ),\n+      ),\n+    );\n+  }\n+\n+  void _openEditor(BuildContext context, NoteModel? note, {String? heroTag}) {\n+    Navigator.push(\n+      context,\n+      PageRouteBuilder(\n+        pageBuilder:\n+            (context, animation, secondaryAnimation) =>\n+                NoteEditorPage(originalNote: note, heroTag: heroTag),\n+        transitionsBuilder: (context, animation, secondaryAnimation, child) {\n+          const begin = Offset(0.0, 0.05);\n+          const end = Offset.zero;\n+          const curve = Curves.easeOut;\n+          var tween = Tween(\n+            begin: begin,\n+            end: end,\n+          ).chain(CurveTween(curve: curve));\n+          var offsetAnimation = animation.drive(tween);\n+          var fadeAnimation = animation.drive(CurveTween(curve: curve));\n+\n+          return FadeTransition(\n+            opacity: fadeAnimation,\n+            child: SlideTransition(position: offsetAnimation, child: child),\n+          );\n+        },\n+        transitionDuration: const Duration(milliseconds: 300),\n+      ),\n+    ).then((_) => ref.invalidate(notesControllerProvider));\n+  }\n+\n+  @override\n+  Widget build(BuildContext context) {\n+    final theme = Theme.of(context);\n+    final notesAsync = ref.watch(notesControllerProvider);\n+    final saveState = ref.watch(noteSaveProvider);\n+    final themeMode = ref.watch(themeProvider);\n+\n+    // Auto-refresh notes list when save completes\n+    ref.listen(noteSaveProvider, (previous, next) {\n+      if (previous?.isSaving == true &&\n+          next.isSaving == false &&\n+          !next.isError) {\n+        ref.invalidate(notesControllerProvider);\n+      }\n+    });\n+\n+    return Scaffold(\n+      appBar: AppBar(\n+        title: const Hero(\n+          tag: 'note_title',\n+          child: Material(color: Colors.transparent, child: Text('DriveNotes')),\n+        ),\n+        actions: [\n+          IconButton(\n+            icon: AnimatedSwitcher(\n+              duration: const Duration(milliseconds: 200),\n+              child: Icon(\n+                _isGridView ? Icons.view_list : Icons.grid_view,\n+                key: ValueKey(_isGridView),\n+              ),\n+            ),\n+            onPressed: () => setState(() => _isGridView = !_isGridView),\n+            tooltip: _isGridView ? 'List View' : 'Grid View',\n+          ),\n+          IconButton(\n+            icon: Hero(\n+              tag: 'profile_image',\n+              child: CircleAvatar(\n+                radius: 14,\n+                backgroundImage:\n+                    _currentUser?.photoUrl != null\n+                        ? NetworkImage(_currentUser!.photoUrl!)\n+                        : null,\n+                backgroundColor: theme.colorScheme.primary.withOpacity(0.1),\n+                child: (_currentUser?.photoUrl?.isEmpty ?? true)\n+    ? Text(\n+        (_currentUser?.displayName?.isNotEmpty ?? false)\n+            ? _currentUser!.displayName![0].toUpperCase()\n+            : 'U',\n+        style: theme.textTheme.bodySmall,\n+      )\n+    : null,\n+\n+              ),\n+            ),\n+            onPressed: _openProfile,\n+            tooltip: 'Profile',\n+          ),\n+          IconButton(\n+            icon: const Icon(Icons.folder_outlined),\n+            onPressed: _openDriveFolder,\n+            tooltip: 'Open in Google Drive',\n+          ),\n+          IconButton(\n+            icon: const Icon(Icons.logout),\n+            onPressed: () => context.go('/login'),\n+            tooltip: 'Sign out',\n+          ),\n+        ],\n+      ),\n+      body: Stack(\n+        children: [\n+          AnimatedSwitcher(\n+            duration: const Duration(milliseconds: 300),\n+            child: notesAsync.when(\n+              loading: () => const Center(child: CircularProgressIndicator()),\n+              error:\n+                  (error, stack) => Center(\n+                    child: Column(\n+                      mainAxisSize: MainAxisSize.min,\n+                      children: [\n+                        const Icon(\n+                          Icons.error_outline,\n+                          size: 48,\n+                          color: Colors.red,\n+                        ),\n+                        const SizedBox(height: 16),\n+                        Text('Error: $error'),\n+                        const SizedBox(height: 16),\n+                        ElevatedButton(\n+                          onPressed:\n+                              () => ref.invalidate(notesControllerProvider),\n+                          child: const Text('RETRY'),\n+                        ),\n+                      ],\n+                    ),\n+                  ),\n+              data: (notes) {\n+                if (notes.isEmpty) {\n+                  return TweenAnimationBuilder<double>(\n+                    tween: Tween(begin: 0.0, end: 1.0),\n+                    duration: const Duration(milliseconds: 500),\n+                    builder: (context, value, child) {\n+                      return Opacity(\n+                        opacity: value,\n+                        child: Transform.translate(\n+                          offset: Offset(0, 20 * (1 - value)),\n+                          child: child,\n+                        ),\n+                      );\n+                    },\n+                    child: Center(\n+                      child: Column(\n+                        mainAxisSize: MainAxisSize.min,\n+                        children: [\n+                          Icon(\n+                            Icons.note_add,\n+                            size: 64,\n+                            color: theme.colorScheme.primary.withOpacity(0.5),\n+                          ),\n+                          const SizedBox(height: 16),\n+                          Text(\n+                            'No notes yet',\n+                            style: theme.textTheme.titleLarge?.copyWith(\n+                              color: theme.colorScheme.onSurface.withOpacity(\n+                                0.7,\n+                              ),\n+                            ),\n+                          ),\n+                          const SizedBox(height: 8),\n+                          Text(\n+                            'Tap the + button to create your first note',\n+                            style: theme.textTheme.bodyMedium?.copyWith(\n+                              color: theme.colorScheme.onSurface.withOpacity(\n+                                0.5,\n+                              ),\n+                            ),\n+                          ),\n+                        ],\n+                      ),\n+                    ),\n+                  );\n+                }\n+\n+                return AnimatedSwitcher(\n+                  duration: const Duration(milliseconds: 300),\n+                  child:\n+                      _isGridView\n+                          ? MasonryGridView.count(\n+                            key: const ValueKey('grid'),\n+                            padding: const EdgeInsets.all(8),\n+                            crossAxisCount:\n+                                MediaQuery.of(context).size.width > 600 ? 3 : 2,\n+                            mainAxisSpacing: 4,\n+                            crossAxisSpacing: 4,\n+                            itemCount: notes.length,\n+                            itemBuilder:\n+                                (context, index) =>\n+                                    _buildNoteCard(context, notes[index]),\n+                          )\n+                          : ListView.builder(\n+                            key: const ValueKey('list'),\n+                            padding: const EdgeInsets.all(8),\n+                            itemCount: notes.length,\n+                            itemBuilder:\n+                                (context, index) =>\n+                                    _buildNoteCard(context, notes[index]),\n+                          ),\n+                );\n+              },\n+            ),\n+          ),\n+          // Save progress indicator\n+          AnimatedPositioned(\n+            duration: const Duration(milliseconds: 300),\n+            curve: Curves.easeOut,\n+            left: 0,\n+            right: 0,\n+            bottom: saveState.isSaving || saveState.message != null ? 0 : -100,\n+            child: Material(\n+              elevation: 8,\n+              child: Container(\n+                padding: const EdgeInsets.symmetric(\n+                  horizontal: 16,\n+                  vertical: 12,\n+                ),\n+                decoration: BoxDecoration(\n+                  color:\n+                      saveState.isError\n+                          ? theme.colorScheme.errorContainer\n+                          : theme.colorScheme.primaryContainer,\n+                ),\n+                child: Row(\n+                  children: [\n+                    if (saveState.isSaving) ...[\n+                      const SizedBox(\n+                        height: 16,\n+                        width: 16,\n+                        child: CircularProgressIndicator(strokeWidth: 2),\n+                      ),\n+                      const SizedBox(width: 16),\n+                    ],\n+                    Expanded(\n+                      child: Text(\n+                        saveState.message ?? '',\n+                        style: theme.textTheme.bodyMedium?.copyWith(\n+                          color:\n+                              saveState.isError\n+                                  ? theme.colorScheme.onErrorContainer\n+                                  : theme.colorScheme.onPrimaryContainer,\n+                        ),\n+                      ),\n+                    ),\n+                    if (saveState.isError)\n+                      TextButton(\n+                        onPressed: () {\n+                          ref.read(noteSaveProvider.notifier).state =\n+                              const NoteSaveState();\n+                        },\n+                        child: const Text('DISMISS'),\n+                      ),\n+                  ],\n+                ),\n+              ),\n+            ),\n+          ),\n+        ],\n+      ),\n+      floatingActionButton: FloatingActionButton(\n+        onPressed: () => _openEditor(context, null, heroTag: 'new_note'),\n+        tooltip: 'Add Note',\n+        child: const Icon(Icons.add),\n+      ),\n+    );\n+  }\n+}\n"
                },
                {
                    "date": 1744969668756,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,11 +48,9 @@\n       // First try to get current user\n       _currentUser = googleSignIn.currentUser;\n \n       // If no current user, try silent sign in\n-      if (_currentUser == null) {\n-        _currentUser = await googleSignIn.signInSilently();\n-      }\n+      _currentUser ??= await googleSignIn.signInSilently();\n \n       if (mounted) {\n         setState(() {\n           _isLoadingUser = false;\n@@ -526,531 +524,4 @@\n       ),\n     );\n   }\n }\n-import 'package:drivenotes/features/notes/domain/models/note_model.dart';\n-import 'package:drivenotes/features/notes/presentation/providers/note_editor_controller.dart';\n-import 'package:drivenotes/note_editor_page.dart';\n-import 'package:drivenotes/notes_controller.dart';\n-import 'package:flutter/material.dart';\n-import 'package:flutter/services.dart';\n-import 'package:flutter_riverpod/flutter_riverpod.dart';\n-import 'package:go_router/go_router.dart';\n-import 'package:url_launcher/url_launcher.dart';\n-import 'package:flutter_staggered_grid_view/flutter_staggered_grid_view.dart';\n-import 'package:timeago/timeago.dart' as timeago;\n-import 'package:drivenotes/features/notes/presentation/providers/note_save_provider.dart';\n-import 'package:drivenotes/features/notes/presentation/providers/theme_provider.dart';\n-import 'package:google_sign_in/google_sign_in.dart';\n-import 'package:drivenotes/features/notes/presentation/pages/profile_page.dart';\n-\n-class NotesListPage extends ConsumerStatefulWidget {\n-  const NotesListPage({super.key});\n-\n-  @override\n-  ConsumerState<NotesListPage> createState() => _NotesListPageState();\n-}\n-\n-class _NotesListPageState extends ConsumerState<NotesListPage> {\n-  bool _isGridView = true;\n-  GoogleSignInAccount? _currentUser;\n-  bool _isLoadingUser = false;\n-\n-  @override\n-  void initState() {\n-    super.initState();\n-    _loadUser();\n-  }\n-\n-  @override\n-  void didChangeDependencies() {\n-    super.didChangeDependencies();\n-    _loadUser();\n-  }\n-\n-  Future<void> _loadUser() async {\n-    if (_isLoadingUser) return;\n-\n-    try {\n-      setState(() => _isLoadingUser = true);\n-      final googleSignIn = GoogleSignIn();\n-\n-      // First try to get current user\n-      _currentUser = googleSignIn.currentUser;\n-\n-      // If no current user, try silent sign in\n-      if (_currentUser == null) {\n-        _currentUser = await googleSignIn.signInSilently();\n-      }\n-\n-      if (mounted) {\n-        setState(() {\n-          _isLoadingUser = false;\n-        });\n-      }\n-    } catch (e) {\n-      debugPrint('Error loading user: $e');\n-      if (mounted) {\n-        setState(() {\n-          _isLoadingUser = false;\n-          _currentUser = null;\n-        });\n-      }\n-    }\n-  }\n-\n-  void _openProfile() {\n-    if (_currentUser == null || !mounted) {\n-      ScaffoldMessenger.of(context).showSnackBar(\n-        const SnackBar(\n-          content: Text('Please sign in again'),\n-          duration: Duration(seconds: 2),\n-        ),\n-      );\n-      context.go('/login');\n-      return;\n-    }\n-\n-    // Create a local final variable to prevent null issues during navigation\n-    final user = _currentUser;\n-    if (user != null) {\n-      Navigator.push(\n-        context,\n-        MaterialPageRoute(builder: (context) => ProfilePage(user: user)),\n-      );\n-    }\n-  }\n-\n-  Future<void> _openDriveFolder() async {\n-    const url = 'https://drive.google.com';\n-    if (await canLaunchUrl(Uri.parse(url))) {\n-      await launchUrl(Uri.parse(url));\n-    }\n-  }\n-\n-  Future<void> _deleteNote(BuildContext context, NoteModel note) async {\n-    final shouldDelete = await showDialog<bool>(\n-      context: context,\n-      builder:\n-          (context) => AlertDialog(\n-            title: const Text('Delete Note'),\n-            content: Text('Are you sure you want to delete \"${note.title}\"?'),\n-            actions: [\n-              TextButton(\n-                onPressed: () => Navigator.pop(context, false),\n-                child: const Text('CANCEL'),\n-              ),\n-              TextButton(\n-                style: TextButton.styleFrom(foregroundColor: Colors.red),\n-                onPressed: () => Navigator.pop(context, true),\n-                child: const Text('DELETE'),\n-              ),\n-            ],\n-          ),\n-    );\n-\n-    if (shouldDelete == true && mounted) {\n-      try {\n-        await ref.read(notesControllerProvider.notifier).delete(note.id);\n-        if (mounted) {\n-          ScaffoldMessenger.of(context).showSnackBar(\n-            SnackBar(\n-              content: Text('Deleted ${note.title}'),\n-              action: SnackBarAction(\n-                label: 'UNDO',\n-                onPressed: () {\n-                  ScaffoldMessenger.of(context).showSnackBar(\n-                    const SnackBar(\n-                      content: Text('Undo is not implemented yet'),\n-                    ),\n-                  );\n-                },\n-              ),\n-            ),\n-          );\n-        }\n-      } catch (e) {\n-        if (mounted) {\n-          ScaffoldMessenger.of(\n-            context,\n-          ).showSnackBar(SnackBar(content: Text('Error deleting note: $e')));\n-        }\n-      }\n-    }\n-  }\n-\n-  Widget _buildNoteCard(BuildContext context, NoteModel note) {\n-    final theme = Theme.of(context);\n-    return Hero(\n-      tag: 'note_card_${note.id}',\n-      child: Material(\n-        color: Colors.transparent,\n-        child: AnimatedContainer(\n-          duration: const Duration(milliseconds: 200),\n-          child: Card(\n-            elevation: 2,\n-            margin: const EdgeInsets.all(4),\n-            child: InkWell(\n-              onTap:\n-                  () => _openEditor(\n-                    context,\n-                    note,\n-                    heroTag: 'note_card_${note.id}',\n-                  ),\n-              onLongPress: () => _deleteNote(context, note),\n-              borderRadius: BorderRadius.circular(12),\n-              child: ConstrainedBox(\n-                constraints: BoxConstraints(\n-                  minHeight: 100,\n-                  maxHeight: _isGridView ? 300 : 150,\n-                ),\n-                child: Padding(\n-                  padding: const EdgeInsets.all(16),\n-                  child: Column(\n-                    crossAxisAlignment: CrossAxisAlignment.start,\n-                    mainAxisSize: MainAxisSize.min,\n-                    children: [\n-                      Row(\n-                        children: [\n-                          Expanded(\n-                            child: Text(\n-                              note.title.replaceAll(RegExp(r'\\.txt$'), ''),\n-                              style: theme.textTheme.titleMedium?.copyWith(\n-                                fontWeight: FontWeight.bold,\n-                              ),\n-                              maxLines: 1,\n-                              overflow: TextOverflow.ellipsis,\n-                            ),\n-                          ),\n-                          IconButton(\n-                            icon: const Icon(Icons.more_vert),\n-                            onPressed: () {\n-                              HapticFeedback.lightImpact();\n-                              showModalBottomSheet(\n-                                context: context,\n-                                builder:\n-                                    (context) => SafeArea(\n-                                      child: ListView(\n-                                        shrinkWrap: true,\n-                                        children: [\n-                                          ListTile(\n-                                            leading: const Icon(Icons.edit),\n-                                            title: const Text('Edit'),\n-                                            onTap: () {\n-                                              Navigator.pop(context);\n-                                              _openEditor(\n-                                                context,\n-                                                note,\n-                                                heroTag: 'note_card_${note.id}',\n-                                              );\n-                                            },\n-                                          ),\n-                                          ListTile(\n-                                            leading: const Icon(\n-                                              Icons.delete,\n-                                              color: Colors.red,\n-                                            ),\n-                                            title: const Text('Delete'),\n-                                            onTap: () {\n-                                              Navigator.pop(context);\n-                                              _deleteNote(context, note);\n-                                            },\n-                                          ),\n-                                        ],\n-                                      ),\n-                                    ),\n-                              );\n-                            },\n-                          ),\n-                        ],\n-                      ),\n-                      if (note.content.isNotEmpty) ...[\n-                        const SizedBox(height: 8),\n-                        Expanded(\n-                          child: Text(\n-                            note.content,\n-                            style: theme.textTheme.bodyMedium?.copyWith(\n-                              color: theme.textTheme.bodySmall?.color,\n-                            ),\n-                            maxLines: _isGridView ? 6 : 2,\n-                            overflow: TextOverflow.ellipsis,\n-                          ),\n-                        ),\n-                      ],\n-                      const SizedBox(height: 8),\n-                      Text(\n-                        timeago.format(note.updatedAt),\n-                        style: theme.textTheme.bodySmall,\n-                      ),\n-                    ],\n-                  ),\n-                ),\n-              ),\n-            ),\n-          ),\n-        ),\n-      ),\n-    );\n-  }\n-\n-  void _openEditor(BuildContext context, NoteModel? note, {String? heroTag}) {\n-    Navigator.push(\n-      context,\n-      PageRouteBuilder(\n-        pageBuilder:\n-            (context, animation, secondaryAnimation) =>\n-                NoteEditorPage(originalNote: note, heroTag: heroTag),\n-        transitionsBuilder: (context, animation, secondaryAnimation, child) {\n-          const begin = Offset(0.0, 0.05);\n-          const end = Offset.zero;\n-          const curve = Curves.easeOut;\n-          var tween = Tween(\n-            begin: begin,\n-            end: end,\n-          ).chain(CurveTween(curve: curve));\n-          var offsetAnimation = animation.drive(tween);\n-          var fadeAnimation = animation.drive(CurveTween(curve: curve));\n-\n-          return FadeTransition(\n-            opacity: fadeAnimation,\n-            child: SlideTransition(position: offsetAnimation, child: child),\n-          );\n-        },\n-        transitionDuration: const Duration(milliseconds: 300),\n-      ),\n-    ).then((_) => ref.invalidate(notesControllerProvider));\n-  }\n-\n-  @override\n-  Widget build(BuildContext context) {\n-    final theme = Theme.of(context);\n-    final notesAsync = ref.watch(notesControllerProvider);\n-    final saveState = ref.watch(noteSaveProvider);\n-    final themeMode = ref.watch(themeProvider);\n-\n-    // Auto-refresh notes list when save completes\n-    ref.listen(noteSaveProvider, (previous, next) {\n-      if (previous?.isSaving == true &&\n-          next.isSaving == false &&\n-          !next.isError) {\n-        ref.invalidate(notesControllerProvider);\n-      }\n-    });\n-\n-    return Scaffold(\n-      appBar: AppBar(\n-        title: const Hero(\n-          tag: 'note_title',\n-          child: Material(color: Colors.transparent, child: Text('DriveNotes')),\n-        ),\n-        actions: [\n-          IconButton(\n-            icon: AnimatedSwitcher(\n-              duration: const Duration(milliseconds: 200),\n-              child: Icon(\n-                _isGridView ? Icons.view_list : Icons.grid_view,\n-                key: ValueKey(_isGridView),\n-              ),\n-            ),\n-            onPressed: () => setState(() => _isGridView = !_isGridView),\n-            tooltip: _isGridView ? 'List View' : 'Grid View',\n-          ),\n-          IconButton(\n-            icon: Hero(\n-              tag: 'profile_image',\n-              child: CircleAvatar(\n-                radius: 14,\n-                backgroundImage:\n-                    _currentUser?.photoUrl != null\n-                        ? NetworkImage(_currentUser!.photoUrl!)\n-                        : null,\n-                backgroundColor: theme.colorScheme.primary.withOpacity(0.1),\n-                child:\n-                    _currentUser?.photoUrl == null\n-                        ? Text(\n-                          _currentUser?.displayName?[0].toUpperCase() ?? 'U',\n-                          style: theme.textTheme.bodySmall,\n-                        )\n-                        : null,\n-              ),\n-            ),\n-            onPressed: _openProfile,\n-            tooltip: 'Profile',\n-          ),\n-          IconButton(\n-            icon: const Icon(Icons.folder_outlined),\n-            onPressed: _openDriveFolder,\n-            tooltip: 'Open in Google Drive',\n-          ),\n-          IconButton(\n-            icon: const Icon(Icons.logout),\n-            onPressed: () => context.go('/login'),\n-            tooltip: 'Sign out',\n-          ),\n-        ],\n-      ),\n-      body: Stack(\n-        children: [\n-          AnimatedSwitcher(\n-            duration: const Duration(milliseconds: 300),\n-            child: notesAsync.when(\n-              loading: () => const Center(child: CircularProgressIndicator()),\n-              error:\n-                  (error, stack) => Center(\n-                    child: Column(\n-                      mainAxisSize: MainAxisSize.min,\n-                      children: [\n-                        const Icon(\n-                          Icons.error_outline,\n-                          size: 48,\n-                          color: Colors.red,\n-                        ),\n-                        const SizedBox(height: 16),\n-                        Text('Error: $error'),\n-                        const SizedBox(height: 16),\n-                        ElevatedButton(\n-                          onPressed:\n-                              () => ref.invalidate(notesControllerProvider),\n-                          child: const Text('RETRY'),\n-                        ),\n-                      ],\n-                    ),\n-                  ),\n-              data: (notes) {\n-                if (notes.isEmpty) {\n-                  return TweenAnimationBuilder<double>(\n-                    tween: Tween(begin: 0.0, end: 1.0),\n-                    duration: const Duration(milliseconds: 500),\n-                    builder: (context, value, child) {\n-                      return Opacity(\n-                        opacity: value,\n-                        child: Transform.translate(\n-                          offset: Offset(0, 20 * (1 - value)),\n-                          child: child,\n-                        ),\n-                      );\n-                    },\n-                    child: Center(\n-                      child: Column(\n-                        mainAxisSize: MainAxisSize.min,\n-                        children: [\n-                          Icon(\n-                            Icons.note_add,\n-                            size: 64,\n-                            color: theme.colorScheme.primary.withOpacity(0.5),\n-                          ),\n-                          const SizedBox(height: 16),\n-                          Text(\n-                            'No notes yet',\n-                            style: theme.textTheme.titleLarge?.copyWith(\n-                              color: theme.colorScheme.onSurface.withOpacity(\n-                                0.7,\n-                              ),\n-                            ),\n-                          ),\n-                          const SizedBox(height: 8),\n-                          Text(\n-                            'Tap the + button to create your first note',\n-                            style: theme.textTheme.bodyMedium?.copyWith(\n-                              color: theme.colorScheme.onSurface.withOpacity(\n-                                0.5,\n-                              ),\n-                            ),\n-                          ),\n-                        ],\n-                      ),\n-                    ),\n-                  );\n-                }\n-\n-                return AnimatedSwitcher(\n-                  duration: const Duration(milliseconds: 300),\n-                  child:\n-                      _isGridView\n-                          ? MasonryGridView.count(\n-                            key: const ValueKey('grid'),\n-                            padding: const EdgeInsets.all(8),\n-                            crossAxisCount:\n-                                MediaQuery.of(context).size.width > 600 ? 3 : 2,\n-                            mainAxisSpacing: 4,\n-                            crossAxisSpacing: 4,\n-                            itemCount: notes.length,\n-                            itemBuilder:\n-                                (context, index) =>\n-                                    _buildNoteCard(context, notes[index]),\n-                          )\n-                          : ListView.builder(\n-                            key: const ValueKey('list'),\n-                            padding: const EdgeInsets.all(8),\n-                            itemCount: notes.length,\n-                            itemBuilder:\n-                                (context, index) =>\n-                                    _buildNoteCard(context, notes[index]),\n-                          ),\n-                );\n-              },\n-            ),\n-          ),\n-          // Save progress indicator\n-          AnimatedPositioned(\n-            duration: const Duration(milliseconds: 300),\n-            curve: Curves.easeOut,\n-            left: 0,\n-            right: 0,\n-            bottom: saveState.isSaving || saveState.message != null ? 0 : -100,\n-            child: Material(\n-              elevation: 8,\n-              child: Container(\n-                padding: const EdgeInsets.symmetric(\n-                  horizontal: 16,\n-                  vertical: 12,\n-                ),\n-                decoration: BoxDecoration(\n-                  color:\n-                      saveState.isError\n-                          ? theme.colorScheme.errorContainer\n-                          : theme.colorScheme.primaryContainer,\n-                ),\n-                child: Row(\n-                  children: [\n-                    if (saveState.isSaving) ...[\n-                      const SizedBox(\n-                        height: 16,\n-                        width: 16,\n-                        child: CircularProgressIndicator(strokeWidth: 2),\n-                      ),\n-                      const SizedBox(width: 16),\n-                    ],\n-                    Expanded(\n-                      child: Text(\n-                        saveState.message ?? '',\n-                        style: theme.textTheme.bodyMedium?.copyWith(\n-                          color:\n-                              saveState.isError\n-                                  ? theme.colorScheme.onErrorContainer\n-                                  : theme.colorScheme.onPrimaryContainer,\n-                        ),\n-                      ),\n-                    ),\n-                    if (saveState.isError)\n-                      TextButton(\n-                        onPressed: () {\n-                          ref.read(noteSaveProvider.notifier).state =\n-                              const NoteSaveState();\n-                        },\n-                        child: const Text('DISMISS'),\n-                      ),\n-                  ],\n-                ),\n-              ),\n-            ),\n-          ),\n-        ],\n-      ),\n-      floatingActionButton: FloatingActionButton(\n-        onPressed: () => _openEditor(context, null, heroTag: 'new_note'),\n-        tooltip: 'Add Note',\n-        child: const Icon(Icons.add),\n-      ),\n-    );\n-  }\n-}\n"
                },
                {
                    "date": 1744971878955,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -295,8 +295,9 @@\n     final theme = Theme.of(context);\n     final notesAsync = ref.watch(notesControllerProvider);\n     final saveState = ref.watch(noteSaveProvider);\n     final themeMode = ref.watch(themeProvider);\n+    final isOffline = ref.watch(connectivityProvider);\n \n     // Auto-refresh notes list when save completes\n     ref.listen(noteSaveProvider, (previous, next) {\n       if (previous?.isSaving == true &&\n@@ -312,8 +313,11 @@\n           tag: 'note_title',\n           child: Material(color: Colors.transparent, child: Text('DriveNotes')),\n         ),\n         actions: [\n+          if (isOffline)\n+            Padding(\n+              padding: const EdgeInsets.only(right: 16),\n           IconButton(\n             icon: AnimatedSwitcher(\n               duration: const Duration(milliseconds: 200),\n               child: Icon(\n"
                },
                {
                    "date": 1744971997581,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,16 +14,16 @@\n import 'package:google_sign_in/google_sign_in.dart';\n import 'package:drivenotes/features/notes/presentation/pages/profile_page.dart';\n import 'package:drivenotes/features/connectivity/providers/connectivity_provider.dart';\n \n-class NotesListPage extends ConsumerStatefulWidget {\n+class NotesListPage extends StatefulWidget {\n   const NotesListPage({super.key});\n \n   @override\n-  ConsumerState<NotesListPage> createState() => _NotesListPageState();\n+  State<NotesListPage> createState() => _NotesListPageState();\n }\n \n-class _NotesListPageState extends ConsumerState<NotesListPage> {\n+class _NotesListPageState extends State<NotesListPage> {\n   bool _isGridView = true;\n   GoogleSignInAccount? _currentUser;\n   bool _isLoadingUser = false;\n \n@@ -290,261 +290,265 @@\n     ).then((_) => ref.invalidate(notesControllerProvider));\n   }\n \n   @override\n-  Widget build(BuildContext context, WidgetRef ref) {\n-    final theme = Theme.of(context);\n-    final notesAsync = ref.watch(notesControllerProvider);\n-    final saveState = ref.watch(noteSaveProvider);\n-    final themeMode = ref.watch(themeProvider);\n-    final isOffline = ref.watch(connectivityProvider);\n+  Widget build(BuildContext context) {\n+    return Consumer(\n+      builder: (context, ref, child) {\n+        final theme = Theme.of(context);\n+        final notesAsync = ref.watch(notesControllerProvider);\n+        final saveState = ref.watch(noteSaveProvider);\n+        final themeMode = ref.watch(themeProvider);\n+        final isOffline = ref.watch(connectivityProvider);\n \n-    // Auto-refresh notes list when save completes\n-    ref.listen(noteSaveProvider, (previous, next) {\n-      if (previous?.isSaving == true &&\n-          next.isSaving == false &&\n-          !next.isError) {\n-        ref.invalidate(notesControllerProvider);\n-      }\n-    });\n+        // Auto-refresh notes list when save completes\n+        ref.listen(noteSaveProvider, (previous, next) {\n+          if (previous?.isSaving == true &&\n+              next.isSaving == false &&\n+              !next.isError) {\n+            ref.invalidate(notesControllerProvider);\n+          }\n+        });\n \n-    return Scaffold(\n-      appBar: AppBar(\n-        title: const Hero(\n-          tag: 'note_title',\n-          child: Material(color: Colors.transparent, child: Text('DriveNotes')),\n-        ),\n-        actions: [\n-          if (isOffline)\n-            Padding(\n-              padding: const EdgeInsets.only(right: 16),\n-              child: Row(\n-                mainAxisSize: MainAxisSize.min,\n-                children: [\n-                  Icon(\n-                    Icons.cloud_off,\n-                    color: theme.colorScheme.error,\n-                    size: 20,\n+        return Scaffold(\n+          appBar: AppBar(\n+            title: const Hero(\n+              tag: 'note_title',\n+              child: Material(color: Colors.transparent, child: Text('DriveNotes')),\n+            ),\n+            actions: [\n+              if (isOffline)\n+                Padding(\n+                  padding: const EdgeInsets.only(right: 16),\n+                  child: Row(\n+                    mainAxisSize: MainAxisSize.min,\n+                    children: [\n+                      Icon(\n+                        Icons.cloud_off,\n+                        color: theme.colorScheme.error,\n+                        size: 20,\n+                      ),\n+                      const SizedBox(width: 8),\n+                      Text(\n+                        'Offline',\n+                        style: theme.textTheme.bodyMedium?.copyWith(\n+                          color: theme.colorScheme.error,\n+                        ),\n+                      ),\n+                    ],\n                   ),\n-                  const SizedBox(width: 8),\n-                  Text(\n-                    'Offline',\n-                    style: theme.textTheme.bodyMedium?.copyWith(\n-                      color: theme.colorScheme.error,\n-                    ),\n+                ),\n+              IconButton(\n+                icon: AnimatedSwitcher(\n+                  duration: const Duration(milliseconds: 200),\n+                  child: Icon(\n+                    _isGridView ? Icons.view_list : Icons.grid_view,\n+                    key: ValueKey(_isGridView),\n                   ),\n-                ],\n+                ),\n+                onPressed: () => setState(() => _isGridView = !_isGridView),\n+                tooltip: _isGridView ? 'List View' : 'Grid View',\n               ),\n-            ),\n-          IconButton(\n-            icon: AnimatedSwitcher(\n-              duration: const Duration(milliseconds: 200),\n-              child: Icon(\n-                _isGridView ? Icons.view_list : Icons.grid_view,\n-                key: ValueKey(_isGridView),\n+              IconButton(\n+                icon: Hero(\n+                  tag: 'profile_image',\n+                  child: CircleAvatar(\n+                    radius: 14,\n+                    backgroundImage:\n+                        _currentUser?.photoUrl != null\n+                            ? NetworkImage(_currentUser!.photoUrl!)\n+                            : null,\n+                    backgroundColor: theme.colorScheme.primary.withOpacity(0.1),\n+                    child:\n+                        (_currentUser?.photoUrl?.isEmpty ?? true)\n+                            ? Text(\n+                              (_currentUser?.displayName?.isNotEmpty ?? false)\n+                                  ? _currentUser!.displayName![0].toUpperCase()\n+                                  : 'U',\n+                              style: theme.textTheme.bodySmall,\n+                            )\n+                            : null,\n+                  ),\n+                ),\n+                onPressed: _openProfile,\n+                tooltip: 'Profile',\n               ),\n-            ),\n-            onPressed: () => setState(() => _isGridView = !_isGridView),\n-            tooltip: _isGridView ? 'List View' : 'Grid View',\n-          ),\n-          IconButton(\n-            icon: Hero(\n-              tag: 'profile_image',\n-              child: CircleAvatar(\n-                radius: 14,\n-                backgroundImage:\n-                    _currentUser?.photoUrl != null\n-                        ? NetworkImage(_currentUser!.photoUrl!)\n-                        : null,\n-                backgroundColor: theme.colorScheme.primary.withOpacity(0.1),\n-                child:\n-                    (_currentUser?.photoUrl?.isEmpty ?? true)\n-                        ? Text(\n-                          (_currentUser?.displayName?.isNotEmpty ?? false)\n-                              ? _currentUser!.displayName![0].toUpperCase()\n-                              : 'U',\n-                          style: theme.textTheme.bodySmall,\n-                        )\n-                        : null,\n+              IconButton(\n+                icon: const Icon(Icons.folder_outlined),\n+                onPressed: () => _openDriveFolder(context),\n+                tooltip: 'Open in Google Drive',\n               ),\n-            ),\n-            onPressed: _openProfile,\n-            tooltip: 'Profile',\n+              IconButton(\n+                icon: const Icon(Icons.logout),\n+                onPressed: () => context.go('/login'),\n+                tooltip: 'Sign out',\n+              ),\n+            ],\n           ),\n-          IconButton(\n-            icon: const Icon(Icons.folder_outlined),\n-            onPressed: () => _openDriveFolder(context),\n-            tooltip: 'Open in Google Drive',\n-          ),\n-          IconButton(\n-            icon: const Icon(Icons.logout),\n-            onPressed: () => context.go('/login'),\n-            tooltip: 'Sign out',\n-          ),\n-        ],\n-      ),\n-      body: Stack(\n-        children: [\n-          AnimatedSwitcher(\n-            duration: const Duration(milliseconds: 300),\n-            child: notesAsync.when(\n-              loading: () => const Center(child: CircularProgressIndicator()),\n-              error:\n-                  (error, stack) => Center(\n-                    child: Column(\n-                      mainAxisSize: MainAxisSize.min,\n-                      children: [\n-                        const Icon(\n-                          Icons.error_outline,\n-                          size: 48,\n-                          color: Colors.red,\n+          body: Stack(\n+            children: [\n+              AnimatedSwitcher(\n+                duration: const Duration(milliseconds: 300),\n+                child: notesAsync.when(\n+                  loading: () => const Center(child: CircularProgressIndicator()),\n+                  error:\n+                      (error, stack) => Center(\n+                        child: Column(\n+                          mainAxisSize: MainAxisSize.min,\n+                          children: [\n+                            const Icon(\n+                              Icons.error_outline,\n+                              size: 48,\n+                              color: Colors.red,\n+                            ),\n+                            const SizedBox(height: 16),\n+                            Text('Error: $error'),\n+                            const SizedBox(height: 16),\n+                            ElevatedButton(\n+                              onPressed:\n+                                  () => ref.invalidate(notesControllerProvider),\n+                              child: const Text('RETRY'),\n+                            ),\n+                          ],\n                         ),\n-                        const SizedBox(height: 16),\n-                        Text('Error: $error'),\n-                        const SizedBox(height: 16),\n-                        ElevatedButton(\n-                          onPressed:\n-                              () => ref.invalidate(notesControllerProvider),\n-                          child: const Text('RETRY'),\n+                      ),\n+                  data: (notes) {\n+                    if (notes.isEmpty) {\n+                      return TweenAnimationBuilder<double>(\n+                        tween: Tween(begin: 0.0, end: 1.0),\n+                        duration: const Duration(milliseconds: 500),\n+                        builder: (context, value, child) {\n+                          return Opacity(\n+                            opacity: value,\n+                            child: Transform.translate(\n+                              offset: Offset(0, 20 * (1 - value)),\n+                              child: child,\n+                            ),\n+                          );\n+                        },\n+                        child: Center(\n+                          child: Column(\n+                            mainAxisSize: MainAxisSize.min,\n+                            children: [\n+                              Icon(\n+                                Icons.note_add,\n+                                size: 64,\n+                                color: theme.colorScheme.primary.withOpacity(0.5),\n+                              ),\n+                              const SizedBox(height: 16),\n+                              Text(\n+                                'No notes yet',\n+                                style: theme.textTheme.titleLarge?.copyWith(\n+                                  color: theme.colorScheme.onSurface.withOpacity(\n+                                    0.7,\n+                                  ),\n+                                ),\n+                              ),\n+                              const SizedBox(height: 8),\n+                              Text(\n+                                'Tap the + button to create your first note',\n+                                style: theme.textTheme.bodyMedium?.copyWith(\n+                                  color: theme.colorScheme.onSurface.withOpacity(\n+                                    0.5,\n+                                  ),\n+                                ),\n+                              ),\n+                            ],\n+                          ),\n                         ),\n-                      ],\n-                    ),\n-                  ),\n-              data: (notes) {\n-                if (notes.isEmpty) {\n-                  return TweenAnimationBuilder<double>(\n-                    tween: Tween(begin: 0.0, end: 1.0),\n-                    duration: const Duration(milliseconds: 500),\n-                    builder: (context, value, child) {\n-                      return Opacity(\n-                        opacity: value,\n-                        child: Transform.translate(\n-                          offset: Offset(0, 20 * (1 - value)),\n-                          child: child,\n-                        ),\n                       );\n-                    },\n-                    child: Center(\n-                      child: Column(\n-                        mainAxisSize: MainAxisSize.min,\n-                        children: [\n-                          Icon(\n-                            Icons.note_add,\n-                            size: 64,\n-                            color: theme.colorScheme.primary.withOpacity(0.5),\n-                          ),\n-                          const SizedBox(height: 16),\n-                          Text(\n-                            'No notes yet',\n-                            style: theme.textTheme.titleLarge?.copyWith(\n-                              color: theme.colorScheme.onSurface.withOpacity(\n-                                0.7,\n+                    }\n+\n+                    return AnimatedSwitcher(\n+                      duration: const Duration(milliseconds: 300),\n+                      child:\n+                          _isGridView\n+                              ? MasonryGridView.count(\n+                                key: const ValueKey('grid'),\n+                                padding: const EdgeInsets.all(8),\n+                                crossAxisCount:\n+                                    MediaQuery.of(context).size.width > 600 ? 3 : 2,\n+                                mainAxisSpacing: 4,\n+                                crossAxisSpacing: 4,\n+                                itemCount: notes.length,\n+                                itemBuilder:\n+                                    (context, index) =>\n+                                        _buildNoteCard(context, notes[index]),\n+                              )\n+                              : ListView.builder(\n+                                key: const ValueKey('list'),\n+                                padding: const EdgeInsets.all(8),\n+                                itemCount: notes.length,\n+                                itemBuilder:\n+                                    (context, index) =>\n+                                        _buildNoteCard(context, notes[index]),\n                               ),\n-                            ),\n+                    );\n+                  },\n+                ),\n+              ),\n+              // Save progress indicator\n+              AnimatedPositioned(\n+                duration: const Duration(milliseconds: 300),\n+                curve: Curves.easeOut,\n+                left: 0,\n+                right: 0,\n+                bottom: saveState.isSaving || saveState.message != null ? 0 : -100,\n+                child: Material(\n+                  elevation: 8,\n+                  child: Container(\n+                    padding: const EdgeInsets.symmetric(\n+                      horizontal: 16,\n+                      vertical: 12,\n+                    ),\n+                    decoration: BoxDecoration(\n+                      color:\n+                          saveState.isError\n+                              ? theme.colorScheme.errorContainer\n+                              : theme.colorScheme.primaryContainer,\n+                    ),\n+                    child: Row(\n+                      children: [\n+                        if (saveState.isSaving) ...[\n+                          const SizedBox(\n+                            height: 16,\n+                            width: 16,\n+                            child: CircularProgressIndicator(strokeWidth: 2),\n                           ),\n-                          const SizedBox(height: 8),\n-                          Text(\n-                            'Tap the + button to create your first note',\n+                          const SizedBox(width: 16),\n+                        ],\n+                        Expanded(\n+                          child: Text(\n+                            saveState.message ?? '',\n                             style: theme.textTheme.bodyMedium?.copyWith(\n-                              color: theme.colorScheme.onSurface.withOpacity(\n-                                0.5,\n-                              ),\n+                              color:\n+                                  saveState.isError\n+                                      ? theme.colorScheme.onErrorContainer\n+                                      : theme.colorScheme.onPrimaryContainer,\n                             ),\n                           ),\n-                        ],\n-                      ),\n-                    ),\n-                  );\n-                }\n-\n-                return AnimatedSwitcher(\n-                  duration: const Duration(milliseconds: 300),\n-                  child:\n-                      _isGridView\n-                          ? MasonryGridView.count(\n-                            key: const ValueKey('grid'),\n-                            padding: const EdgeInsets.all(8),\n-                            crossAxisCount:\n-                                MediaQuery.of(context).size.width > 600 ? 3 : 2,\n-                            mainAxisSpacing: 4,\n-                            crossAxisSpacing: 4,\n-                            itemCount: notes.length,\n-                            itemBuilder:\n-                                (context, index) =>\n-                                    _buildNoteCard(context, notes[index]),\n-                          )\n-                          : ListView.builder(\n-                            key: const ValueKey('list'),\n-                            padding: const EdgeInsets.all(8),\n-                            itemCount: notes.length,\n-                            itemBuilder:\n-                                (context, index) =>\n-                                    _buildNoteCard(context, notes[index]),\n+                        ),\n+                        if (saveState.isError)\n+                          TextButton(\n+                            onPressed: () {\n+                              ref.read(noteSaveProvider.notifier).state =\n+                                  const NoteSaveState();\n+                            },\n+                            child: const Text('DISMISS'),\n                           ),\n-                );\n-              },\n-            ),\n-          ),\n-          // Save progress indicator\n-          AnimatedPositioned(\n-            duration: const Duration(milliseconds: 300),\n-            curve: Curves.easeOut,\n-            left: 0,\n-            right: 0,\n-            bottom: saveState.isSaving || saveState.message != null ? 0 : -100,\n-            child: Material(\n-              elevation: 8,\n-              child: Container(\n-                padding: const EdgeInsets.symmetric(\n-                  horizontal: 16,\n-                  vertical: 12,\n-                ),\n-                decoration: BoxDecoration(\n-                  color:\n-                      saveState.isError\n-                          ? theme.colorScheme.errorContainer\n-                          : theme.colorScheme.primaryContainer,\n-                ),\n-                child: Row(\n-                  children: [\n-                    if (saveState.isSaving) ...[\n-                      const SizedBox(\n-                        height: 16,\n-                        width: 16,\n-                        child: CircularProgressIndicator(strokeWidth: 2),\n-                      ),\n-                      const SizedBox(width: 16),\n-                    ],\n-                    Expanded(\n-                      child: Text(\n-                        saveState.message ?? '',\n-                        style: theme.textTheme.bodyMedium?.copyWith(\n-                          color:\n-                              saveState.isError\n-                                  ? theme.colorScheme.onErrorContainer\n-                                  : theme.colorScheme.onPrimaryContainer,\n-                        ),\n-                      ),\n+                      ],\n                     ),\n-                    if (saveState.isError)\n-                      TextButton(\n-                        onPressed: () {\n-                          ref.read(noteSaveProvider.notifier).state =\n-                              const NoteSaveState();\n-                        },\n-                        child: const Text('DISMISS'),\n-                      ),\n-                  ],\n+                  ),\n                 ),\n               ),\n-            ),\n+            ],\n           ),\n-        ],\n-      ),\n-      floatingActionButton: FloatingActionButton(\n-        onPressed: () => _openEditor(context, null, heroTag: 'new_note'),\n-        tooltip: 'Add Note',\n-        child: const Icon(Icons.add),\n-      ),\n+          floatingActionButton: FloatingActionButton(\n+            onPressed: () => _openEditor(context, null, heroTag: 'new_note'),\n+            tooltip: 'Add Note',\n+            child: const Icon(Icons.add),\n+          ),\n+        );\n+      },\n     );\n   }\n }\n"
                },
                {
                    "date": 1744972008247,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -96,8 +96,39 @@\n       await launchUrl(Uri.parse(url));\n     }\n   }\n \n+  void _openEditor(BuildContext context, NoteModel? note, {String? heroTag}) {\n+    Navigator.push(\n+      context,\n+      PageRouteBuilder(\n+        pageBuilder:\n+            (context, animation, secondaryAnimation) =>\n+                NoteEditorPage(originalNote: note, heroTag: heroTag),\n+        transitionsBuilder: (context, animation, secondaryAnimation, child) {\n+          const begin = Offset(0.0, 0.05);\n+          const end = Offset.zero;\n+          const curve = Curves.easeOut;\n+          var tween = Tween(\n+            begin: begin,\n+            end: end,\n+          ).chain(CurveTween(curve: curve));\n+          var offsetAnimation = animation.drive(tween);\n+          var fadeAnimation = animation.drive(CurveTween(curve: curve));\n+\n+          return FadeTransition(\n+            opacity: fadeAnimation,\n+            child: SlideTransition(position: offsetAnimation, child: child),\n+          );\n+        },\n+        transitionDuration: const Duration(milliseconds: 300),\n+      ),\n+    ).then((_) {\n+      final ref = context.read;\n+      ref.invalidate(notesControllerProvider);\n+    });\n+  }\n+\n   Future<void> _deleteNote(BuildContext context, NoteModel note) async {\n     final shouldDelete = await showDialog<bool>(\n       context: context,\n       builder:\n@@ -119,8 +150,9 @@\n     );\n \n     if (shouldDelete == true && mounted) {\n       try {\n+        final ref = context.read;\n         await ref.read(notesControllerProvider.notifier).delete(note.id);\n         if (mounted) {\n           ScaffoldMessenger.of(context).showSnackBar(\n             SnackBar(\n@@ -261,36 +293,8 @@\n       ),\n     );\n   }\n \n-  void _openEditor(BuildContext context, NoteModel? note, {String? heroTag}) {\n-    Navigator.push(\n-      context,\n-      PageRouteBuilder(\n-        pageBuilder:\n-            (context, animation, secondaryAnimation) =>\n-                NoteEditorPage(originalNote: note, heroTag: heroTag),\n-        transitionsBuilder: (context, animation, secondaryAnimation, child) {\n-          const begin = Offset(0.0, 0.05);\n-          const end = Offset.zero;\n-          const curve = Curves.easeOut;\n-          var tween = Tween(\n-            begin: begin,\n-            end: end,\n-          ).chain(CurveTween(curve: curve));\n-          var offsetAnimation = animation.drive(tween);\n-          var fadeAnimation = animation.drive(CurveTween(curve: curve));\n-\n-          return FadeTransition(\n-            opacity: fadeAnimation,\n-            child: SlideTransition(position: offsetAnimation, child: child),\n-          );\n-        },\n-        transitionDuration: const Duration(milliseconds: 300),\n-      ),\n-    ).then((_) => ref.invalidate(notesControllerProvider));\n-  }\n-\n   @override\n   Widget build(BuildContext context) {\n     return Consumer(\n       builder: (context, ref, child) {\n"
                }
            ],
            "date": 1744898253429,
            "name": "Commit-0",
            "content": "import 'package:drivenotes/features/notes/domain/models/note_model.dart';\r\nimport 'package:drivenotes/features/notes/presentation/providers/note_editor_controller.dart';\r\nimport 'package:drivenotes/note_editor_page.dart';\r\nimport 'package:drivenotes/notes_controller.dart';\r\nimport 'package:flutter/material.dart';\r\nimport 'package:flutter_riverpod/flutter_riverpod.dart';\r\nimport 'package:go_router/go_router.dart';\r\n\r\nclass NotesListPage extends ConsumerWidget {\r\n  const NotesListPage({super.key});\r\n\r\n  @override\r\n  Widget build(BuildContext context, WidgetRef ref) {\r\n    final notesAsync = ref.watch(notesControllerProvider);\r\n\r\n    return Scaffold(\r\n      appBar: AppBar(\r\n        title: const Text('My Notes'),\r\n        actions: [\r\n          IconButton(\r\n            icon: const Icon(Icons.logout),\r\n            onPressed: () => context.go('/login'),\r\n          ),\r\n        ],\r\n      ),\r\n      body: notesAsync.when(\r\n        data: (notes) => notes.isEmpty\r\n            ? const Center(child: Text('No notes yet'))\r\n            : ListView.builder(\r\n                itemCount: notes.length,\r\n                itemBuilder: (context, index) {\r\n                  final note = notes[index];\r\n                  return Dismissible(\r\n                    key: ValueKey(note.id),\r\n                    direction: DismissDirection.endToStart,\r\n                    background: Container(\r\n                      color: Colors.red,\r\n                      alignment: Alignment.centerRight,\r\n                      padding: const EdgeInsets.only(right: 16),\r\n                      child: const Icon(Icons.delete, color: Colors.white),\r\n                    ),\r\n                    confirmDismiss: (_) => showDialog(\r\n                      context: context,\r\n                      builder: (context) => AlertDialog(\r\n                        title: const Text('Delete Note'),\r\n                        content: const Text('Are you sure?'),\r\n                        actions: [\r\n                          TextButton(\r\n                            onPressed: () => Navigator.pop(context, false),\r\n                            child: const Text('CANCEL'),\r\n                          ),\r\n                          TextButton(\r\n                            onPressed: () => Navigator.pop(context, true),\r\n                            child: const Text('DELETE'),\r\n                          ),\r\n                        ],\r\n                      ),\r\n                    ),\r\n                    onDismissed: (_) {\r\n                      ref.read(notesControllerProvider.notifier).delete(note.id);\r\n                      ScaffoldMessenger.of(context).showSnackBar(\r\n                        SnackBar(content: Text('Deleted ${note.title}')),\r\n                      );\r\n                    },\r\n                    child: ListTile(\r\n                      title: Text(note.title),\r\n                      subtitle: Text(\r\n                        note.content,\r\n                        maxLines: 2,\r\n                        overflow: TextOverflow.ellipsis,\r\n                      ),\r\n                      onTap: () => Navigator.push(\r\n                        context,\r\n                        MaterialPageRoute(\r\n                          builder: (_) => NoteEditorPage(originalNote: note),\r\n                        ),\r\n                      ),\r\n                    ),\r\n                  );\r\n                },\r\n              ),\r\n        error: (error, _) => Center(\r\n          child: Column(\r\n            mainAxisSize: MainAxisSize.min,\r\n            children: [\r\n              const Icon(Icons.error_outline, size: 48, color: Colors.red),\r\n              const SizedBox(height: 16),\r\n              Text('Error: $error'),\r\n              const SizedBox(height: 16),\r\n              ElevatedButton(\r\n                onPressed: () => ref.refresh(notesControllerProvider),\r\n                child: const Text('RETRY'),\r\n              ),\r\n            ],\r\n          ),\r\n        ),\r\n        loading: () => const Center(child: CircularProgressIndicator()),\r\n      ),\r\n      floatingActionButton: FloatingActionButton(\r\n        onPressed: () => Navigator.push(\r\n          context,\r\n          MaterialPageRoute(builder: (_) => const NoteEditorPage()),\r\n        ),\r\n        child: const Icon(Icons.add),\r\n      ),\r\n    );\r\n  }\r\n} "
        }
    ]
}