{
    "sourceFile": "lib/features/notes/presentation/pages/profile_page.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 14,
            "patches": [
                {
                    "date": 1744916632404,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1744917813967,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,11 +15,9 @@\n     final theme = Theme.of(context);\r\n     final themeMode = ref.watch(themeProvider);\r\n \r\n     return Scaffold(\r\n-      appBar: AppBar(\r\n-        title: const Text('Profile'),\r\n-      ),\r\n+      appBar: AppBar(title: const Text('Profile')),\r\n       body: ListView(\r\n         children: [\r\n           // Profile Header\r\n           Padding(\r\n@@ -31,14 +29,15 @@\n                   child: CircleAvatar(\r\n                     radius: 50,\r\n                     backgroundImage: NetworkImage(user.photoUrl ?? ''),\r\n                     backgroundColor: theme.colorScheme.primary.withOpacity(0.1),\r\n-                    child: user.photoUrl == null\r\n-                        ? Text(\r\n-                            user.displayName?[0].toUpperCase() ?? 'U',\r\n-                            style: theme.textTheme.headlineMedium,\r\n-                          )\r\n-                        : null,\r\n+                    child:\r\n+                        user.photoUrl == null\r\n+                            ? Text(\r\n+                              user.displayName?[0].toUpperCase() ?? 'U',\r\n+                              style: theme.textTheme.headlineMedium,\r\n+                            )\r\n+                            : null,\r\n                   ),\r\n                 ),\r\n                 const SizedBox(height: 16),\r\n                 Text(\r\n@@ -54,30 +53,41 @@\n               ],\r\n             ),\r\n           ),\r\n           const Divider(),\r\n-          \r\n+\r\n           // Theme Settings\r\n           ListTile(\r\n             leading: Icon(\r\n-              themeMode == ThemeMode.dark\r\n-                  ? Icons.dark_mode\r\n-                  : Icons.light_mode,\r\n+              themeMode == ThemeMode.dark ? Icons.dark_mode : Icons.light_mode,\r\n             ),\r\n             title: const Text('Theme'),\r\n             subtitle: Text(\r\n               themeMode == ThemeMode.dark ? 'Dark Mode' : 'Light Mode',\r\n             ),\r\n             trailing: Switch(\r\n               value: themeMode == ThemeMode.dark,\r\n               onChanged: (value) {\r\n-                ref.read(themeProvider.notifier).setTheme(\r\n-                      value ? ThemeMode.dark : ThemeMode.light,\r\n-                    );\r\n+                ref\r\n+                    .read(themeProvider.notifier)\r\n+                    .setTheme(value ? ThemeMode.dark : ThemeMode.light);\r\n               },\r\n             ),\r\n           ),\r\n \r\n+          // DriveNotes Folder\r\n+          ListTile(\r\n+            leading: const Icon(Icons.note_alt_outlined),\r\n+            title: const Text('DriveNotes Folder'),\r\n+            subtitle: const Text('Open your notes folder in browser'),\r\n+            onTap: () async {\r\n+              const url = 'https://drive.google.com/drive/folders/DriveNotes';\r\n+              if (await canLaunchUrl(Uri.parse(url))) {\r\n+                await launchUrl(Uri.parse(url));\r\n+              }\r\n+            },\r\n+          ),\r\n+\r\n           // Drive Folder\r\n           ListTile(\r\n             leading: const Icon(Icons.folder_outlined),\r\n             title: const Text('Google Drive Folder'),\r\n@@ -117,24 +127,23 @@\n             subtitle: const Text('Log out of your account'),\r\n             onTap: () async {\r\n               final shouldLogout = await showDialog<bool>(\r\n                 context: context,\r\n-                builder: (context) => AlertDialog(\r\n-                  title: const Text('Sign Out'),\r\n-                  content: const Text(\r\n-                    'Are you sure you want to sign out?',\r\n-                  ),\r\n-                  actions: [\r\n-                    TextButton(\r\n-                      onPressed: () => Navigator.pop(context, false),\r\n-                      child: const Text('CANCEL'),\r\n+                builder:\r\n+                    (context) => AlertDialog(\r\n+                      title: const Text('Sign Out'),\r\n+                      content: const Text('Are you sure you want to sign out?'),\r\n+                      actions: [\r\n+                        TextButton(\r\n+                          onPressed: () => Navigator.pop(context, false),\r\n+                          child: const Text('CANCEL'),\r\n+                        ),\r\n+                        FilledButton(\r\n+                          onPressed: () => Navigator.pop(context, true),\r\n+                          child: const Text('SIGN OUT'),\r\n+                        ),\r\n+                      ],\r\n                     ),\r\n-                    FilledButton(\r\n-                      onPressed: () => Navigator.pop(context, true),\r\n-                      child: const Text('SIGN OUT'),\r\n-                    ),\r\n-                  ],\r\n-                ),\r\n               );\r\n \r\n               if (shouldLogout == true && context.mounted) {\r\n                 await GoogleSignIn().signOut();\r\n@@ -147,5 +156,5 @@\n         ],\r\n       ),\r\n     );\r\n   }\r\n-} \n\\ No newline at end of file\n+}\r\n"
                },
                {
                    "date": 1744917861130,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -79,9 +79,9 @@\n             leading: const Icon(Icons.note_alt_outlined),\r\n             title: const Text('DriveNotes Folder'),\r\n             subtitle: const Text('Open your notes folder in browser'),\r\n             onTap: () async {\r\n-              const url = 'https://drive.google.com/drive/folders/DriveNotes';\r\n+              const url = 'https://drive.google.com/drive/search?q=DriveNotes';\r\n               if (await canLaunchUrl(Uri.parse(url))) {\r\n                 await launchUrl(Uri.parse(url));\r\n               }\r\n             },\r\n"
                },
                {
                    "date": 1744917900588,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,12 +76,12 @@\n \r\n           // DriveNotes Folder\r\n           ListTile(\r\n             leading: const Icon(Icons.note_alt_outlined),\r\n-            title: const Text('DriveNotes Folder'),\r\n-            subtitle: const Text('Open your notes folder in browser'),\r\n+            title: const Text('Google Drive'),\r\n+            subtitle: const Text('Open your Google Drive'),\r\n             onTap: () async {\r\n-              const url = 'https://drive.google.com/drive/search?q=DriveNotes';\r\n+              const url = 'https://drive.google.com';\r\n               if (await canLaunchUrl(Uri.parse(url))) {\r\n                 await launchUrl(Uri.parse(url));\r\n               }\r\n             },\r\n"
                },
                {
                    "date": 1744917946049,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -79,11 +79,15 @@\n             leading: const Icon(Icons.note_alt_outlined),\r\n             title: const Text('Google Drive'),\r\n             subtitle: const Text('Open your Google Drive'),\r\n             onTap: () async {\r\n-              const url = 'https://drive.google.com';\r\n-              if (await canLaunchUrl(Uri.parse(url))) {\r\n-                await launchUrl(Uri.parse(url));\r\n+              final googleSignIn = GoogleSignIn();\r\n+              final account = await googleSignIn.signInSilently();\r\n+              if (account != null) {\r\n+                final url = 'https://drive.google.com/drive/u/${account.id}';\r\n+                if (await canLaunchUrl(Uri.parse(url))) {\r\n+                  await launchUrl(Uri.parse(url));\r\n+                }\r\n               }\r\n             },\r\n           ),\r\n \r\n"
                },
                {
                    "date": 1744917983980,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,164 +1,147 @@\n-import 'package:drivenotes/features/notes/presentation/providers/theme_provider.dart';\r\n-import 'package:flutter/material.dart';\r\n-import 'package:flutter_riverpod/flutter_riverpod.dart';\r\n-import 'package:google_sign_in/google_sign_in.dart';\r\n-import 'package:go_router/go_router.dart';\r\n-import 'package:url_launcher/url_launcher.dart';\r\n-\r\n-class ProfilePage extends ConsumerWidget {\r\n-  final GoogleSignInAccount user;\r\n-\r\n-  const ProfilePage({super.key, required this.user});\r\n-\r\n-  @override\r\n-  Widget build(BuildContext context, WidgetRef ref) {\r\n-    final theme = Theme.of(context);\r\n-    final themeMode = ref.watch(themeProvider);\r\n-\r\n-    return Scaffold(\r\n-      appBar: AppBar(title: const Text('Profile')),\r\n-      body: ListView(\r\n-        children: [\r\n-          // Profile Header\r\n-          Padding(\r\n-            padding: const EdgeInsets.all(16.0),\r\n-            child: Column(\r\n-              children: [\r\n-                Hero(\r\n-                  tag: 'profile_image',\r\n-                  child: CircleAvatar(\r\n-                    radius: 50,\r\n-                    backgroundImage: NetworkImage(user.photoUrl ?? ''),\r\n-                    backgroundColor: theme.colorScheme.primary.withOpacity(0.1),\r\n-                    child:\r\n-                        user.photoUrl == null\r\n-                            ? Text(\r\n-                              user.displayName?[0].toUpperCase() ?? 'U',\r\n-                              style: theme.textTheme.headlineMedium,\r\n-                            )\r\n-                            : null,\r\n-                  ),\r\n-                ),\r\n-                const SizedBox(height: 16),\r\n-                Text(\r\n-                  user.displayName ?? 'User',\r\n-                  style: theme.textTheme.titleLarge,\r\n-                ),\r\n-                Text(\r\n-                  user.email,\r\n-                  style: theme.textTheme.bodyMedium?.copyWith(\r\n-                    color: theme.colorScheme.onSurface.withOpacity(0.7),\r\n-                  ),\r\n-                ),\r\n-              ],\r\n-            ),\r\n-          ),\r\n-          const Divider(),\r\n-\r\n-          // Theme Settings\r\n-          ListTile(\r\n-            leading: Icon(\r\n-              themeMode == ThemeMode.dark ? Icons.dark_mode : Icons.light_mode,\r\n-            ),\r\n-            title: const Text('Theme'),\r\n-            subtitle: Text(\r\n-              themeMode == ThemeMode.dark ? 'Dark Mode' : 'Light Mode',\r\n-            ),\r\n-            trailing: Switch(\r\n-              value: themeMode == ThemeMode.dark,\r\n-              onChanged: (value) {\r\n-                ref\r\n-                    .read(themeProvider.notifier)\r\n-                    .setTheme(value ? ThemeMode.dark : ThemeMode.light);\r\n-              },\r\n-            ),\r\n-          ),\r\n-\r\n-          // DriveNotes Folder\r\n-          ListTile(\r\n-            leading: const Icon(Icons.note_alt_outlined),\r\n-            title: const Text('Google Drive'),\r\n-            subtitle: const Text('Open your Google Drive'),\r\n-            onTap: () async {\r\n-              final googleSignIn = GoogleSignIn();\r\n-              final account = await googleSignIn.signInSilently();\r\n-              if (account != null) {\r\n-                final url = 'https://drive.google.com/drive/u/${account.id}';\r\n-                if (await canLaunchUrl(Uri.parse(url))) {\r\n-                  await launchUrl(Uri.parse(url));\r\n-                }\r\n-              }\r\n-            },\r\n-          ),\r\n-\r\n-          // Drive Folder\r\n-          ListTile(\r\n-            leading: const Icon(Icons.folder_outlined),\r\n-            title: const Text('Google Drive Folder'),\r\n-            subtitle: const Text('Open notes folder in browser'),\r\n-            onTap: () async {\r\n-              const url = 'https://drive.google.com';\r\n-              if (await canLaunchUrl(Uri.parse(url))) {\r\n-                await launchUrl(Uri.parse(url));\r\n-              }\r\n-            },\r\n-          ),\r\n-\r\n-          // App Info\r\n-          ListTile(\r\n-            leading: const Icon(Icons.info_outline),\r\n-            title: const Text('About DriveNotes'),\r\n-            subtitle: const Text('Version 1.0.0'),\r\n-            onTap: () {\r\n-              showAboutDialog(\r\n-                context: context,\r\n-                applicationName: 'DriveNotes',\r\n-                applicationVersion: '1.0.0',\r\n-                applicationIcon: const Icon(Icons.note_alt_outlined, size: 48),\r\n-                children: [\r\n-                  const Text(\r\n-                    'DriveNotes is a simple note-taking app that syncs with Google Drive.',\r\n-                  ),\r\n-                ],\r\n-              );\r\n-            },\r\n-          ),\r\n-\r\n-          // Sign Out\r\n-          ListTile(\r\n-            leading: const Icon(Icons.logout),\r\n-            title: const Text('Sign Out'),\r\n-            subtitle: const Text('Log out of your account'),\r\n-            onTap: () async {\r\n-              final shouldLogout = await showDialog<bool>(\r\n-                context: context,\r\n-                builder:\r\n-                    (context) => AlertDialog(\r\n-                      title: const Text('Sign Out'),\r\n-                      content: const Text('Are you sure you want to sign out?'),\r\n-                      actions: [\r\n-                        TextButton(\r\n-                          onPressed: () => Navigator.pop(context, false),\r\n-                          child: const Text('CANCEL'),\r\n-                        ),\r\n-                        FilledButton(\r\n-                          onPressed: () => Navigator.pop(context, true),\r\n-                          child: const Text('SIGN OUT'),\r\n-                        ),\r\n-                      ],\r\n-                    ),\r\n-              );\r\n-\r\n-              if (shouldLogout == true && context.mounted) {\r\n-                await GoogleSignIn().signOut();\r\n-                if (context.mounted) {\r\n-                  context.go('/login');\r\n-                }\r\n-              }\r\n-            },\r\n-          ),\r\n-        ],\r\n-      ),\r\n-    );\r\n-  }\r\n-}\r\n+import 'package:drivenotes/features/notes/presentation/providers/theme_provider.dart';\n+import 'package:flutter/material.dart';\n+import 'package:flutter_riverpod/flutter_riverpod.dart';\n+import 'package:google_sign_in/google_sign_in.dart';\n+import 'package:go_router/go_router.dart';\n+import 'package:url_launcher/url_launcher.dart';\n+\n+class ProfilePage extends ConsumerWidget {\n+  final GoogleSignInAccount user;\n+\n+  const ProfilePage({super.key, required this.user});\n+\n+  @override\n+  Widget build(BuildContext context, WidgetRef ref) {\n+    final theme = Theme.of(context);\n+    final themeMode = ref.watch(themeProvider);\n+\n+    return Scaffold(\n+      appBar: AppBar(title: const Text('Profile')),\n+      body: ListView(\n+        children: [\n+          // Profile Header\n+          Padding(\n+            padding: const EdgeInsets.all(16.0),\n+            child: Column(\n+              children: [\n+                Hero(\n+                  tag: 'profile_image',\n+                  child: CircleAvatar(\n+                    radius: 50,\n+                    backgroundImage: NetworkImage(user.photoUrl ?? ''),\n+                    backgroundColor: theme.colorScheme.primary.withOpacity(0.1),\n+                    child:\n+                        user.photoUrl == null\n+                            ? Text(\n+                              user.displayName?[0].toUpperCase() ?? 'U',\n+                              style: theme.textTheme.headlineMedium,\n+                            )\n+                            : null,\n+                  ),\n+                ),\n+                const SizedBox(height: 16),\n+                Text(\n+                  user.displayName ?? 'User',\n+                  style: theme.textTheme.titleLarge,\n+                ),\n+                Text(\n+                  user.email,\n+                  style: theme.textTheme.bodyMedium?.copyWith(\n+                    color: theme.colorScheme.onSurface.withOpacity(0.7),\n+                  ),\n+                ),\n+              ],\n+            ),\n+          ),\n+          const Divider(),\n+\n+          // Theme Settings\n+          ListTile(\n+            leading: Icon(\n+              themeMode == ThemeMode.dark ? Icons.dark_mode : Icons.light_mode,\n+            ),\n+            title: const Text('Theme'),\n+            subtitle: Text(\n+              themeMode == ThemeMode.dark ? 'Dark Mode' : 'Light Mode',\n+            ),\n+            trailing: Switch(\n+              value: themeMode == ThemeMode.dark,\n+              onChanged: (value) {\n+                ref\n+                    .read(themeProvider.notifier)\n+                    .setTheme(value ? ThemeMode.dark : ThemeMode.light);\n+              },\n+            ),\n+          ),\n+\n+          // Drive Folder\n+          ListTile(\n+            leading: const Icon(Icons.folder_outlined),\n+            title: const Text('Google Drive Folder'),\n+            subtitle: const Text('Open notes folder in browser'),\n+            onTap: () async {\n+              const url = 'https://drive.google.com';\n+              if (await canLaunchUrl(Uri.parse(url))) {\n+                await launchUrl(Uri.parse(url));\n+              }\n+            },\n+          ),\n+\n+          // App Info\n+          ListTile(\n+            leading: const Icon(Icons.info_outline),\n+            title: const Text('About DriveNotes'),\n+            subtitle: const Text('Version 1.0.0'),\n+            onTap: () {\n+              showAboutDialog(\n+                context: context,\n+                applicationName: 'DriveNotes',\n+                applicationVersion: '1.0.0',\n+                applicationIcon: const Icon(Icons.note_alt_outlined, size: 48),\n+                children: [\n+                  const Text(\n+                    'DriveNotes is a simple note-taking app that syncs with Google Drive.',\n+                  ),\n+                ],\n+              );\n+            },\n+          ),\n+\n+          // Sign Out\n+          ListTile(\n+            leading: const Icon(Icons.logout),\n+            title: const Text('Sign Out'),\n+            subtitle: const Text('Log out of your account'),\n+            onTap: () async {\n+              final shouldLogout = await showDialog<bool>(\n+                context: context,\n+                builder:\n+                    (context) => AlertDialog(\n+                      title: const Text('Sign Out'),\n+                      content: const Text('Are you sure you want to sign out?'),\n+                      actions: [\n+                        TextButton(\n+                          onPressed: () => Navigator.pop(context, false),\n+                          child: const Text('CANCEL'),\n+                        ),\n+                        FilledButton(\n+                          onPressed: () => Navigator.pop(context, true),\n+                          child: const Text('SIGN OUT'),\n+                        ),\n+                      ],\n+                    ),\n+              );\n+\n+              if (shouldLogout == true && context.mounted) {\n+                await GoogleSignIn().signOut();\n+                if (context.mounted) {\n+                  context.go('/login');\n+                }\n+              }\n+            },\n+          ),\n+        ],\n+      ),\n+    );\n+  }\n+}\n"
                },
                {
                    "date": 1744918022582,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,17 +27,18 @@\n                 Hero(\n                   tag: 'profile_image',\n                   child: CircleAvatar(\n                     radius: 50,\n-                    backgroundImage: NetworkImage(user.photoUrl ?? ''),\n+                    backgroundImage: user.photoUrl != null\n+                        ? NetworkImage(user.photoUrl!)\n+                        : null,\n                     backgroundColor: theme.colorScheme.primary.withOpacity(0.1),\n-                    child:\n-                        user.photoUrl == null\n-                            ? Text(\n-                              user.displayName?[0].toUpperCase() ?? 'U',\n-                              style: theme.textTheme.headlineMedium,\n-                            )\n-                            : null,\n+                    child: user.photoUrl == null\n+                        ? Text(\n+                            user.displayName?[0].toUpperCase() ?? 'U',\n+                            style: theme.textTheme.headlineMedium,\n+                          )\n+                        : null,\n                   ),\n                 ),\n                 const SizedBox(height: 16),\n                 Text(\n@@ -66,11 +67,11 @@\n             ),\n             trailing: Switch(\n               value: themeMode == ThemeMode.dark,\n               onChanged: (value) {\n-                ref\n-                    .read(themeProvider.notifier)\n-                    .setTheme(value ? ThemeMode.dark : ThemeMode.light);\n+                ref.read(themeProvider.notifier).setTheme(\n+                      value ? ThemeMode.dark : ThemeMode.light,\n+                    );\n               },\n             ),\n           ),\n \n"
                },
                {
                    "date": 1744918268342,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,160 @@\n+import 'package:drivenotes/features/notes/presentation/providers/theme_provider.dart';\n+import 'package:flutter/material.dart';\n+import 'package:flutter_riverpod/flutter_riverpod.dart';\n+import 'package:google_sign_in/google_sign_in.dart';\n+import 'package:go_router/go_router.dart';\n+import 'package:url_launcher/url_launcher.dart';\n+\n+class ProfilePage extends ConsumerWidget {\n+  final GoogleSignInAccount user;\n+\n+  const ProfilePage({super.key, required this.user});\n+\n+  @override\n+  Widget build(BuildContext context, WidgetRef ref) {\n+    final theme = Theme.of(context);\n+    final currentTheme = ref.watch(themeProvider);\n+\n+    return Scaffold(\n+      appBar: AppBar(title: const Text('Profile')),\n+      body: ListView(\n+        children: [\n+          // Profile Header\n+          Padding(\n+            padding: const EdgeInsets.all(16.0),\n+            child: Column(\n+              children: [\n+                Hero(\n+                  tag: 'profile_image',\n+                  child: CircleAvatar(\n+                    radius: 50,\n+                    backgroundImage:\n+                        user.photoUrl != null\n+                            ? NetworkImage(user.photoUrl!)\n+                            : null,\n+                    backgroundColor: theme.colorScheme.primary.withOpacity(0.1),\n+                    child:\n+                        user.photoUrl == null\n+                            ? Text(\n+                              user.displayName?[0].toUpperCase() ?? 'U',\n+                              style: theme.textTheme.headlineMedium,\n+                            )\n+                            : null,\n+                  ),\n+                ),\n+                const SizedBox(height: 16),\n+                Text(\n+                  user.displayName ?? 'User',\n+                  style: theme.textTheme.titleLarge,\n+                ),\n+                Text(\n+                  user.email,\n+                  style: theme.textTheme.bodyMedium?.copyWith(\n+                    color: theme.colorScheme.onSurface.withOpacity(0.7),\n+                  ),\n+                ),\n+              ],\n+            ),\n+          ),\n+          const Divider(),\n+\n+          // Theme Settings\n+          ListTile(\n+            leading: Icon(\n+              currentTheme == ThemeMode.dark ? Icons.dark_mode : Icons.light_mode,\n+            ),\n+            title: const Text('Theme'),\n+            subtitle: Text(\n+              currentTheme == ThemeMode.dark ? 'Dark Mode' : 'Light Mode',\n+            ),\n+            trailing: Switch.adaptive(\n+              value: currentTheme == ThemeMode.dark,\n+              onChanged: (isDark) async {\n+                try {\n+                  await ref.read(themeProvider.notifier).setTheme(\n+                        isDark ? ThemeMode.dark : ThemeMode.light,\n+                      );\n+                } catch (e) {\n+                  if (context.mounted) {\n+                    ScaffoldMessenger.of(context).showSnackBar(\n+                      SnackBar(\n+                        content: Text('Error changing theme: $e'),\n+                      ),\n+                    );\n+                  }\n+                }\n+              },\n+            ),\n+          ),\n+\n+          // Drive Folder\n+          ListTile(\n+            leading: const Icon(Icons.folder_outlined),\n+            title: const Text('Google Drive Folder'),\n+            subtitle: const Text('Open notes folder in browser'),\n+            onTap: () async {\n+              const url = 'https://drive.google.com';\n+              if (await canLaunchUrl(Uri.parse(url))) {\n+                await launchUrl(Uri.parse(url));\n+              }\n+            },\n+          ),\n+\n+          // App Info\n+          ListTile(\n+            leading: const Icon(Icons.info_outline),\n+            title: const Text('About DriveNotes'),\n+            subtitle: const Text('Version 1.0.0'),\n+            onTap: () {\n+              showAboutDialog(\n+                context: context,\n+                applicationName: 'DriveNotes',\n+                applicationVersion: '1.0.0',\n+                applicationIcon: const Icon(Icons.note_alt_outlined, size: 48),\n+                children: [\n+                  const Text(\n+                    'DriveNotes is a simple note-taking app that syncs with Google Drive.',\n+                  ),\n+                ],\n+              );\n+            },\n+          ),\n+\n+          // Sign Out\n+          ListTile(\n+            leading: const Icon(Icons.logout),\n+            title: const Text('Sign Out'),\n+            subtitle: const Text('Log out of your account'),\n+            onTap: () async {\n+              final shouldLogout = await showDialog<bool>(\n+                context: context,\n+                builder:\n+                    (context) => AlertDialog(\n+                      title: const Text('Sign Out'),\n+                      content: const Text('Are you sure you want to sign out?'),\n+                      actions: [\n+                        TextButton(\n+                          onPressed: () => Navigator.pop(context, false),\n+                          child: const Text('CANCEL'),\n+                        ),\n+                        FilledButton(\n+                          onPressed: () => Navigator.pop(context, true),\n+                          child: const Text('SIGN OUT'),\n+                        ),\n+                      ],\n+                    ),\n+              );\n+\n+              if (shouldLogout == true && context.mounted) {\n+                await GoogleSignIn().signOut();\n+                if (context.mounted) {\n+                  context.go('/login');\n+                }\n+              }\n+            },\n+          ),\n+        ],\n+      ),\n+    );\n+  }\n+}\n"
                },
                {
                    "date": 1744918335301,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,8 +13,9 @@\n   @override\n   Widget build(BuildContext context, WidgetRef ref) {\n     final theme = Theme.of(context);\n     final currentTheme = ref.watch(themeProvider);\n+    final themePersistence = ref.watch(themePersistenceProvider);\n \n     return Scaffold(\n       appBar: AppBar(title: const Text('Profile')),\n       body: ListView(\n@@ -69,18 +70,18 @@\n             ),\n             trailing: Switch.adaptive(\n               value: currentTheme == ThemeMode.dark,\n               onChanged: (isDark) async {\n+                final newTheme = isDark ? ThemeMode.dark : ThemeMode.light;\n                 try {\n-                  await ref.read(themeProvider.notifier).setTheme(\n-                        isDark ? ThemeMode.dark : ThemeMode.light,\n-                      );\n+                  await themePersistence.saveTheme(newTheme);\n+                  if (context.mounted) {\n+                    ref.read(themeProvider.notifier).state = newTheme;\n+                  }\n                 } catch (e) {\n                   if (context.mounted) {\n                     ScaffoldMessenger.of(context).showSnackBar(\n-                      SnackBar(\n-                        content: Text('Error changing theme: $e'),\n-                      ),\n+                      SnackBar(content: Text('Error changing theme: $e')),\n                     );\n                   }\n                 }\n               },\n@@ -157,152 +158,4 @@\n       ),\n     );\n   }\n }\n-import 'package:drivenotes/features/notes/presentation/providers/theme_provider.dart';\n-import 'package:flutter/material.dart';\n-import 'package:flutter_riverpod/flutter_riverpod.dart';\n-import 'package:google_sign_in/google_sign_in.dart';\n-import 'package:go_router/go_router.dart';\n-import 'package:url_launcher/url_launcher.dart';\n-\n-class ProfilePage extends ConsumerWidget {\n-  final GoogleSignInAccount user;\n-\n-  const ProfilePage({super.key, required this.user});\n-\n-  @override\n-  Widget build(BuildContext context, WidgetRef ref) {\n-    final theme = Theme.of(context);\n-    final themeMode = ref.watch(themeProvider);\n-\n-    return Scaffold(\n-      appBar: AppBar(title: const Text('Profile')),\n-      body: ListView(\n-        children: [\n-          // Profile Header\n-          Padding(\n-            padding: const EdgeInsets.all(16.0),\n-            child: Column(\n-              children: [\n-                Hero(\n-                  tag: 'profile_image',\n-                  child: CircleAvatar(\n-                    radius: 50,\n-                    backgroundImage: user.photoUrl != null\n-                        ? NetworkImage(user.photoUrl!)\n-                        : null,\n-                    backgroundColor: theme.colorScheme.primary.withOpacity(0.1),\n-                    child: user.photoUrl == null\n-                        ? Text(\n-                            user.displayName?[0].toUpperCase() ?? 'U',\n-                            style: theme.textTheme.headlineMedium,\n-                          )\n-                        : null,\n-                  ),\n-                ),\n-                const SizedBox(height: 16),\n-                Text(\n-                  user.displayName ?? 'User',\n-                  style: theme.textTheme.titleLarge,\n-                ),\n-                Text(\n-                  user.email,\n-                  style: theme.textTheme.bodyMedium?.copyWith(\n-                    color: theme.colorScheme.onSurface.withOpacity(0.7),\n-                  ),\n-                ),\n-              ],\n-            ),\n-          ),\n-          const Divider(),\n-\n-          // Theme Settings\n-          ListTile(\n-            leading: Icon(\n-              themeMode == ThemeMode.dark ? Icons.dark_mode : Icons.light_mode,\n-            ),\n-            title: const Text('Theme'),\n-            subtitle: Text(\n-              themeMode == ThemeMode.dark ? 'Dark Mode' : 'Light Mode',\n-            ),\n-            trailing: Switch(\n-              value: themeMode == ThemeMode.dark,\n-              onChanged: (value) {\n-                ref.read(themeProvider.notifier).setTheme(\n-                      value ? ThemeMode.dark : ThemeMode.light,\n-                    );\n-              },\n-            ),\n-          ),\n-\n-          // Drive Folder\n-          ListTile(\n-            leading: const Icon(Icons.folder_outlined),\n-            title: const Text('Google Drive Folder'),\n-            subtitle: const Text('Open notes folder in browser'),\n-            onTap: () async {\n-              const url = 'https://drive.google.com';\n-              if (await canLaunchUrl(Uri.parse(url))) {\n-                await launchUrl(Uri.parse(url));\n-              }\n-            },\n-          ),\n-\n-          // App Info\n-          ListTile(\n-            leading: const Icon(Icons.info_outline),\n-            title: const Text('About DriveNotes'),\n-            subtitle: const Text('Version 1.0.0'),\n-            onTap: () {\n-              showAboutDialog(\n-                context: context,\n-                applicationName: 'DriveNotes',\n-                applicationVersion: '1.0.0',\n-                applicationIcon: const Icon(Icons.note_alt_outlined, size: 48),\n-                children: [\n-                  const Text(\n-                    'DriveNotes is a simple note-taking app that syncs with Google Drive.',\n-                  ),\n-                ],\n-              );\n-            },\n-          ),\n-\n-          // Sign Out\n-          ListTile(\n-            leading: const Icon(Icons.logout),\n-            title: const Text('Sign Out'),\n-            subtitle: const Text('Log out of your account'),\n-            onTap: () async {\n-              final shouldLogout = await showDialog<bool>(\n-                context: context,\n-                builder:\n-                    (context) => AlertDialog(\n-                      title: const Text('Sign Out'),\n-                      content: const Text('Are you sure you want to sign out?'),\n-                      actions: [\n-                        TextButton(\n-                          onPressed: () => Navigator.pop(context, false),\n-                          child: const Text('CANCEL'),\n-                        ),\n-                        FilledButton(\n-                          onPressed: () => Navigator.pop(context, true),\n-                          child: const Text('SIGN OUT'),\n-                        ),\n-                      ],\n-                    ),\n-              );\n-\n-              if (shouldLogout == true && context.mounted) {\n-                await GoogleSignIn().signOut();\n-                if (context.mounted) {\n-                  context.go('/login');\n-                }\n-              }\n-            },\n-          ),\n-        ],\n-      ),\n-    );\n-  }\n-}\n"
                },
                {
                    "date": 1744918481235,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,10 +12,9 @@\n \n   @override\n   Widget build(BuildContext context, WidgetRef ref) {\n     final theme = Theme.of(context);\n-    final currentTheme = ref.watch(themeProvider);\n-    final themePersistence = ref.watch(themePersistenceProvider);\n+    final themeMode = ref.watch(themeProvider);\n \n     return Scaffold(\n       appBar: AppBar(title: const Text('Profile')),\n       body: ListView(\n@@ -61,30 +60,20 @@\n \n           // Theme Settings\n           ListTile(\n             leading: Icon(\n-              currentTheme == ThemeMode.dark ? Icons.dark_mode : Icons.light_mode,\n+              themeMode == ThemeMode.dark ? Icons.dark_mode : Icons.light_mode,\n             ),\n             title: const Text('Theme'),\n             subtitle: Text(\n-              currentTheme == ThemeMode.dark ? 'Dark Mode' : 'Light Mode',\n+              themeMode == ThemeMode.dark ? 'Dark Mode' : 'Light Mode',\n             ),\n-            trailing: Switch.adaptive(\n-              value: currentTheme == ThemeMode.dark,\n-              onChanged: (isDark) async {\n-                final newTheme = isDark ? ThemeMode.dark : ThemeMode.light;\n-                try {\n-                  await themePersistence.saveTheme(newTheme);\n-                  if (context.mounted) {\n-                    ref.read(themeProvider.notifier).state = newTheme;\n-                  }\n-                } catch (e) {\n-                  if (context.mounted) {\n-                    ScaffoldMessenger.of(context).showSnackBar(\n-                      SnackBar(content: Text('Error changing theme: $e')),\n-                    );\n-                  }\n-                }\n+            trailing: Switch(\n+              value: themeMode == ThemeMode.dark,\n+              onChanged: (value) {\n+                ref\n+                    .read(themeProvider.notifier)\n+                    .setTheme(value ? ThemeMode.dark : ThemeMode.light);\n               },\n             ),\n           ),\n \n"
                },
                {
                    "date": 1744918717036,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,20 +27,20 @@\n                 Hero(\n                   tag: 'profile_image',\n                   child: CircleAvatar(\n                     radius: 50,\n-                    backgroundImage:\n-                        user.photoUrl != null\n-                            ? NetworkImage(user.photoUrl!)\n-                            : null,\n+                    backgroundImage: (user.photoUrl != null && user.photoUrl!.isNotEmpty)\n+                        ? NetworkImage(user.photoUrl!)\n+                        : null,\n                     backgroundColor: theme.colorScheme.primary.withOpacity(0.1),\n-                    child:\n-                        user.photoUrl == null\n-                            ? Text(\n-                              user.displayName?[0].toUpperCase() ?? 'U',\n-                              style: theme.textTheme.headlineMedium,\n-                            )\n-                            : null,\n+                    child: (user.photoUrl == null || user.photoUrl!.isEmpty)\n+                        ? Text(\n+                            (user.displayName?.isNotEmpty ?? false)\n+                                ? user.displayName![0].toUpperCase()\n+                                : 'U',\n+                            style: theme.textTheme.headlineMedium,\n+                          )\n+                        : null,\n                   ),\n                 ),\n                 const SizedBox(height: 16),\n                 Text(\n@@ -100,12 +100,10 @@\n                 context: context,\n                 applicationName: 'DriveNotes',\n                 applicationVersion: '1.0.0',\n                 applicationIcon: const Icon(Icons.note_alt_outlined, size: 48),\n-                children: [\n-                  const Text(\n-                    'DriveNotes is a simple note-taking app that syncs with Google Drive.',\n-                  ),\n+                children: const [\n+                  Text('DriveNotes is a simple note-taking app that syncs with Google Drive.'),\n                 ],\n               );\n             },\n           ),\n@@ -117,23 +115,22 @@\n             subtitle: const Text('Log out of your account'),\n             onTap: () async {\n               final shouldLogout = await showDialog<bool>(\n                 context: context,\n-                builder:\n-                    (context) => AlertDialog(\n-                      title: const Text('Sign Out'),\n-                      content: const Text('Are you sure you want to sign out?'),\n-                      actions: [\n-                        TextButton(\n-                          onPressed: () => Navigator.pop(context, false),\n-                          child: const Text('CANCEL'),\n-                        ),\n-                        FilledButton(\n-                          onPressed: () => Navigator.pop(context, true),\n-                          child: const Text('SIGN OUT'),\n-                        ),\n-                      ],\n+                builder: (context) => AlertDialog(\n+                  title: const Text('Sign Out'),\n+                  content: const Text('Are you sure you want to sign out?'),\n+                  actions: [\n+                    TextButton(\n+                      onPressed: () => Navigator.pop(context, false),\n+                      child: const Text('CANCEL'),\n                     ),\n+                    FilledButton(\n+                      onPressed: () => Navigator.pop(context, true),\n+                      child: const Text('SIGN OUT'),\n+                    ),\n+                  ],\n+                ),\n               );\n \n               if (shouldLogout == true && context.mounted) {\n                 await GoogleSignIn().signOut();\n"
                },
                {
                    "date": 1744918937870,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,15 +27,16 @@\n                 Hero(\n                   tag: 'profile_image',\n                   child: CircleAvatar(\n                     radius: 50,\n-                    backgroundImage: (user.photoUrl != null && user.photoUrl!.isNotEmpty)\n+                    backgroundImage: (user.photoUrl?.isNotEmpty ?? false)\n                         ? NetworkImage(user.photoUrl!)\n                         : null,\n-                    backgroundColor: theme.colorScheme.primary.withOpacity(0.1),\n-                    child: (user.photoUrl == null || user.photoUrl!.isEmpty)\n+                    backgroundColor:\n+                        theme.colorScheme.primary.withOpacity(0.1),\n+                    child: (user.photoUrl?.isEmpty ?? true)\n                         ? Text(\n-                            (user.displayName?.isNotEmpty ?? false)\n+                            user.displayName?.isNotEmpty == true\n                                 ? user.displayName![0].toUpperCase()\n                                 : 'U',\n                             style: theme.textTheme.headlineMedium,\n                           )\n@@ -60,20 +61,23 @@\n \n           // Theme Settings\n           ListTile(\n             leading: Icon(\n-              themeMode == ThemeMode.dark ? Icons.dark_mode : Icons.light_mode,\n+              themeMode == ThemeMode.dark\n+                  ? Icons.dark_mode\n+                  : Icons.light_mode,\n             ),\n             title: const Text('Theme'),\n-            subtitle: Text(\n-              themeMode == ThemeMode.dark ? 'Dark Mode' : 'Light Mode',\n-            ),\n+            subtitle:\n+                Text(themeMode == ThemeMode.dark ? 'Dark Mode' : 'Light Mode'),\n             trailing: Switch(\n               value: themeMode == ThemeMode.dark,\n               onChanged: (value) {\n-                ref\n-                    .read(themeProvider.notifier)\n-                    .setTheme(value ? ThemeMode.dark : ThemeMode.light);\n+                WidgetsBinding.instance.addPostFrameCallback((_) {\n+                  ref\n+                      .read(themeProvider.notifier)\n+                      .setTheme(value ? ThemeMode.dark : ThemeMode.light);\n+                });\n               },\n             ),\n           ),\n \n@@ -83,10 +87,11 @@\n             title: const Text('Google Drive Folder'),\n             subtitle: const Text('Open notes folder in browser'),\n             onTap: () async {\n               const url = 'https://drive.google.com';\n-              if (await canLaunchUrl(Uri.parse(url))) {\n-                await launchUrl(Uri.parse(url));\n+              final uri = Uri.parse(url);\n+              if (await canLaunchUrl(uri)) {\n+                await launchUrl(uri);\n               }\n             },\n           ),\n \n@@ -99,11 +104,14 @@\n               showAboutDialog(\n                 context: context,\n                 applicationName: 'DriveNotes',\n                 applicationVersion: '1.0.0',\n-                applicationIcon: const Icon(Icons.note_alt_outlined, size: 48),\n+                applicationIcon:\n+                    const Icon(Icons.note_alt_outlined, size: 48),\n                 children: const [\n-                  Text('DriveNotes is a simple note-taking app that syncs with Google Drive.'),\n+                  Text(\n+                    'DriveNotes is a simple note-taking app that syncs with Google Drive.',\n+                  ),\n                 ],\n               );\n             },\n           ),\n@@ -117,9 +125,10 @@\n               final shouldLogout = await showDialog<bool>(\n                 context: context,\n                 builder: (context) => AlertDialog(\n                   title: const Text('Sign Out'),\n-                  content: const Text('Are you sure you want to sign out?'),\n+                  content:\n+                      const Text('Are you sure you want to sign out?'),\n                   actions: [\n                     TextButton(\n                       onPressed: () => Navigator.pop(context, false),\n                       child: const Text('CANCEL'),\n"
                },
                {
                    "date": 1744919003578,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,90 @@\n-import 'package:drivenotes/features/notes/presentation/providers/theme_provider.dart';\n+// lib/features/notes/presentation/providers/theme_provider.dart\n import 'package:flutter/material.dart';\n import 'package:flutter_riverpod/flutter_riverpod.dart';\n+import 'package:flutter_secure_storage/flutter_secure_storage.dart';\n+\n+final themeProvider = StateNotifierProvider<ThemeNotifier, ThemeMode>((ref) {\n+  return ThemeNotifier();\n+});\n+\n+class ThemeNotifier extends StateNotifier<ThemeMode> {\n+  ThemeNotifier() : super(ThemeMode.system) {\n+    _loadTheme();\n+  }\n+  \n+  // Use a nullable storage to avoid initialization errors\n+  final FlutterSecureStorage? _storage = const FlutterSecureStorage();\n+  static const _themeKey = 'theme_mode';\n+  \n+  Future<void> _loadTheme() async {\n+    try {\n+      // Add null check for _storage\n+      final storage = _storage;\n+      if (storage == null) {\n+        debugPrint('Storage is null during theme loading');\n+        return;\n+      }\n+      \n+      final savedTheme = await storage.read(key: _themeKey);\n+      if (savedTheme != null) {\n+        // Parse the saved theme string safely\n+        ThemeMode? themeMode;\n+        try {\n+          themeMode = ThemeMode.values.firstWhere(\n+            (mode) => mode.toString() == savedTheme,\n+            orElse: () => ThemeMode.system,\n+          );\n+        } catch (e) {\n+          debugPrint('Error parsing theme: $e');\n+          themeMode = ThemeMode.system;\n+        }\n+        \n+        state = themeMode;\n+      }\n+    } catch (e) {\n+      debugPrint('Error loading theme: $e');\n+      // Fallback to system theme on error\n+      state = ThemeMode.system;\n+    }\n+  }\n+  \n+  Future<void> setTheme(ThemeMode mode) async {\n+    try {\n+      // Set state first to update UI immediately\n+      state = mode;\n+      \n+      // Add null check for _storage\n+      final storage = _storage;\n+      if (storage == null) {\n+        debugPrint('Storage is null during theme saving');\n+        return;\n+      }\n+      \n+      // Save theme after state update\n+      await storage.write(key: _themeKey, value: mode.toString());\n+      debugPrint('Theme saved successfully: ${mode.toString()}');\n+    } catch (e) {\n+      debugPrint('Error saving theme: $e');\n+      // No need to revert state, as the UI is already updated\n+    }\n+  }\n+  \n+  Future<void> toggleTheme() async {\n+    // Get current theme with null safety\n+    final currentTheme = state;\n+    final newMode = currentTheme == ThemeMode.dark ? ThemeMode.light : ThemeMode.dark;\n+    await setTheme(newMode);\n+  }\n+}\n+\n+// lib/features/notes/presentation/screens/profile_page.dart\n+import 'package:flutter/material.dart';\n+import 'package:flutter_riverpod/flutter_riverpod.dart';\n import 'package:google_sign_in/google_sign_in.dart';\n import 'package:go_router/go_router.dart';\n import 'package:url_launcher/url_launcher.dart';\n+import 'package:drivenotes/features/notes/presentation/providers/theme_provider.dart';\n \n class ProfilePage extends ConsumerWidget {\n   final GoogleSignInAccount user;\n \n@@ -12,8 +92,9 @@\n \n   @override\n   Widget build(BuildContext context, WidgetRef ref) {\n     final theme = Theme.of(context);\n+    // Use watch with a default value to prevent null issues\n     final themeMode = ref.watch(themeProvider);\n \n     return Scaffold(\n       appBar: AppBar(title: const Text('Profile')),\n@@ -27,16 +108,16 @@\n                 Hero(\n                   tag: 'profile_image',\n                   child: CircleAvatar(\n                     radius: 50,\n-                    backgroundImage: (user.photoUrl?.isNotEmpty ?? false)\n+                    // Add null check for photoUrl\n+                    backgroundImage: (user.photoUrl != null && user.photoUrl!.isNotEmpty)\n                         ? NetworkImage(user.photoUrl!)\n                         : null,\n-                    backgroundColor:\n-                        theme.colorScheme.primary.withOpacity(0.1),\n-                    child: (user.photoUrl?.isEmpty ?? true)\n+                    backgroundColor: theme.colorScheme.primary.withOpacity(0.1),\n+                    child: (user.photoUrl == null || user.photoUrl!.isEmpty)\n                         ? Text(\n-                            user.displayName?.isNotEmpty == true\n+                            (user.displayName?.isNotEmpty ?? false)\n                                 ? user.displayName![0].toUpperCase()\n                                 : 'U',\n                             style: theme.textTheme.headlineMedium,\n                           )\n@@ -58,26 +139,35 @@\n             ),\n           ),\n           const Divider(),\n \n-          // Theme Settings\n+          // Theme Settings - Simplified to avoid potential issues\n           ListTile(\n             leading: Icon(\n-              themeMode == ThemeMode.dark\n-                  ? Icons.dark_mode\n-                  : Icons.light_mode,\n+              themeMode == ThemeMode.dark ? Icons.dark_mode : Icons.light_mode,\n             ),\n             title: const Text('Theme'),\n-            subtitle:\n-                Text(themeMode == ThemeMode.dark ? 'Dark Mode' : 'Light Mode'),\n+            subtitle: Text(\n+              themeMode == ThemeMode.dark ? 'Dark Mode' : 'Light Mode',\n+            ),\n             trailing: Switch(\n               value: themeMode == ThemeMode.dark,\n               onChanged: (value) {\n-                WidgetsBinding.instance.addPostFrameCallback((_) {\n-                  ref\n-                      .read(themeProvider.notifier)\n-                      .setTheme(value ? ThemeMode.dark : ThemeMode.light);\n-                });\n+                try {\n+                  // Use a try-catch block to capture any errors during theme switching\n+                  final notifier = ref.read(themeProvider.notifier);\n+                  if (notifier != null) {\n+                    notifier.setTheme(value ? ThemeMode.dark : ThemeMode.light); \n+                  } else {\n+                    debugPrint('Theme notifier is null');\n+                  }\n+                } catch (e) {\n+                  debugPrint('Error changing theme: $e');\n+                  // Show error to user\n+                  ScaffoldMessenger.of(context).showSnackBar(\n+                    SnackBar(content: Text('Error changing theme: $e')),\n+                  );\n+                }\n               },\n             ),\n           ),\n \n@@ -86,12 +176,28 @@\n             leading: const Icon(Icons.folder_outlined),\n             title: const Text('Google Drive Folder'),\n             subtitle: const Text('Open notes folder in browser'),\n             onTap: () async {\n-              const url = 'https://drive.google.com';\n-              final uri = Uri.parse(url);\n-              if (await canLaunchUrl(uri)) {\n-                await launchUrl(uri);\n+              // Add exception handling for URL launch\n+              try {\n+                const url = 'https://drive.google.com';\n+                final uri = Uri.parse(url);\n+                if (await canLaunchUrl(uri)) {\n+                  await launchUrl(uri);\n+                } else {\n+                  if (context.mounted) {\n+                    ScaffoldMessenger.of(context).showSnackBar(\n+                      const SnackBar(content: Text(\"Couldn't open Google Drive\")),\n+                    );\n+                  }\n+                }\n+              } catch (e) {\n+                debugPrint('Error launching URL: $e');\n+                if (context.mounted) {\n+                  ScaffoldMessenger.of(context).showSnackBar(\n+                    SnackBar(content: Text('Error: $e')),\n+                  );\n+                }\n               }\n             },\n           ),\n \n@@ -104,14 +210,11 @@\n               showAboutDialog(\n                 context: context,\n                 applicationName: 'DriveNotes',\n                 applicationVersion: '1.0.0',\n-                applicationIcon:\n-                    const Icon(Icons.note_alt_outlined, size: 48),\n+                applicationIcon: const Icon(Icons.note_alt_outlined, size: 48),\n                 children: const [\n-                  Text(\n-                    'DriveNotes is a simple note-taking app that syncs with Google Drive.',\n-                  ),\n+                  Text('DriveNotes is a simple note-taking app that syncs with Google Drive.'),\n                 ],\n               );\n             },\n           ),\n@@ -125,10 +228,9 @@\n               final shouldLogout = await showDialog<bool>(\n                 context: context,\n                 builder: (context) => AlertDialog(\n                   title: const Text('Sign Out'),\n-                  content:\n-                      const Text('Are you sure you want to sign out?'),\n+                  content: const Text('Are you sure you want to sign out?'),\n                   actions: [\n                     TextButton(\n                       onPressed: () => Navigator.pop(context, false),\n                       child: const Text('CANCEL'),\n@@ -141,16 +243,25 @@\n                 ),\n               );\n \n               if (shouldLogout == true && context.mounted) {\n-                await GoogleSignIn().signOut();\n-                if (context.mounted) {\n-                  context.go('/login');\n+                try {\n+                  await GoogleSignIn().signOut();\n+                  if (context.mounted) {\n+                    context.go('/login');\n+                  }\n+                } catch (e) {\n+                  debugPrint('Error signing out: $e');\n+                  if (context.mounted) {\n+                    ScaffoldMessenger.of(context).showSnackBar(\n+                      SnackBar(content: Text('Error signing out: $e')),\n+                    );\n+                  }\n                 }\n               }\n             },\n           ),\n         ],\n       ),\n     );\n   }\n-}\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1744919021725,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,83 +1,6 @@\n-// lib/features/notes/presentation/providers/theme_provider.dart\n-import 'package:flutter/material.dart';\n-import 'package:flutter_riverpod/flutter_riverpod.dart';\n-import 'package:flutter_secure_storage/flutter_secure_storage.dart';\n \n-final themeProvider = StateNotifierProvider<ThemeNotifier, ThemeMode>((ref) {\n-  return ThemeNotifier();\n-});\n \n-class ThemeNotifier extends StateNotifier<ThemeMode> {\n-  ThemeNotifier() : super(ThemeMode.system) {\n-    _loadTheme();\n-  }\n-  \n-  // Use a nullable storage to avoid initialization errors\n-  final FlutterSecureStorage? _storage = const FlutterSecureStorage();\n-  static const _themeKey = 'theme_mode';\n-  \n-  Future<void> _loadTheme() async {\n-    try {\n-      // Add null check for _storage\n-      final storage = _storage;\n-      if (storage == null) {\n-        debugPrint('Storage is null during theme loading');\n-        return;\n-      }\n-      \n-      final savedTheme = await storage.read(key: _themeKey);\n-      if (savedTheme != null) {\n-        // Parse the saved theme string safely\n-        ThemeMode? themeMode;\n-        try {\n-          themeMode = ThemeMode.values.firstWhere(\n-            (mode) => mode.toString() == savedTheme,\n-            orElse: () => ThemeMode.system,\n-          );\n-        } catch (e) {\n-          debugPrint('Error parsing theme: $e');\n-          themeMode = ThemeMode.system;\n-        }\n-        \n-        state = themeMode;\n-      }\n-    } catch (e) {\n-      debugPrint('Error loading theme: $e');\n-      // Fallback to system theme on error\n-      state = ThemeMode.system;\n-    }\n-  }\n-  \n-  Future<void> setTheme(ThemeMode mode) async {\n-    try {\n-      // Set state first to update UI immediately\n-      state = mode;\n-      \n-      // Add null check for _storage\n-      final storage = _storage;\n-      if (storage == null) {\n-        debugPrint('Storage is null during theme saving');\n-        return;\n-      }\n-      \n-      // Save theme after state update\n-      await storage.write(key: _themeKey, value: mode.toString());\n-      debugPrint('Theme saved successfully: ${mode.toString()}');\n-    } catch (e) {\n-      debugPrint('Error saving theme: $e');\n-      // No need to revert state, as the UI is already updated\n-    }\n-  }\n-  \n-  Future<void> toggleTheme() async {\n-    // Get current theme with null safety\n-    final currentTheme = state;\n-    final newMode = currentTheme == ThemeMode.dark ? ThemeMode.light : ThemeMode.dark;\n-    await setTheme(newMode);\n-  }\n-}\n-\n // lib/features/notes/presentation/screens/profile_page.dart\n import 'package:flutter/material.dart';\n import 'package:flutter_riverpod/flutter_riverpod.dart';\n import 'package:google_sign_in/google_sign_in.dart';\n"
                },
                {
                    "date": 1744919144874,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,4 @@\n-\n-\n // lib/features/notes/presentation/screens/profile_page.dart\n import 'package:flutter/material.dart';\n import 'package:flutter_riverpod/flutter_riverpod.dart';\n import 'package:google_sign_in/google_sign_in.dart';\n@@ -8,18 +6,45 @@\n import 'package:url_launcher/url_launcher.dart';\n import 'package:drivenotes/features/notes/presentation/providers/theme_provider.dart';\n \n class ProfilePage extends ConsumerWidget {\n-  final GoogleSignInAccount user;\n+  final GoogleSignInAccount? user;\n \n   const ProfilePage({super.key, required this.user});\n \n   @override\n   Widget build(BuildContext context, WidgetRef ref) {\n     final theme = Theme.of(context);\n-    // Use watch with a default value to prevent null issues\n     final themeMode = ref.watch(themeProvider);\n \n+    // If user is null, show error state\n+    if (user == null) {\n+      return Scaffold(\n+        appBar: AppBar(title: const Text('Profile')),\n+        body: Center(\n+          child: Column(\n+            mainAxisAlignment: MainAxisAlignment.center,\n+            children: [\n+              Icon(\n+                Icons.error_outline,\n+                size: 64,\n+                color: theme.colorScheme.error,\n+              ),\n+              const SizedBox(height: 16),\n+              Text('Session expired', style: theme.textTheme.titleLarge),\n+              const SizedBox(height: 8),\n+              Text('Please sign in again', style: theme.textTheme.bodyLarge),\n+              const SizedBox(height: 24),\n+              FilledButton(\n+                onPressed: () => context.go('/login'),\n+                child: const Text('Sign In'),\n+              ),\n+            ],\n+          ),\n+        ),\n+      );\n+    }\n+\n     return Scaffold(\n       appBar: AppBar(title: const Text('Profile')),\n       body: ListView(\n         children: [\n@@ -31,30 +56,31 @@\n                 Hero(\n                   tag: 'profile_image',\n                   child: CircleAvatar(\n                     radius: 50,\n-                    // Add null check for photoUrl\n-                    backgroundImage: (user.photoUrl != null && user.photoUrl!.isNotEmpty)\n-                        ? NetworkImage(user.photoUrl!)\n-                        : null,\n+                    backgroundImage:\n+                        user?.photoUrl != null\n+                            ? NetworkImage(user!.photoUrl!)\n+                            : null,\n                     backgroundColor: theme.colorScheme.primary.withOpacity(0.1),\n-                    child: (user.photoUrl == null || user.photoUrl!.isEmpty)\n-                        ? Text(\n-                            (user.displayName?.isNotEmpty ?? false)\n-                                ? user.displayName![0].toUpperCase()\n-                                : 'U',\n-                            style: theme.textTheme.headlineMedium,\n-                          )\n-                        : null,\n+                    child:\n+                        user?.photoUrl == null\n+                            ? Text(\n+                              user?.displayName?.characters.first\n+                                      .toUpperCase() ??\n+                                  'U',\n+                              style: theme.textTheme.headlineMedium,\n+                            )\n+                            : null,\n                   ),\n                 ),\n                 const SizedBox(height: 16),\n                 Text(\n-                  user.displayName ?? 'User',\n+                  user?.displayName ?? 'User',\n                   style: theme.textTheme.titleLarge,\n                 ),\n                 Text(\n-                  user.email,\n+                  user?.email ?? '',\n                   style: theme.textTheme.bodyMedium?.copyWith(\n                     color: theme.colorScheme.onSurface.withOpacity(0.7),\n                   ),\n                 ),\n@@ -62,9 +88,9 @@\n             ),\n           ),\n           const Divider(),\n \n-          // Theme Settings - Simplified to avoid potential issues\n+          // Theme Settings\n           ListTile(\n             leading: Icon(\n               themeMode == ThemeMode.dark ? Icons.dark_mode : Icons.light_mode,\n             ),\n@@ -74,23 +100,11 @@\n             ),\n             trailing: Switch(\n               value: themeMode == ThemeMode.dark,\n               onChanged: (value) {\n-                try {\n-                  // Use a try-catch block to capture any errors during theme switching\n-                  final notifier = ref.read(themeProvider.notifier);\n-                  if (notifier != null) {\n-                    notifier.setTheme(value ? ThemeMode.dark : ThemeMode.light); \n-                  } else {\n-                    debugPrint('Theme notifier is null');\n-                  }\n-                } catch (e) {\n-                  debugPrint('Error changing theme: $e');\n-                  // Show error to user\n-                  ScaffoldMessenger.of(context).showSnackBar(\n-                    SnackBar(content: Text('Error changing theme: $e')),\n-                  );\n-                }\n+                ref\n+                    .read(themeProvider.notifier)\n+                    .setTheme(value ? ThemeMode.dark : ThemeMode.light);\n               },\n             ),\n           ),\n \n@@ -99,28 +113,11 @@\n             leading: const Icon(Icons.folder_outlined),\n             title: const Text('Google Drive Folder'),\n             subtitle: const Text('Open notes folder in browser'),\n             onTap: () async {\n-              // Add exception handling for URL launch\n-              try {\n-                const url = 'https://drive.google.com';\n-                final uri = Uri.parse(url);\n-                if (await canLaunchUrl(uri)) {\n-                  await launchUrl(uri);\n-                } else {\n-                  if (context.mounted) {\n-                    ScaffoldMessenger.of(context).showSnackBar(\n-                      const SnackBar(content: Text(\"Couldn't open Google Drive\")),\n-                    );\n-                  }\n-                }\n-              } catch (e) {\n-                debugPrint('Error launching URL: $e');\n-                if (context.mounted) {\n-                  ScaffoldMessenger.of(context).showSnackBar(\n-                    SnackBar(content: Text('Error: $e')),\n-                  );\n-                }\n+              const url = 'https://drive.google.com';\n+              if (await canLaunchUrl(Uri.parse(url))) {\n+                await launchUrl(Uri.parse(url));\n               }\n             },\n           ),\n \n@@ -134,10 +131,12 @@\n                 context: context,\n                 applicationName: 'DriveNotes',\n                 applicationVersion: '1.0.0',\n                 applicationIcon: const Icon(Icons.note_alt_outlined, size: 48),\n-                children: const [\n-                  Text('DriveNotes is a simple note-taking app that syncs with Google Drive.'),\n+                children: [\n+                  const Text(\n+                    'DriveNotes is a simple note-taking app that syncs with Google Drive.',\n+                  ),\n                 ],\n               );\n             },\n           ),\n@@ -149,42 +148,34 @@\n             subtitle: const Text('Log out of your account'),\n             onTap: () async {\n               final shouldLogout = await showDialog<bool>(\n                 context: context,\n-                builder: (context) => AlertDialog(\n-                  title: const Text('Sign Out'),\n-                  content: const Text('Are you sure you want to sign out?'),\n-                  actions: [\n-                    TextButton(\n-                      onPressed: () => Navigator.pop(context, false),\n-                      child: const Text('CANCEL'),\n+                builder:\n+                    (context) => AlertDialog(\n+                      title: const Text('Sign Out'),\n+                      content: const Text('Are you sure you want to sign out?'),\n+                      actions: [\n+                        TextButton(\n+                          onPressed: () => Navigator.pop(context, false),\n+                          child: const Text('CANCEL'),\n+                        ),\n+                        FilledButton(\n+                          onPressed: () => Navigator.pop(context, true),\n+                          child: const Text('SIGN OUT'),\n+                        ),\n+                      ],\n                     ),\n-                    FilledButton(\n-                      onPressed: () => Navigator.pop(context, true),\n-                      child: const Text('SIGN OUT'),\n-                    ),\n-                  ],\n-                ),\n               );\n \n               if (shouldLogout == true && context.mounted) {\n-                try {\n-                  await GoogleSignIn().signOut();\n-                  if (context.mounted) {\n-                    context.go('/login');\n-                  }\n-                } catch (e) {\n-                  debugPrint('Error signing out: $e');\n\\ No newline at end of file\n-                  if (context.mounted) {\n-                    ScaffoldMessenger.of(context).showSnackBar(\n-                      SnackBar(content: Text('Error signing out: $e')),\n-                    );\n-                  }\n+                await GoogleSignIn().signOut();\n+                if (context.mounted) {\n+                  context.go('/login');\n                 }\n               }\n             },\n           ),\n         ],\n       ),\n     );\n   }\n-}\n+}\n"
                }
            ],
            "date": 1744916632404,
            "name": "Commit-0",
            "content": "import 'package:drivenotes/features/notes/presentation/providers/theme_provider.dart';\r\nimport 'package:flutter/material.dart';\r\nimport 'package:flutter_riverpod/flutter_riverpod.dart';\r\nimport 'package:google_sign_in/google_sign_in.dart';\r\nimport 'package:go_router/go_router.dart';\r\nimport 'package:url_launcher/url_launcher.dart';\r\n\r\nclass ProfilePage extends ConsumerWidget {\r\n  final GoogleSignInAccount user;\r\n\r\n  const ProfilePage({super.key, required this.user});\r\n\r\n  @override\r\n  Widget build(BuildContext context, WidgetRef ref) {\r\n    final theme = Theme.of(context);\r\n    final themeMode = ref.watch(themeProvider);\r\n\r\n    return Scaffold(\r\n      appBar: AppBar(\r\n        title: const Text('Profile'),\r\n      ),\r\n      body: ListView(\r\n        children: [\r\n          // Profile Header\r\n          Padding(\r\n            padding: const EdgeInsets.all(16.0),\r\n            child: Column(\r\n              children: [\r\n                Hero(\r\n                  tag: 'profile_image',\r\n                  child: CircleAvatar(\r\n                    radius: 50,\r\n                    backgroundImage: NetworkImage(user.photoUrl ?? ''),\r\n                    backgroundColor: theme.colorScheme.primary.withOpacity(0.1),\r\n                    child: user.photoUrl == null\r\n                        ? Text(\r\n                            user.displayName?[0].toUpperCase() ?? 'U',\r\n                            style: theme.textTheme.headlineMedium,\r\n                          )\r\n                        : null,\r\n                  ),\r\n                ),\r\n                const SizedBox(height: 16),\r\n                Text(\r\n                  user.displayName ?? 'User',\r\n                  style: theme.textTheme.titleLarge,\r\n                ),\r\n                Text(\r\n                  user.email,\r\n                  style: theme.textTheme.bodyMedium?.copyWith(\r\n                    color: theme.colorScheme.onSurface.withOpacity(0.7),\r\n                  ),\r\n                ),\r\n              ],\r\n            ),\r\n          ),\r\n          const Divider(),\r\n          \r\n          // Theme Settings\r\n          ListTile(\r\n            leading: Icon(\r\n              themeMode == ThemeMode.dark\r\n                  ? Icons.dark_mode\r\n                  : Icons.light_mode,\r\n            ),\r\n            title: const Text('Theme'),\r\n            subtitle: Text(\r\n              themeMode == ThemeMode.dark ? 'Dark Mode' : 'Light Mode',\r\n            ),\r\n            trailing: Switch(\r\n              value: themeMode == ThemeMode.dark,\r\n              onChanged: (value) {\r\n                ref.read(themeProvider.notifier).setTheme(\r\n                      value ? ThemeMode.dark : ThemeMode.light,\r\n                    );\r\n              },\r\n            ),\r\n          ),\r\n\r\n          // Drive Folder\r\n          ListTile(\r\n            leading: const Icon(Icons.folder_outlined),\r\n            title: const Text('Google Drive Folder'),\r\n            subtitle: const Text('Open notes folder in browser'),\r\n            onTap: () async {\r\n              const url = 'https://drive.google.com';\r\n              if (await canLaunchUrl(Uri.parse(url))) {\r\n                await launchUrl(Uri.parse(url));\r\n              }\r\n            },\r\n          ),\r\n\r\n          // App Info\r\n          ListTile(\r\n            leading: const Icon(Icons.info_outline),\r\n            title: const Text('About DriveNotes'),\r\n            subtitle: const Text('Version 1.0.0'),\r\n            onTap: () {\r\n              showAboutDialog(\r\n                context: context,\r\n                applicationName: 'DriveNotes',\r\n                applicationVersion: '1.0.0',\r\n                applicationIcon: const Icon(Icons.note_alt_outlined, size: 48),\r\n                children: [\r\n                  const Text(\r\n                    'DriveNotes is a simple note-taking app that syncs with Google Drive.',\r\n                  ),\r\n                ],\r\n              );\r\n            },\r\n          ),\r\n\r\n          // Sign Out\r\n          ListTile(\r\n            leading: const Icon(Icons.logout),\r\n            title: const Text('Sign Out'),\r\n            subtitle: const Text('Log out of your account'),\r\n            onTap: () async {\r\n              final shouldLogout = await showDialog<bool>(\r\n                context: context,\r\n                builder: (context) => AlertDialog(\r\n                  title: const Text('Sign Out'),\r\n                  content: const Text(\r\n                    'Are you sure you want to sign out?',\r\n                  ),\r\n                  actions: [\r\n                    TextButton(\r\n                      onPressed: () => Navigator.pop(context, false),\r\n                      child: const Text('CANCEL'),\r\n                    ),\r\n                    FilledButton(\r\n                      onPressed: () => Navigator.pop(context, true),\r\n                      child: const Text('SIGN OUT'),\r\n                    ),\r\n                  ],\r\n                ),\r\n              );\r\n\r\n              if (shouldLogout == true && context.mounted) {\r\n                await GoogleSignIn().signOut();\r\n                if (context.mounted) {\r\n                  context.go('/login');\r\n                }\r\n              }\r\n            },\r\n          ),\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n} "
        }
    ]
}