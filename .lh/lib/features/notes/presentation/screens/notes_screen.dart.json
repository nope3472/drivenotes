{
    "sourceFile": "lib/features/notes/presentation/screens/notes_screen.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 8,
            "patches": [
                {
                    "date": 1744893777107,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1744894109382,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,5 @@\n+import 'package:drivenotes/features/notes/data/models/note_model.dart';\r\n import 'package:flutter/material.dart';\r\n import 'package:flutter_riverpod/flutter_riverpod.dart';\r\n import 'package:drivenotes/features/notes/presentation/providers/notes_provider.dart';\r\n import 'package:drivenotes/features/notes/presentation/widgets/note_card.dart';\r\n@@ -21,81 +22,87 @@\n           ),\r\n         ],\r\n       ),\r\n       body: notesAsync.when(\r\n-        data: (notes) => notes.isEmpty\r\n-            ? const Center(child: Text('No notes yet. Tap + to add one!'))\r\n-            : ListView.builder(\r\n-                itemCount: notes.length,\r\n-                itemBuilder: (context, index) {\r\n-                  final note = notes[index];\r\n-                  return NoteCard(\r\n-                    note: note,\r\n-                    onTap: () => _showNoteDetails(context, ref, note),\r\n-                    onLongPress: () => _deleteNote(context, ref, note.id),\r\n-                  );\r\n-                },\r\n-              ),\r\n+        data:\r\n+            (notes) =>\r\n+                notes.isEmpty\r\n+                    ? const Center(\r\n+                      child: Text('No notes yet. Tap + to add one!'),\r\n+                    )\r\n+                    : ListView.builder(\r\n+                      itemCount: notes.length,\r\n+                      itemBuilder: (context, index) {\r\n+                        final note = notes[index];\r\n+                        return NoteCard(\r\n+                          note: note,\r\n+                          onTap: () => _showNoteDetails(context, ref, note),\r\n+                          onLongPress: () => _deleteNote(context, ref, note.id),\r\n+                        );\r\n+                      },\r\n+                    ),\r\n         loading: () => const Center(child: CircularProgressIndicator()),\r\n-        error: (error, stack) => Center(\r\n-          child: Text('Error: ${error.toString()}'),\r\n-        ),\r\n+        error:\r\n+            (error, stack) => Center(child: Text('Error: ${error.toString()}')),\r\n       ),\r\n       floatingActionButton: FloatingActionButton(\r\n         onPressed: () => _showAddNoteDialog(context, ref),\r\n         child: const Icon(Icons.add),\r\n       ),\r\n     );\r\n   }\r\n \r\n-  void _showNoteDetails(BuildContext context, WidgetRef ref, NoteModel note) async {\r\n-    final content = await ref.read(notesProvider.notifier).getNoteContent(note.id);\r\n-    \r\n+  void _showNoteDetails(\r\n+    BuildContext context,\r\n+    WidgetRef ref,\r\n+    NoteModel note,\r\n+  ) async {\r\n+    final content = await ref\r\n+        .read(notesProvider.notifier)\r\n+        .getNoteContent(note.id);\r\n+\r\n     if (!context.mounted) return;\r\n-    \r\n+\r\n     showDialog(\r\n       context: context,\r\n-      builder: (context) => AlertDialog(\r\n-        title: Text(note.title),\r\n-        content: SingleChildScrollView(\r\n-          child: Text(content),\r\n-        ),\r\n-        actions: [\r\n-          TextButton(\r\n-            onPressed: () => Navigator.pop(context),\r\n-            child: const Text('Close'),\r\n+      builder:\r\n+          (context) => AlertDialog(\r\n+            title: Text(note.title),\r\n+            content: SingleChildScrollView(child: Text(content)),\r\n+            actions: [\r\n+              TextButton(\r\n+                onPressed: () => Navigator.pop(context),\r\n\\ No newline at end of file\n+                child: const Text('Close'),\r\n+              ),\r\n+            ],\r\n           ),\r\n-        ],\r\n-      ),\r\n     );\r\n   }\r\n \r\n   void _deleteNote(BuildContext context, WidgetRef ref, String id) {\r\n     showDialog(\r\n       context: context,\r\n-      builder: (context) => AlertDialog(\r\n-        title: const Text('Delete Note'),\r\n-        content: const Text('Are you sure you want to delete this note?'),\r\n-        actions: [\r\n-          TextButton(\r\n-            onPressed: () => Navigator.pop(context),\r\n-            child: const Text('Cancel'),\r\n+      builder:\r\n+          (context) => AlertDialog(\r\n+            title: const Text('Delete Note'),\r\n+            content: const Text('Are you sure you want to delete this note?'),\r\n+            actions: [\r\n+              TextButton(\r\n+                onPressed: () => Navigator.pop(context),\r\n+                child: const Text('Cancel'),\r\n+              ),\r\n+              TextButton(\r\n+                onPressed: () {\r\n+                  Navigator.pop(context);\r\n+                  ref.read(notesProvider.notifier).deleteNote(id);\r\n+                },\r\n+                child: const Text('Delete'),\r\n+              ),\r\n+            ],\r\n           ),\r\n-          TextButton(\r\n-            onPressed: () {\r\n-              Navigator.pop(context);\r\n-              ref.read(notesProvider.notifier).deleteNote(id);\r\n-            },\r\n-            child: const Text('Delete'),\r\n-          ),\r\n-        ],\r\n-      ),\r\n     );\r\n   }\r\n \r\n   void _showAddNoteDialog(BuildContext context, WidgetRef ref) {\r\n-    showDialog(\r\n-      context: context,\r\n-      builder: (context) => const AddNoteDialog(),\r\n-    );\r\n+    showDialog(context: context, builder: (context) => const AddNoteDialog());\r\n   }\r\n-} \n+}\r\n"
                },
                {
                    "date": 1744894236402,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,50 +3,73 @@\n import 'package:flutter_riverpod/flutter_riverpod.dart';\r\n import 'package:drivenotes/features/notes/presentation/providers/notes_provider.dart';\r\n import 'package:drivenotes/features/notes/presentation/widgets/note_card.dart';\r\n import 'package:drivenotes/features/notes/presentation/widgets/add_note_dialog.dart';\r\n+import 'package:drivenotes/features/notes/presentation/providers/drive_service_provider.dart';\r\n+import 'package:drivenotes/features/auth/presentation/providers/auth_service_provider.dart';\r\n \r\n class NotesScreen extends ConsumerWidget {\r\n   const NotesScreen({super.key});\r\n \r\n   @override\r\n   Widget build(BuildContext context, WidgetRef ref) {\r\n     final notesAsync = ref.watch(notesProvider);\r\n+    final driveService = ref.watch(initializedDriveServiceProvider);\r\n \r\n     return Scaffold(\r\n       appBar: AppBar(\r\n-        title: const Text('DriveNotes'),\r\n+        title: const Text('My Notes'),\r\n         actions: [\r\n           IconButton(\r\n-            icon: const Icon(Icons.refresh),\r\n-            onPressed: () => ref.invalidate(notesProvider),\r\n+            icon: const Icon(Icons.sync),\r\n+            onPressed: () {\r\n+              // TODO: Implement sync functionality\r\n+            },\r\n           ),\r\n+          IconButton(\r\n+            icon: const Icon(Icons.logout),\r\n+            onPressed: () {\r\n+              ref.read(authServiceProvider).signOut().then((_) {\r\n+                Navigator.of(context).pushReplacementNamed('/login');\r\n+              });\r\n+            },\r\n+          ),\r\n         ],\r\n       ),\r\n-      body: notesAsync.when(\r\n+      body: driveService.when(\r\n         data:\r\n-            (notes) =>\r\n-                notes.isEmpty\r\n-                    ? const Center(\r\n-                      child: Text('No notes yet. Tap + to add one!'),\r\n-                    )\r\n-                    : ListView.builder(\r\n-                      itemCount: notes.length,\r\n-                      itemBuilder: (context, index) {\r\n-                        final note = notes[index];\r\n-                        return NoteCard(\r\n-                          note: note,\r\n-                          onTap: () => _showNoteDetails(context, ref, note),\r\n-                          onLongPress: () => _deleteNote(context, ref, note.id),\r\n-                        );\r\n-                      },\r\n-                    ),\r\n+            (service) => notesAsync.when(\r\n+              data:\r\n+                  (notes) =>\r\n+                      notes.isEmpty\r\n+                          ? const Center(\r\n+                            child: Text('No notes yet. Tap + to add one!'),\r\n+                          )\r\n+                          : ListView.builder(\r\n+                            itemCount: notes.length,\r\n+                            itemBuilder: (context, index) {\r\n+                              final note = notes[index];\r\n+                              return NoteCard(\r\n+                                note: note,\r\n+                                onTap:\r\n+                                    () => _showNoteDetails(context, ref, note),\r\n+                                onLongPress:\r\n+                                    () => _deleteNote(context, ref, note.id),\r\n+                              );\r\n+                            },\r\n+                          ),\r\n+              loading: () => const Center(child: CircularProgressIndicator()),\r\n+              error:\r\n+                  (error, stack) =>\r\n+                      Center(child: Text('Error: ${error.toString()}')),\r\n+            ),\r\n         loading: () => const Center(child: CircularProgressIndicator()),\r\n-        error:\r\n-            (error, stack) => Center(child: Text('Error: ${error.toString()}')),\r\n+        error: (error, stack) => Center(child: Text('Error: $error')),\r\n       ),\r\n       floatingActionButton: FloatingActionButton(\r\n-        onPressed: () => _showAddNoteDialog(context, ref),\r\n+        onPressed: () {\r\n+          // TODO: Implement note creation\r\n+        },\r\n         child: const Icon(Icons.add),\r\n       ),\r\n     );\r\n   }\r\n@@ -104,5 +127,5 @@\n \r\n   void _showAddNoteDialog(BuildContext context, WidgetRef ref) {\r\n     showDialog(context: context, builder: (context) => const AddNoteDialog());\r\n   }\r\n-}\n\\ No newline at end of file\n+}\r\n"
                },
                {
                    "date": 1744894278001,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,19 +1,15 @@\n-import 'package:drivenotes/features/notes/data/models/note_model.dart';\r\n import 'package:flutter/material.dart';\r\n import 'package:flutter_riverpod/flutter_riverpod.dart';\r\n-import 'package:drivenotes/features/notes/presentation/providers/notes_provider.dart';\r\n-import 'package:drivenotes/features/notes/presentation/widgets/note_card.dart';\r\n-import 'package:drivenotes/features/notes/presentation/widgets/add_note_dialog.dart';\r\n import 'package:drivenotes/features/notes/presentation/providers/drive_service_provider.dart';\r\n import 'package:drivenotes/features/auth/presentation/providers/auth_service_provider.dart';\r\n+import 'package:drivenotes/features/auth/presentation/screens/login_screen.dart';\r\n \r\n class NotesScreen extends ConsumerWidget {\r\n   const NotesScreen({super.key});\r\n \r\n   @override\r\n   Widget build(BuildContext context, WidgetRef ref) {\r\n-    final notesAsync = ref.watch(notesProvider);\r\n     final driveService = ref.watch(initializedDriveServiceProvider);\r\n \r\n     return Scaffold(\r\n       appBar: AppBar(\r\n@@ -28,41 +24,18 @@\n           IconButton(\r\n             icon: const Icon(Icons.logout),\r\n             onPressed: () {\r\n               ref.read(authServiceProvider).signOut().then((_) {\r\n-                Navigator.of(context).pushReplacementNamed('/login');\r\n+                Navigator.of(context).pushReplacement(\r\n+                  MaterialPageRoute(builder: (_) => const LoginScreen()),\r\n+                );\r\n               });\r\n             },\r\n           ),\r\n         ],\r\n       ),\r\n       body: driveService.when(\r\n-        data:\r\n-            (service) => notesAsync.when(\r\n-              data:\r\n-                  (notes) =>\r\n-                      notes.isEmpty\r\n-                          ? const Center(\r\n-                            child: Text('No notes yet. Tap + to add one!'),\r\n-                          )\r\n-                          : ListView.builder(\r\n-                            itemCount: notes.length,\r\n-                            itemBuilder: (context, index) {\r\n-                              final note = notes[index];\r\n-                              return NoteCard(\r\n-                                note: note,\r\n-                                onTap:\r\n-                                    () => _showNoteDetails(context, ref, note),\r\n-                                onLongPress:\r\n-                                    () => _deleteNote(context, ref, note.id),\r\n-                              );\r\n-                            },\r\n-                          ),\r\n-              loading: () => const Center(child: CircularProgressIndicator()),\r\n-              error:\r\n-                  (error, stack) =>\r\n-                      Center(child: Text('Error: ${error.toString()}')),\r\n-            ),\r\n+        data: (_) => const Center(child: Text('Notes will appear here')),\r\n         loading: () => const Center(child: CircularProgressIndicator()),\r\n         error: (error, stack) => Center(child: Text('Error: $error')),\r\n       ),\r\n       floatingActionButton: FloatingActionButton(\r\n@@ -72,60 +45,5 @@\n         child: const Icon(Icons.add),\r\n       ),\r\n     );\r\n   }\r\n-\r\n-  void _showNoteDetails(\r\n-    BuildContext context,\r\n-    WidgetRef ref,\r\n-    NoteModel note,\r\n-  ) async {\r\n-    final content = await ref\r\n-        .read(notesProvider.notifier)\r\n-        .getNoteContent(note.id);\r\n-\r\n-    if (!context.mounted) return;\r\n-\r\n-    showDialog(\r\n-      context: context,\r\n-      builder:\r\n-          (context) => AlertDialog(\r\n-            title: Text(note.title),\r\n-            content: SingleChildScrollView(child: Text(content)),\r\n-            actions: [\r\n-              TextButton(\r\n-                onPressed: () => Navigator.pop(context),\r\n-                child: const Text('Close'),\r\n-              ),\r\n-            ],\r\n-          ),\r\n-    );\r\n-  }\r\n-\r\n-  void _deleteNote(BuildContext context, WidgetRef ref, String id) {\r\n-    showDialog(\r\n-      context: context,\r\n-      builder:\r\n-          (context) => AlertDialog(\r\n-            title: const Text('Delete Note'),\r\n-            content: const Text('Are you sure you want to delete this note?'),\r\n-            actions: [\r\n-              TextButton(\r\n-                onPressed: () => Navigator.pop(context),\r\n-                child: const Text('Cancel'),\r\n-              ),\r\n-              TextButton(\r\n-                onPressed: () {\r\n-                  Navigator.pop(context);\r\n-                  ref.read(notesProvider.notifier).deleteNote(id);\r\n-                },\r\n-                child: const Text('Delete'),\r\n-              ),\r\n-            ],\r\n-          ),\r\n-    );\r\n-  }\r\n-\r\n-  void _showAddNoteDialog(BuildContext context, WidgetRef ref) {\r\n-    showDialog(context: context, builder: (context) => const AddNoteDialog());\r\n-  }\r\n }\r\n"
                },
                {
                    "date": 1744894285207,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,8 @@\n import 'package:flutter/material.dart';\r\n import 'package:flutter_riverpod/flutter_riverpod.dart';\r\n import 'package:drivenotes/features/notes/presentation/providers/drive_service_provider.dart';\r\n-import 'package:drivenotes/features/auth/presentation/providers/auth_service_provider.dart';\r\n-import 'package:drivenotes/features/auth/presentation/screens/login_screen.dart';\r\n+import 'package:drivenotes/login.dart';\r\n \r\n class NotesScreen extends ConsumerWidget {\r\n   const NotesScreen({super.key});\r\n \r\n"
                },
                {
                    "date": 1744894656973,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,24 +1,27 @@\n import 'package:flutter/material.dart';\r\n import 'package:flutter_riverpod/flutter_riverpod.dart';\r\n import 'package:drivenotes/features/notes/presentation/providers/drive_service_provider.dart';\r\n+import 'package:drivenotes/features/notes/presentation/providers/notes_provider.dart';\r\n+import 'package:drivenotes/features/notes/presentation/widgets/add_note_dialog.dart';\r\n import 'package:drivenotes/login.dart';\r\n \r\n class NotesScreen extends ConsumerWidget {\r\n   const NotesScreen({super.key});\r\n \r\n   @override\r\n   Widget build(BuildContext context, WidgetRef ref) {\r\n     final driveService = ref.watch(initializedDriveServiceProvider);\r\n+    final notes = ref.watch(notesProvider);\r\n \r\n     return Scaffold(\r\n       appBar: AppBar(\r\n         title: const Text('My Notes'),\r\n         actions: [\r\n           IconButton(\r\n             icon: const Icon(Icons.sync),\r\n             onPressed: () {\r\n-              // TODO: Implement sync functionality\r\n+              ref.read(notesProvider.notifier).loadNotes();\r\n             },\r\n           ),\r\n           IconButton(\r\n             icon: const Icon(Icons.logout),\r\n@@ -32,15 +35,53 @@\n           ),\r\n         ],\r\n       ),\r\n       body: driveService.when(\r\n-        data: (_) => const Center(child: Text('Notes will appear here')),\r\n+        data:\r\n+            (_) => notes.when(\r\n+              data:\r\n+                  (notes) =>\r\n+                      notes.isEmpty\r\n+                          ? const Center(\r\n+                            child: Text('No notes yet. Tap + to add one!'),\r\n+                          )\r\n+                          : ListView.builder(\r\n+                            itemCount: notes.length,\r\n+                            itemBuilder: (context, index) {\r\n+                              final note = notes[index];\r\n+                              return ListTile(\r\n+                                title: Text(note.title),\r\n+                                subtitle: Text(\r\n+                                  note.content.length > 50\r\n+                                      ? '${note.content.substring(0, 50)}...'\r\n+                                      : note.content,\r\n+                                ),\r\n+                                trailing: IconButton(\r\n+                                  icon: const Icon(Icons.delete),\r\n+                                  onPressed: () {\r\n+                                    ref\r\n+                                        .read(notesProvider.notifier)\r\n+                                        .deleteNote(note.id);\r\n+                                  },\r\n+                                ),\r\n+                                onTap: () {\r\n+                                  // TODO: Implement note editing\r\n+                                },\r\n+                              );\r\n+                            },\r\n+                          ),\r\n+              loading: () => const Center(child: CircularProgressIndicator()),\r\n+              error: (error, stack) => Center(child: Text('Error: $error')),\r\n+            ),\r\n         loading: () => const Center(child: CircularProgressIndicator()),\r\n         error: (error, stack) => Center(child: Text('Error: $error')),\r\n       ),\r\n       floatingActionButton: FloatingActionButton(\r\n         onPressed: () {\r\n-          // TODO: Implement note creation\r\n+          showDialog(\r\n+            context: context,\r\n+            builder: (context) => const AddNoteDialog(),\r\n+          );\r\n         },\r\n         child: const Icon(Icons.add),\r\n       ),\r\n     );\r\n"
                },
                {
                    "date": 1744894768021,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,9 @@\n import 'package:flutter_riverpod/flutter_riverpod.dart';\r\n import 'package:drivenotes/features/notes/presentation/providers/drive_service_provider.dart';\r\n import 'package:drivenotes/features/notes/presentation/providers/notes_provider.dart';\r\n import 'package:drivenotes/features/notes/presentation/widgets/add_note_dialog.dart';\r\n+import 'package:drivenotes/features/notes/presentation/widgets/edit_note_dialog.dart';\r\n import 'package:drivenotes/login.dart';\r\n \r\n class NotesScreen extends ConsumerWidget {\r\n   const NotesScreen({super.key});\r\n@@ -63,9 +64,13 @@\n                                         .deleteNote(note.id);\r\n                                   },\r\n                                 ),\r\n                                 onTap: () {\r\n-                                  // TODO: Implement note editing\r\n+                                  showDialog(\r\n+                                    context: context,\r\n+                                    builder:\r\n+                                        (context) => EditNoteDialog(note: note),\r\n+                                  );\r\n                                 },\r\n                               );\r\n                             },\r\n                           ),\r\n"
                },
                {
                    "date": 1744895515896,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,9 @@\n import 'package:drivenotes/features/notes/presentation/providers/drive_service_provider.dart';\r\n import 'package:drivenotes/features/notes/presentation/providers/notes_provider.dart';\r\n import 'package:drivenotes/features/notes/presentation/widgets/add_note_dialog.dart';\r\n import 'package:drivenotes/features/notes/presentation/widgets/edit_note_dialog.dart';\r\n+import 'package:drivenotes/features/auth/presentation/providers/auth_service_provider.dart';\r\n import 'package:drivenotes/login.dart';\r\n \r\n class NotesScreen extends ConsumerWidget {\r\n   const NotesScreen({super.key});\r\n@@ -36,48 +37,59 @@\n           ),\r\n         ],\r\n       ),\r\n       body: driveService.when(\r\n-        data:\r\n-            (_) => notes.when(\r\n-              data:\r\n-                  (notes) =>\r\n-                      notes.isEmpty\r\n-                          ? const Center(\r\n-                            child: Text('No notes yet. Tap + to add one!'),\r\n-                          )\r\n-                          : ListView.builder(\r\n-                            itemCount: notes.length,\r\n-                            itemBuilder: (context, index) {\r\n-                              final note = notes[index];\r\n-                              return ListTile(\r\n-                                title: Text(note.title),\r\n-                                subtitle: Text(\r\n-                                  note.content.length > 50\r\n-                                      ? '${note.content.substring(0, 50)}...'\r\n-                                      : note.content,\r\n+        data: (_) => notes.when(\r\n+          data: (notes) => notes.isEmpty\r\n+              ? const Center(child: Text('No notes yet. Tap + to add one!'))\r\n+              : ListView.builder(\r\n+                  itemCount: notes.length,\r\n+                  itemBuilder: (context, index) {\r\n+                    final note = notes[index];\r\n+                    return ListTile(\r\n+                      title: Text(note.title),\r\n+                      subtitle: Text(\r\n+                        note.content.length > 50\r\n+                            ? '${note.content.substring(0, 50)}...'\r\n+                            : note.content,\r\n+                      ),\r\n+                      trailing: IconButton(\r\n+                        icon: const Icon(Icons.delete),\r\n+                        onPressed: () {\r\n+                          showDialog(\r\n+                            context: context,\r\n+                            builder: (context) => AlertDialog(\r\n+                              title: const Text('Delete Note'),\r\n+                              content: const Text('Are you sure you want to delete this note?'),\r\n+                              actions: [\r\n+                                TextButton(\r\n+                                  onPressed: () => Navigator.pop(context),\r\n+                                  child: const Text('Cancel'),\r\n                                 ),\r\n-                                trailing: IconButton(\r\n-                                  icon: const Icon(Icons.delete),\r\n+                                TextButton(\r\n                                   onPressed: () {\r\n-                                    ref\r\n-                                        .read(notesProvider.notifier)\r\n-                                        .deleteNote(note.id);\r\n+                                    ref.read(notesProvider.notifier).deleteNote(note.id);\r\n+                                    Navigator.pop(context);\r\n                                   },\r\n+                                  child: const Text('Delete'),\r\n                                 ),\r\n-                                onTap: () {\r\n-                                  showDialog(\r\n-                                    context: context,\r\n-                                    builder:\r\n-                                        (context) => EditNoteDialog(note: note),\r\n-                                  );\r\n-                                },\r\n-                              );\r\n-                            },\r\n-                          ),\r\n-              loading: () => const Center(child: CircularProgressIndicator()),\r\n-              error: (error, stack) => Center(child: Text('Error: $error')),\r\n-            ),\r\n+                              ],\r\n+                            ),\r\n+                          );\r\n+                        },\r\n+                      ),\r\n+                      onTap: () {\r\n+                        showDialog(\r\n+                          context: context,\r\n+                          builder: (context) => EditNoteDialog(note: note),\r\n+                        );\r\n+                      },\r\n+                    );\r\n+                  },\r\n+                ),\r\n+          loading: () => const Center(child: CircularProgressIndicator()),\r\n+          error: (error, stack) => Center(child: Text('Error: $error')),\r\n+        ),\r\n         loading: () => const Center(child: CircularProgressIndicator()),\r\n         error: (error, stack) => Center(child: Text('Error: $error')),\r\n       ),\r\n       floatingActionButton: FloatingActionButton(\r\n@@ -90,5 +102,5 @@\n         child: const Icon(Icons.add),\r\n       ),\r\n     );\r\n   }\r\n-}\r\n+} \n\\ No newline at end of file\n"
                },
                {
                    "date": 1744896735424,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n             icon: const Icon(Icons.logout),\r\n             onPressed: () {\r\n               ref.read(authServiceProvider).signOut().then((_) {\r\n                 Navigator.of(context).pushReplacement(\r\n-                  MaterialPageRoute(builder: (_) => const LoginScreen()),\r\n+                  MaterialPageRoute(builder: (_) => const LoginPage()),\r\n                 );\r\n               });\r\n             },\r\n           ),\r\n@@ -54,28 +54,9 @@\n                       ),\r\n                       trailing: IconButton(\r\n                         icon: const Icon(Icons.delete),\r\n                         onPressed: () {\r\n-                          showDialog(\r\n-                            context: context,\r\n-                            builder: (context) => AlertDialog(\r\n-                              title: const Text('Delete Note'),\r\n-                              content: const Text('Are you sure you want to delete this note?'),\r\n-                              actions: [\r\n-                                TextButton(\r\n-                                  onPressed: () => Navigator.pop(context),\r\n-                                  child: const Text('Cancel'),\r\n-                                ),\r\n-                                TextButton(\r\n-                                  onPressed: () {\r\n-                                    ref.read(notesProvider.notifier).deleteNote(note.id);\r\n-                                    Navigator.pop(context);\r\n-                                  },\r\n-                                  child: const Text('Delete'),\r\n-                                ),\r\n-                              ],\r\n-                            ),\r\n-                          );\r\n+                          ref.read(notesProvider.notifier).deleteNote(note.id);\r\n                         },\r\n                       ),\r\n                       onTap: () {\r\n                         showDialog(\r\n"
                }
            ],
            "date": 1744893777107,
            "name": "Commit-0",
            "content": "import 'package:flutter/material.dart';\r\nimport 'package:flutter_riverpod/flutter_riverpod.dart';\r\nimport 'package:drivenotes/features/notes/presentation/providers/notes_provider.dart';\r\nimport 'package:drivenotes/features/notes/presentation/widgets/note_card.dart';\r\nimport 'package:drivenotes/features/notes/presentation/widgets/add_note_dialog.dart';\r\n\r\nclass NotesScreen extends ConsumerWidget {\r\n  const NotesScreen({super.key});\r\n\r\n  @override\r\n  Widget build(BuildContext context, WidgetRef ref) {\r\n    final notesAsync = ref.watch(notesProvider);\r\n\r\n    return Scaffold(\r\n      appBar: AppBar(\r\n        title: const Text('DriveNotes'),\r\n        actions: [\r\n          IconButton(\r\n            icon: const Icon(Icons.refresh),\r\n            onPressed: () => ref.invalidate(notesProvider),\r\n          ),\r\n        ],\r\n      ),\r\n      body: notesAsync.when(\r\n        data: (notes) => notes.isEmpty\r\n            ? const Center(child: Text('No notes yet. Tap + to add one!'))\r\n            : ListView.builder(\r\n                itemCount: notes.length,\r\n                itemBuilder: (context, index) {\r\n                  final note = notes[index];\r\n                  return NoteCard(\r\n                    note: note,\r\n                    onTap: () => _showNoteDetails(context, ref, note),\r\n                    onLongPress: () => _deleteNote(context, ref, note.id),\r\n                  );\r\n                },\r\n              ),\r\n        loading: () => const Center(child: CircularProgressIndicator()),\r\n        error: (error, stack) => Center(\r\n          child: Text('Error: ${error.toString()}'),\r\n        ),\r\n      ),\r\n      floatingActionButton: FloatingActionButton(\r\n        onPressed: () => _showAddNoteDialog(context, ref),\r\n        child: const Icon(Icons.add),\r\n      ),\r\n    );\r\n  }\r\n\r\n  void _showNoteDetails(BuildContext context, WidgetRef ref, NoteModel note) async {\r\n    final content = await ref.read(notesProvider.notifier).getNoteContent(note.id);\r\n    \r\n    if (!context.mounted) return;\r\n    \r\n    showDialog(\r\n      context: context,\r\n      builder: (context) => AlertDialog(\r\n        title: Text(note.title),\r\n        content: SingleChildScrollView(\r\n          child: Text(content),\r\n        ),\r\n        actions: [\r\n          TextButton(\r\n            onPressed: () => Navigator.pop(context),\r\n            child: const Text('Close'),\r\n          ),\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n\r\n  void _deleteNote(BuildContext context, WidgetRef ref, String id) {\r\n    showDialog(\r\n      context: context,\r\n      builder: (context) => AlertDialog(\r\n        title: const Text('Delete Note'),\r\n        content: const Text('Are you sure you want to delete this note?'),\r\n        actions: [\r\n          TextButton(\r\n            onPressed: () => Navigator.pop(context),\r\n            child: const Text('Cancel'),\r\n          ),\r\n          TextButton(\r\n            onPressed: () {\r\n              Navigator.pop(context);\r\n              ref.read(notesProvider.notifier).deleteNote(id);\r\n            },\r\n            child: const Text('Delete'),\r\n          ),\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n\r\n  void _showAddNoteDialog(BuildContext context, WidgetRef ref) {\r\n    showDialog(\r\n      context: context,\r\n      builder: (context) => const AddNoteDialog(),\r\n    );\r\n  }\r\n} "
        }
    ]
}