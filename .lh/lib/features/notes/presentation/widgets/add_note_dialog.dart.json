{
    "sourceFile": "lib/features/notes/presentation/widgets/add_note_dialog.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1744893794775,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1744894646373,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,76 +11,87 @@\n \r\n class _AddNoteDialogState extends ConsumerState<AddNoteDialog> {\r\n   final _titleController = TextEditingController();\r\n   final _contentController = TextEditingController();\r\n-  final _formKey = GlobalKey<FormState>();\r\n+  bool _isLoading = false;\r\n \r\n   @override\r\n   void dispose() {\r\n     _titleController.dispose();\r\n     _contentController.dispose();\r\n     super.dispose();\r\n   }\r\n \r\n+  Future<void> _createNote() async {\r\n+    if (_titleController.text.isEmpty || _contentController.text.isEmpty) {\r\n+      ScaffoldMessenger.of(context).showSnackBar(\r\n+        const SnackBar(content: Text('Please fill in all fields')),\r\n+      );\r\n+      return;\r\n+    }\r\n+\r\n+    setState(() => _isLoading = true);\r\n+    try {\r\n+      await ref.read(notesProvider.notifier).createNote(\r\n+            _titleController.text,\r\n+            _contentController.text,\r\n+          );\r\n+      if (mounted) {\r\n+        Navigator.of(context).pop();\r\n+      }\r\n+    } catch (e) {\r\n+      if (mounted) {\r\n+        ScaffoldMessenger.of(context).showSnackBar(\r\n+          SnackBar(content: Text('Failed to create note: $e')),\r\n+        );\r\n+      }\r\n+    } finally {\r\n+      if (mounted) {\r\n+        setState(() => _isLoading = false);\r\n+      }\r\n+    }\r\n+  }\r\n+\r\n   @override\r\n   Widget build(BuildContext context) {\r\n     return AlertDialog(\r\n       title: const Text('Add New Note'),\r\n-      content: Form(\r\n-        key: _formKey,\r\n-        child: Column(\r\n-          mainAxisSize: MainAxisSize.min,\r\n-          children: [\r\n-            TextFormField(\r\n-              controller: _titleController,\r\n-              decoration: const InputDecoration(\r\n-                labelText: 'Title',\r\n-                border: OutlineInputBorder(),\r\n-              ),\r\n-              validator: (value) {\r\n-                if (value == null || value.isEmpty) {\r\n-                  return 'Please enter a title';\r\n-                }\r\n-                return null;\r\n-              },\r\n+      content: Column(\r\n+        mainAxisSize: MainAxisSize.min,\r\n+        children: [\r\n+          TextField(\r\n+            controller: _titleController,\r\n+            decoration: const InputDecoration(\r\n+              labelText: 'Title',\r\n+              border: OutlineInputBorder(),\r\n             ),\r\n-            const SizedBox(height: 16),\r\n-            TextFormField(\r\n\\ No newline at end of file\n-              controller: _contentController,\r\n-              decoration: const InputDecoration(\r\n-                labelText: 'Content',\r\n-                border: OutlineInputBorder(),\r\n-              ),\r\n-              maxLines: 5,\r\n-              validator: (value) {\r\n-                if (value == null || value.isEmpty) {\r\n-                  return 'Please enter some content';\r\n-                }\r\n-                return null;\r\n-              },\r\n+          ),\r\n+          const SizedBox(height: 16),\r\n+          TextField(\r\n+            controller: _contentController,\r\n+            decoration: const InputDecoration(\r\n+              labelText: 'Content',\r\n+              border: OutlineInputBorder(),\r\n             ),\r\n-          ],\r\n-        ),\r\n+            maxLines: 5,\r\n+          ),\r\n+        ],\r\n       ),\r\n       actions: [\r\n         TextButton(\r\n-          onPressed: () => Navigator.pop(context),\r\n+          onPressed: _isLoading ? null : () => Navigator.of(context).pop(),\r\n           child: const Text('Cancel'),\r\n         ),\r\n-        FilledButton(\r\n-          onPressed: _addNote,\r\n-          child: const Text('Add'),\r\n+        ElevatedButton(\r\n+          onPressed: _isLoading ? null : _createNote,\r\n+          child: _isLoading\r\n+              ? const SizedBox(\r\n+                  width: 20,\r\n+                  height: 20,\r\n+                  child: CircularProgressIndicator(strokeWidth: 2),\r\n+                )\r\n+              : const Text('Create'),\r\n         ),\r\n       ],\r\n     );\r\n   }\r\n-\r\n-  void _addNote() {\r\n-    if (_formKey.currentState!.validate()) {\r\n-      ref.read(notesProvider.notifier).addNote(\r\n-            _titleController.text,\r\n-            _contentController.text,\r\n-          );\r\n-      Navigator.pop(context);\r\n-    }\r\n-  }\r\n-} \n+}\r\n"
                }
            ],
            "date": 1744893794775,
            "name": "Commit-0",
            "content": "import 'package:flutter/material.dart';\r\nimport 'package:flutter_riverpod/flutter_riverpod.dart';\r\nimport 'package:drivenotes/features/notes/presentation/providers/notes_provider.dart';\r\n\r\nclass AddNoteDialog extends ConsumerStatefulWidget {\r\n  const AddNoteDialog({super.key});\r\n\r\n  @override\r\n  ConsumerState<AddNoteDialog> createState() => _AddNoteDialogState();\r\n}\r\n\r\nclass _AddNoteDialogState extends ConsumerState<AddNoteDialog> {\r\n  final _titleController = TextEditingController();\r\n  final _contentController = TextEditingController();\r\n  final _formKey = GlobalKey<FormState>();\r\n\r\n  @override\r\n  void dispose() {\r\n    _titleController.dispose();\r\n    _contentController.dispose();\r\n    super.dispose();\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return AlertDialog(\r\n      title: const Text('Add New Note'),\r\n      content: Form(\r\n        key: _formKey,\r\n        child: Column(\r\n          mainAxisSize: MainAxisSize.min,\r\n          children: [\r\n            TextFormField(\r\n              controller: _titleController,\r\n              decoration: const InputDecoration(\r\n                labelText: 'Title',\r\n                border: OutlineInputBorder(),\r\n              ),\r\n              validator: (value) {\r\n                if (value == null || value.isEmpty) {\r\n                  return 'Please enter a title';\r\n                }\r\n                return null;\r\n              },\r\n            ),\r\n            const SizedBox(height: 16),\r\n            TextFormField(\r\n              controller: _contentController,\r\n              decoration: const InputDecoration(\r\n                labelText: 'Content',\r\n                border: OutlineInputBorder(),\r\n              ),\r\n              maxLines: 5,\r\n              validator: (value) {\r\n                if (value == null || value.isEmpty) {\r\n                  return 'Please enter some content';\r\n                }\r\n                return null;\r\n              },\r\n            ),\r\n          ],\r\n        ),\r\n      ),\r\n      actions: [\r\n        TextButton(\r\n          onPressed: () => Navigator.pop(context),\r\n          child: const Text('Cancel'),\r\n        ),\r\n        FilledButton(\r\n          onPressed: _addNote,\r\n          child: const Text('Add'),\r\n        ),\r\n      ],\r\n    );\r\n  }\r\n\r\n  void _addNote() {\r\n    if (_formKey.currentState!.validate()) {\r\n      ref.read(notesProvider.notifier).addNote(\r\n            _titleController.text,\r\n            _contentController.text,\r\n          );\r\n      Navigator.pop(context);\r\n    }\r\n  }\r\n} "
        }
    ]
}