{
    "sourceFile": "lib/features/notes/presentation/widgets/edit_note_dialog.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1744894755873,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1744894755873,
            "name": "Commit-0",
            "content": "import 'package:flutter/material.dart';\r\nimport 'package:flutter_riverpod/flutter_riverpod.dart';\r\nimport 'package:drivenotes/features/notes/data/models/note_model.dart';\r\nimport 'package:drivenotes/features/notes/presentation/providers/notes_provider.dart';\r\n\r\nclass EditNoteDialog extends ConsumerStatefulWidget {\r\n  final NoteModel note;\r\n\r\n  const EditNoteDialog({super.key, required this.note});\r\n\r\n  @override\r\n  ConsumerState<EditNoteDialog> createState() => _EditNoteDialogState();\r\n}\r\n\r\nclass _EditNoteDialogState extends ConsumerState<EditNoteDialog> {\r\n  late final TextEditingController _titleController;\r\n  late final TextEditingController _contentController;\r\n  bool _isLoading = false;\r\n\r\n  @override\r\n  void initState() {\r\n    super.initState();\r\n    _titleController = TextEditingController(text: widget.note.title);\r\n    _contentController = TextEditingController(text: widget.note.content);\r\n  }\r\n\r\n  @override\r\n  void dispose() {\r\n    _titleController.dispose();\r\n    _contentController.dispose();\r\n    super.dispose();\r\n  }\r\n\r\n  Future<void> _updateNote() async {\r\n    if (_titleController.text.isEmpty || _contentController.text.isEmpty) {\r\n      ScaffoldMessenger.of(context).showSnackBar(\r\n        const SnackBar(content: Text('Please fill in all fields')),\r\n      );\r\n      return;\r\n    }\r\n\r\n    setState(() => _isLoading = true);\r\n    try {\r\n      await ref.read(notesProvider.notifier).updateNote(\r\n            widget.note.id,\r\n            _titleController.text,\r\n            _contentController.text,\r\n          );\r\n      if (mounted) {\r\n        Navigator.of(context).pop();\r\n      }\r\n    } catch (e) {\r\n      if (mounted) {\r\n        ScaffoldMessenger.of(context).showSnackBar(\r\n          SnackBar(content: Text('Failed to update note: $e')),\r\n        );\r\n      }\r\n    } finally {\r\n      if (mounted) {\r\n        setState(() => _isLoading = false);\r\n      }\r\n    }\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return AlertDialog(\r\n      title: const Text('Edit Note'),\r\n      content: Column(\r\n        mainAxisSize: MainAxisSize.min,\r\n        children: [\r\n          TextField(\r\n            controller: _titleController,\r\n            decoration: const InputDecoration(\r\n              labelText: 'Title',\r\n              border: OutlineInputBorder(),\r\n            ),\r\n          ),\r\n          const SizedBox(height: 16),\r\n          TextField(\r\n            controller: _contentController,\r\n            decoration: const InputDecoration(\r\n              labelText: 'Content',\r\n              border: OutlineInputBorder(),\r\n            ),\r\n            maxLines: 5,\r\n          ),\r\n        ],\r\n      ),\r\n      actions: [\r\n        TextButton(\r\n          onPressed: _isLoading ? null : () => Navigator.of(context).pop(),\r\n          child: const Text('Cancel'),\r\n        ),\r\n        ElevatedButton(\r\n          onPressed: _isLoading ? null : _updateNote,\r\n          child: _isLoading\r\n              ? const SizedBox(\r\n                  width: 20,\r\n                  height: 20,\r\n                  child: CircularProgressIndicator(strokeWidth: 2),\r\n                )\r\n              : const Text('Save'),\r\n        ),\r\n      ],\r\n    );\r\n  }\r\n} "
        }
    ]
}