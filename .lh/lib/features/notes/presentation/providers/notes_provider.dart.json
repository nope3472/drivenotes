{
    "sourceFile": "lib/features/notes/presentation/providers/notes_provider.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1744893765872,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1744893900517,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,22 +1,19 @@\n import 'package:flutter_riverpod/flutter_riverpod.dart';\r\n import 'package:drivenotes/features/notes/data/models/note_model.dart';\r\n import 'package:drivenotes/features/notes/data/services/drive_service.dart';\r\n+import 'package:drivenotes/features/notes/presentation/providers/drive_service_provider.dart';\r\n \r\n-final driveServiceProvider = Provider<DriveService>((ref) {\r\n-  throw UnimplementedError('DriveService not initialized');\r\n-});\r\n-\r\n final notesProvider = AsyncNotifierProvider<NotesNotifier, List<NoteModel>>(NotesNotifier.new);\r\n \r\n class NotesNotifier extends AsyncNotifier<List<NoteModel>> {\r\n   @override\r\n   Future<List<NoteModel>> build() async {\r\n-    return await _fetchNotes();\r\n+    final driveService = await ref.watch(initializedDriveServiceProvider.future);\r\n+    return await _fetchNotes(driveService);\r\n   }\r\n \r\n-  Future<List<NoteModel>> _fetchNotes() async {\r\n-    final driveService = ref.read(driveServiceProvider);\r\n+  Future<List<NoteModel>> _fetchNotes(DriveService driveService) async {\r\n     final files = await driveService.getNotes();\r\n     \r\n     return files.map((file) {\r\n       final title = file.name!.replaceAll('.txt', '');\r\n@@ -32,9 +29,9 @@\n \r\n   Future<void> addNote(String title, String content) async {\r\n     state = const AsyncValue.loading();\r\n     state = await AsyncValue.guard(() async {\r\n-      final driveService = ref.read(driveServiceProvider);\r\n+      final driveService = await ref.watch(initializedDriveServiceProvider.future);\r\n       final fileId = await driveService.createNote(title, content);\r\n       \r\n       final newNote = NoteModel(\r\n         id: fileId,\r\n@@ -51,9 +48,9 @@\n \r\n   Future<void> updateNote(String id, String content) async {\r\n     state = const AsyncValue.loading();\r\n     state = await AsyncValue.guard(() async {\r\n-      final driveService = ref.read(driveServiceProvider);\r\n+      final driveService = await ref.watch(initializedDriveServiceProvider.future);\r\n       await driveService.updateNote(id, content);\r\n       \r\n       final currentNotes = state.value ?? [];\r\n       return currentNotes.map((note) {\r\n@@ -70,17 +67,17 @@\n \r\n   Future<void> deleteNote(String id) async {\r\n     state = const AsyncValue.loading();\r\n     state = await AsyncValue.guard(() async {\r\n-      final driveService = ref.read(driveServiceProvider);\r\n+      final driveService = await ref.watch(initializedDriveServiceProvider.future);\r\n       await driveService.deleteNote(id);\r\n       \r\n       final currentNotes = state.value ?? [];\r\n       return currentNotes.where((note) => note.id != id).toList();\r\n     });\r\n   }\r\n \r\n   Future<String> getNoteContent(String id) async {\r\n-    final driveService = ref.read(driveServiceProvider);\r\n+    final driveService = await ref.watch(initializedDriveServiceProvider.future);\r\n     return await driveService.getNoteContent(id);\r\n\\ No newline at end of file\n   }\r\n-} \n+}\r\n"
                },
                {
                    "date": 1744893967385,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,20 +2,24 @@\n import 'package:drivenotes/features/notes/data/models/note_model.dart';\r\n import 'package:drivenotes/features/notes/data/services/drive_service.dart';\r\n import 'package:drivenotes/features/notes/presentation/providers/drive_service_provider.dart';\r\n \r\n-final notesProvider = AsyncNotifierProvider<NotesNotifier, List<NoteModel>>(NotesNotifier.new);\r\n+final notesProvider = AsyncNotifierProvider<NotesNotifier, List<NoteModel>>(\r\n+  NotesNotifier.new,\r\n+);\r\n \r\n class NotesNotifier extends AsyncNotifier<List<NoteModel>> {\r\n   @override\r\n   Future<List<NoteModel>> build() async {\r\n-    final driveService = await ref.watch(initializedDriveServiceProvider.future);\r\n+    final driveService = await ref.watch(\r\n+      initializedDriveServiceProvider.future,\r\n+    );\r\n     return await _fetchNotes(driveService);\r\n   }\r\n \r\n   Future<List<NoteModel>> _fetchNotes(DriveService driveService) async {\r\n     final files = await driveService.getNotes();\r\n-    \r\n+\r\n     return files.map((file) {\r\n       final title = file.name!.replaceAll('.txt', '');\r\n       return NoteModel(\r\n         id: file.id!,\r\n@@ -29,11 +33,13 @@\n \r\n   Future<void> addNote(String title, String content) async {\r\n     state = const AsyncValue.loading();\r\n     state = await AsyncValue.guard(() async {\r\n-      final driveService = await ref.watch(initializedDriveServiceProvider.future);\r\n+      final driveService = await ref.watch(\r\n+        initializedDriveServiceProvider.future,\r\n+      );\r\n       final fileId = await driveService.createNote(title, content);\r\n-      \r\n+\r\n       final newNote = NoteModel(\r\n         id: fileId,\r\n         title: title,\r\n         content: content,\r\n@@ -48,18 +54,17 @@\n \r\n   Future<void> updateNote(String id, String content) async {\r\n     state = const AsyncValue.loading();\r\n     state = await AsyncValue.guard(() async {\r\n-      final driveService = await ref.watch(initializedDriveServiceProvider.future);\r\n+      final driveService = await ref.watch(\r\n+        initializedDriveServiceProvider.future,\r\n+      );\r\n       await driveService.updateNote(id, content);\r\n-      \r\n+\r\n       final currentNotes = state.value ?? [];\r\n       return currentNotes.map((note) {\r\n         if (note.id == id) {\r\n-          return note.copyWith(\r\n-            content: content,\r\n-            lastModified: DateTime.now(),\r\n-          );\r\n+          return note.copyWith(content: content, lastModified: DateTime.now());\r\n         }\r\n         return note;\r\n       }).toList();\r\n     });\r\n@@ -67,17 +72,21 @@\n \r\n   Future<void> deleteNote(String id) async {\r\n     state = const AsyncValue.loading();\r\n     state = await AsyncValue.guard(() async {\r\n-      final driveService = await ref.watch(initializedDriveServiceProvider.future);\r\n+      final driveService = await ref.watch(\r\n+        initializedDriveServiceProvider.future,\r\n+      );\r\n       await driveService.deleteNote(id);\r\n-      \r\n+\r\n       final currentNotes = state.value ?? [];\r\n       return currentNotes.where((note) => note.id != id).toList();\r\n     });\r\n   }\r\n \r\n   Future<String> getNoteContent(String id) async {\r\n\\ No newline at end of file\n-    final driveService = await ref.watch(initializedDriveServiceProvider.future);\r\n+    final driveService = await ref.watch(\r\n+      initializedDriveServiceProvider.future,\r\n+    );\r\n     return await driveService.getNoteContent(id);\r\n   }\r\n-}\n+}\r\n"
                },
                {
                    "date": 1744894635808,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,91 +2,74 @@\n import 'package:drivenotes/features/notes/data/models/note_model.dart';\r\n import 'package:drivenotes/features/notes/data/services/drive_service.dart';\r\n import 'package:drivenotes/features/notes/presentation/providers/drive_service_provider.dart';\r\n \r\n-final notesProvider = AsyncNotifierProvider<NotesNotifier, List<NoteModel>>(\r\n-  NotesNotifier.new,\r\n-);\r\n+final notesProvider =\r\n+    StateNotifierProvider<NotesNotifier, AsyncValue<List<NoteModel>>>((ref) {\r\n+      final driveService = ref.watch(initializedDriveServiceProvider);\r\n+      return NotesNotifier(ref, driveService);\r\n+    });\r\n \r\n-class NotesNotifier extends AsyncNotifier<List<NoteModel>> {\r\n-  @override\r\n-  Future<List<NoteModel>> build() async {\r\n-    final driveService = await ref.watch(\r\n-      initializedDriveServiceProvider.future,\r\n-    );\r\n-    return await _fetchNotes(driveService);\r\n-  }\r\n+class NotesNotifier extends StateNotifier<AsyncValue<List<NoteModel>>> {\r\n+  final Ref _ref;\r\n+  final AsyncValue<DriveService> _driveService;\r\n \r\n-  Future<List<NoteModel>> _fetchNotes(DriveService driveService) async {\r\n-    final files = await driveService.getNotes();\r\n-\r\n-    return files.map((file) {\r\n-      final title = file.name!.replaceAll('.txt', '');\r\n-      return NoteModel(\r\n-        id: file.id!,\r\n-        title: title,\r\n-        content: '',\r\n-        lastModified: file.modifiedTime ?? DateTime.now(),\r\n-        isSynced: true,\r\n-      );\r\n-    }).toList();\r\n+  NotesNotifier(this._ref, this._driveService)\r\n+    : super(const AsyncValue.loading()) {\r\n+    loadNotes();\r\n   }\r\n \r\n-  Future<void> addNote(String title, String content) async {\r\n+  Future<void> loadNotes() async {\r\n     state = const AsyncValue.loading();\r\n-    state = await AsyncValue.guard(() async {\r\n-      final driveService = await ref.watch(\r\n-        initializedDriveServiceProvider.future,\r\n-      );\r\n-      final fileId = await driveService.createNote(title, content);\r\n+    try {\r\n+      final driveService = await _driveService.value;\r\n+      final files = await driveService.getNotes();\r\n \r\n-      final newNote = NoteModel(\r\n-        id: fileId,\r\n-        title: title,\r\n-        content: content,\r\n-        lastModified: DateTime.now(),\r\n-        isSynced: true,\r\n+      final notes = await Future.wait(\r\n+        files.map((file) async {\r\n+          final content = await driveService.getNoteContent(file.id!);\r\n+          return NoteModel(\r\n+            id: file.id!,\r\n+            title: file.name!.replaceAll('.txt', ''),\r\n+            content: content,\r\n+            lastModified: file.modifiedTime ?? DateTime.now(),\r\n+            isSynced: true,\r\n+          );\r\n+        }),\r\n       );\r\n \r\n-      final currentNotes = state.value ?? [];\r\n-      return [...currentNotes, newNote];\r\n-    });\r\n+      state = AsyncValue.data(notes);\r\n+    } catch (error, stackTrace) {\r\n+      state = AsyncValue.error(error, stackTrace);\r\n+    }\r\n   }\r\n \r\n-  Future<void> updateNote(String id, String content) async {\r\n-    state = const AsyncValue.loading();\r\n-    state = await AsyncValue.guard(() async {\r\n-      final driveService = await ref.watch(\r\n-        initializedDriveServiceProvider.future,\r\n-      );\r\n+  Future<void> createNote(String title, String content) async {\r\n+    try {\r\n\\ No newline at end of file\n+      final driveService = await _driveService.value;\r\n+      await driveService.createNote(title, content);\r\n+      await loadNotes();\r\n+    } catch (error, stackTrace) {\r\n+      state = AsyncValue.error(error, stackTrace);\r\n+    }\r\n+  }\r\n+\r\n+  Future<void> updateNote(String id, String title, String content) async {\r\n+    try {\r\n+      final driveService = await _driveService.value;\r\n       await driveService.updateNote(id, content);\r\n-\r\n-      final currentNotes = state.value ?? [];\r\n-      return currentNotes.map((note) {\r\n-        if (note.id == id) {\r\n-          return note.copyWith(content: content, lastModified: DateTime.now());\r\n-        }\r\n-        return note;\r\n-      }).toList();\r\n-    });\r\n+      await loadNotes();\r\n+    } catch (error, stackTrace) {\r\n+      state = AsyncValue.error(error, stackTrace);\r\n+    }\r\n   }\r\n \r\n   Future<void> deleteNote(String id) async {\r\n-    state = const AsyncValue.loading();\r\n-    state = await AsyncValue.guard(() async {\r\n-      final driveService = await ref.watch(\r\n-        initializedDriveServiceProvider.future,\r\n-      );\r\n+    try {\r\n+      final driveService = await _driveService.value;\r\n       await driveService.deleteNote(id);\r\n-\r\n-      final currentNotes = state.value ?? [];\r\n-      return currentNotes.where((note) => note.id != id).toList();\r\n-    });\r\n+      await loadNotes();\r\n+    } catch (error, stackTrace) {\r\n+      state = AsyncValue.error(error, stackTrace);\r\n+    }\r\n   }\r\n-\r\n-  Future<String> getNoteContent(String id) async {\r\n-    final driveService = await ref.watch(\r\n-      initializedDriveServiceProvider.future,\r\n-    );\r\n-    return await driveService.getNoteContent(id);\r\n-  }\r\n-}\n+}\r\n"
                },
                {
                    "date": 1744894698888,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,5 +71,5 @@\n     } catch (error, stackTrace) {\r\n       state = AsyncValue.error(error, stackTrace);\r\n     }\r\n   }\r\n-}\n\\ No newline at end of file\n+}\r\n"
                },
                {
                    "date": 1744894743087,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,8 +21,11 @@\n   Future<void> loadNotes() async {\r\n     state = const AsyncValue.loading();\r\n     try {\r\n       final driveService = await _driveService.value;\r\n+      if (driveService == null) {\r\n+        throw Exception('Drive service not initialized');\r\n+      }\r\n       final files = await driveService.getNotes();\r\n \r\n       final notes = await Future.wait(\r\n         files.map((file) async {\r\n@@ -45,8 +48,11 @@\n \r\n   Future<void> createNote(String title, String content) async {\r\n     try {\r\n       final driveService = await _driveService.value;\r\n+      if (driveService == null) {\r\n+        throw Exception('Drive service not initialized');\r\n+      }\r\n       await driveService.createNote(title, content);\r\n       await loadNotes();\r\n     } catch (error, stackTrace) {\r\n       state = AsyncValue.error(error, stackTrace);\r\n@@ -55,8 +61,11 @@\n \r\n   Future<void> updateNote(String id, String title, String content) async {\r\n     try {\r\n       final driveService = await _driveService.value;\r\n+      if (driveService == null) {\r\n+        throw Exception('Drive service not initialized');\r\n+      }\r\n       await driveService.updateNote(id, content);\r\n       await loadNotes();\r\n     } catch (error, stackTrace) {\r\n       state = AsyncValue.error(error, stackTrace);\r\n@@ -65,8 +74,11 @@\n \r\n   Future<void> deleteNote(String id) async {\r\n     try {\r\n       final driveService = await _driveService.value;\r\n+      if (driveService == null) {\r\n+        throw Exception('Drive service not initialized');\r\n+      }\r\n       await driveService.deleteNote(id);\r\n       await loadNotes();\r\n     } catch (error, stackTrace) {\r\n       state = AsyncValue.error(error, stackTrace);\r\n"
                },
                {
                    "date": 1744895525265,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,87 +1,53 @@\n import 'package:flutter_riverpod/flutter_riverpod.dart';\r\n-import 'package:drivenotes/features/notes/data/models/note_model.dart';\r\n-import 'package:drivenotes/features/notes/data/services/drive_service.dart';\r\n-import 'package:drivenotes/features/notes/presentation/providers/drive_service_provider.dart';\r\n+import 'package:drivenotes/features/notes/domain/entities/note.dart';\r\n+import 'package:drivenotes/features/notes/domain/repositories/notes_repository.dart';\r\n \r\n-final notesProvider =\r\n-    StateNotifierProvider<NotesNotifier, AsyncValue<List<NoteModel>>>((ref) {\r\n-      final driveService = ref.watch(initializedDriveServiceProvider);\r\n-      return NotesNotifier(ref, driveService);\r\n-    });\r\n+final notesProvider = StateNotifierProvider<NotesNotifier, AsyncValue<List<Note>>>((ref) {\r\n+  final notesRepository = ref.watch(notesRepositoryProvider);\r\n+  return NotesNotifier(notesRepository);\r\n+});\r\n \r\n-class NotesNotifier extends StateNotifier<AsyncValue<List<NoteModel>>> {\r\n-  final Ref _ref;\r\n-  final AsyncValue<DriveService> _driveService;\r\n+class NotesNotifier extends StateNotifier<AsyncValue<List<Note>>> {\r\n+  final NotesRepository _notesRepository;\r\n \r\n-  NotesNotifier(this._ref, this._driveService)\r\n-    : super(const AsyncValue.loading()) {\r\n+  NotesNotifier(this._notesRepository) : super(const AsyncValue.loading()) {\r\n     loadNotes();\r\n   }\r\n \r\n   Future<void> loadNotes() async {\r\n     state = const AsyncValue.loading();\r\n     try {\r\n-      final driveService = await _driveService.value;\r\n-      if (driveService == null) {\r\n-        throw Exception('Drive service not initialized');\r\n-      }\r\n-      final files = await driveService.getNotes();\r\n-\r\n-      final notes = await Future.wait(\r\n-        files.map((file) async {\r\n-          final content = await driveService.getNoteContent(file.id!);\r\n-          return NoteModel(\r\n-            id: file.id!,\r\n-            title: file.name!.replaceAll('.txt', ''),\r\n-            content: content,\r\n-            lastModified: file.modifiedTime ?? DateTime.now(),\r\n-            isSynced: true,\r\n-          );\r\n-        }),\r\n-      );\r\n-\r\n+      final notes = await _notesRepository.getNotes();\r\n       state = AsyncValue.data(notes);\r\n-    } catch (error, stackTrace) {\r\n-      state = AsyncValue.error(error, stackTrace);\r\n+    } catch (error, stack) {\r\n+      state = AsyncValue.error(error, stack);\r\n     }\r\n   }\r\n \r\n-  Future<void> createNote(String title, String content) async {\r\n+  Future<void> addNote(String title, String content) async {\r\n     try {\r\n-      final driveService = await _driveService.value;\r\n-      if (driveService == null) {\r\n-        throw Exception('Drive service not initialized');\r\n-      }\r\n-      await driveService.createNote(title, content);\r\n+      await _notesRepository.createNote(title, content);\r\n       await loadNotes();\r\n-    } catch (error, stackTrace) {\r\n-      state = AsyncValue.error(error, stackTrace);\r\n+    } catch (error, stack) {\r\n+      state = AsyncValue.error(error, stack);\r\n     }\r\n   }\r\n \r\n   Future<void> updateNote(String id, String title, String content) async {\r\n     try {\r\n-      final driveService = await _driveService.value;\r\n-      if (driveService == null) {\r\n-        throw Exception('Drive service not initialized');\r\n-      }\r\n-      await driveService.updateNote(id, content);\r\n+      await _notesRepository.updateNote(id, title, content);\r\n       await loadNotes();\r\n-    } catch (error, stackTrace) {\r\n-      state = AsyncValue.error(error, stackTrace);\r\n+    } catch (error, stack) {\r\n+      state = AsyncValue.error(error, stack);\r\n     }\r\n   }\r\n \r\n   Future<void> deleteNote(String id) async {\r\n     try {\r\n-      final driveService = await _driveService.value;\r\n-      if (driveService == null) {\r\n-        throw Exception('Drive service not initialized');\r\n-      }\r\n-      await driveService.deleteNote(id);\r\n+      await _notesRepository.deleteNote(id);\r\n       await loadNotes();\r\n-    } catch (error, stackTrace) {\r\n-      state = AsyncValue.error(error, stackTrace);\r\n+    } catch (error, stack) {\r\n+      state = AsyncValue.error(error, stack);\r\n     }\r\n   }\r\n-}\r\n+} \n\\ No newline at end of file\n"
                }
            ],
            "date": 1744893765872,
            "name": "Commit-0",
            "content": "import 'package:flutter_riverpod/flutter_riverpod.dart';\r\nimport 'package:drivenotes/features/notes/data/models/note_model.dart';\r\nimport 'package:drivenotes/features/notes/data/services/drive_service.dart';\r\n\r\nfinal driveServiceProvider = Provider<DriveService>((ref) {\r\n  throw UnimplementedError('DriveService not initialized');\r\n});\r\n\r\nfinal notesProvider = AsyncNotifierProvider<NotesNotifier, List<NoteModel>>(NotesNotifier.new);\r\n\r\nclass NotesNotifier extends AsyncNotifier<List<NoteModel>> {\r\n  @override\r\n  Future<List<NoteModel>> build() async {\r\n    return await _fetchNotes();\r\n  }\r\n\r\n  Future<List<NoteModel>> _fetchNotes() async {\r\n    final driveService = ref.read(driveServiceProvider);\r\n    final files = await driveService.getNotes();\r\n    \r\n    return files.map((file) {\r\n      final title = file.name!.replaceAll('.txt', '');\r\n      return NoteModel(\r\n        id: file.id!,\r\n        title: title,\r\n        content: '',\r\n        lastModified: file.modifiedTime ?? DateTime.now(),\r\n        isSynced: true,\r\n      );\r\n    }).toList();\r\n  }\r\n\r\n  Future<void> addNote(String title, String content) async {\r\n    state = const AsyncValue.loading();\r\n    state = await AsyncValue.guard(() async {\r\n      final driveService = ref.read(driveServiceProvider);\r\n      final fileId = await driveService.createNote(title, content);\r\n      \r\n      final newNote = NoteModel(\r\n        id: fileId,\r\n        title: title,\r\n        content: content,\r\n        lastModified: DateTime.now(),\r\n        isSynced: true,\r\n      );\r\n\r\n      final currentNotes = state.value ?? [];\r\n      return [...currentNotes, newNote];\r\n    });\r\n  }\r\n\r\n  Future<void> updateNote(String id, String content) async {\r\n    state = const AsyncValue.loading();\r\n    state = await AsyncValue.guard(() async {\r\n      final driveService = ref.read(driveServiceProvider);\r\n      await driveService.updateNote(id, content);\r\n      \r\n      final currentNotes = state.value ?? [];\r\n      return currentNotes.map((note) {\r\n        if (note.id == id) {\r\n          return note.copyWith(\r\n            content: content,\r\n            lastModified: DateTime.now(),\r\n          );\r\n        }\r\n        return note;\r\n      }).toList();\r\n    });\r\n  }\r\n\r\n  Future<void> deleteNote(String id) async {\r\n    state = const AsyncValue.loading();\r\n    state = await AsyncValue.guard(() async {\r\n      final driveService = ref.read(driveServiceProvider);\r\n      await driveService.deleteNote(id);\r\n      \r\n      final currentNotes = state.value ?? [];\r\n      return currentNotes.where((note) => note.id != id).toList();\r\n    });\r\n  }\r\n\r\n  Future<String> getNoteContent(String id) async {\r\n    final driveService = ref.read(driveServiceProvider);\r\n    return await driveService.getNoteContent(id);\r\n  }\r\n} "
        }
    ]
}