{
    "sourceFile": "lib/features/notes/presentation/providers/note_editor_controller.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 19,
            "patches": [
                {
                    "date": 1744897311575,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1744897913300,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,20 +1,33 @@\n+import 'package:drivenotes/features/notes/data/drive_service.dart';\r\n+import 'package:drivenotes/features/notes/domain/models/note_model.dart';\r\n import 'package:flutter_riverpod/flutter_riverpod.dart';\r\n-import 'package:drivenotes/features/notes/domain/models/note_model.dart';\r\n \r\n-final noteEditorControllerProvider = StateNotifierProvider.family<NoteEditorController, AsyncValue<void>, NoteModel?>((ref, note) {\r\n-  return NoteEditorController();\r\n-});\r\n+final noteEditorControllerProvider = AsyncNotifierProviderFamily<\r\n+    NoteEditorController, void, NoteModel?>(NoteEditorController.new);\r\n \r\n-class NoteEditorController extends StateNotifier<AsyncValue<void>> {\r\n-  NoteEditorController() : super(const AsyncValue.data(null));\r\n+class NoteEditorController extends FamilyAsyncNotifier<void, NoteModel?> {\r\n+  late final NoteModel? original;\r\n \r\n+  @override\r\n+  Future<void> build(NoteModel? arg) async {\r\n+    original = arg;\r\n+  }\r\n\\ No newline at end of file\n+\r\n   Future<void> save(String title, String content) async {\r\n     state = const AsyncValue.loading();\r\n     try {\r\n-      // TODO: Implement save logic\r\n+      if (original == null) {\r\n+        await DriveService.instance.createNote(title, content);\r\n+      } else {\r\n+        await DriveService.instance.updateNote(\r\n+          fileId: original!.id,\r\n+          newTitle: title,\r\n+          newContent: content,\r\n+        );\r\n+      }\r\n       state = const AsyncValue.data(null);\r\n     } catch (e, st) {\r\n       state = AsyncValue.error(e, st);\r\n     }\r\n   }\r\n-} \n+}\r\n"
                },
                {
                    "date": 1744897938396,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,17 +1,18 @@\n-import 'package:drivenotes/features/notes/data/drive_service.dart';\r\n-import 'package:drivenotes/features/notes/domain/models/note_model.dart';\r\n import 'package:flutter_riverpod/flutter_riverpod.dart';\r\n+import '../../data/note_model.dart';\r\n+import '../../../core/services/drive_service.dart';\r\n \r\n final noteEditorControllerProvider = AsyncNotifierProviderFamily<\r\n     NoteEditorController, void, NoteModel?>(NoteEditorController.new);\r\n \r\n-class NoteEditorController extends FamilyAsyncNotifier<void, NoteModel?> {\r\n-  late final NoteModel? original;\r\n+class NoteEditorController extends AsyncNotifier<void> {\r\n+  final NoteModel? original;\r\n+  NoteEditorController(this.original);\r\n \r\n   @override\r\n-  Future<void> build(NoteModel? arg) async {\r\n-    original = arg;\r\n+  Future<void> build() async {\r\n+    // nothing to preload\r\n   }\r\n \r\n   Future<void> save(String title, String content) async {\r\n     state = const AsyncValue.loading();\r\n@@ -29,5 +30,5 @@\n     } catch (e, st) {\r\n       state = AsyncValue.error(e, st);\r\n     }\r\n   }\r\n-}\n\\ No newline at end of file\n+}\r\n"
                },
                {
                    "date": 1744897948652,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n+import 'package:drivenotes/features/notes/domain/models/note_model.dart';\r\n import 'package:flutter_riverpod/flutter_riverpod.dart';\r\n-import '../../data/note_model.dart';\r\n-import '../../../core/services/drive_service.dart';\r\n \r\n+\r\n final noteEditorControllerProvider = AsyncNotifierProviderFamily<\r\n     NoteEditorController, void, NoteModel?>(NoteEditorController.new);\r\n \r\n class NoteEditorController extends AsyncNotifier<void> {\r\n"
                },
                {
                    "date": 1744897973148,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,18 +1,19 @@\n+import 'package:drivenotes/features/notes/data/drive_service.dart';\r\n import 'package:drivenotes/features/notes/domain/models/note_model.dart';\r\n import 'package:flutter_riverpod/flutter_riverpod.dart';\r\n \r\n+final noteEditorControllerProvider =\r\n+    AsyncNotifierProviderFamily<NoteEditorController, void, NoteModel?>(\r\n+      NoteEditorController.new,\r\n+    );\r\n \r\n-final noteEditorControllerProvider = AsyncNotifierProviderFamily<\r\n-    NoteEditorController, void, NoteModel?>(NoteEditorController.new);\r\n+class NoteEditorController extends FamilyAsyncNotifier<void, NoteModel?> {\r\n+  late final NoteModel? original;\r\n \r\n-class NoteEditorController extends AsyncNotifier<void> {\r\n-  final NoteModel? original;\r\n-  NoteEditorController(this.original);\r\n-\r\n   @override\r\n-  Future<void> build() async {\r\n-    // nothing to preload\r\n+  Future<void> build(NoteModel? arg) async {\r\n+    original = arg;\r\n   }\r\n \r\n   Future<void> save(String title, String content) async {\r\n     state = const AsyncValue.loading();\r\n"
                },
                {
                    "date": 1744898934086,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n import 'package:drivenotes/features/notes/data/drive_service.dart';\r\n import 'package:drivenotes/features/notes/domain/models/note_model.dart';\r\n+import 'package:drivenotes/notes_controller.dart';\r\n import 'package:flutter_riverpod/flutter_riverpod.dart';\r\n \r\n final noteEditorControllerProvider =\r\n     AsyncNotifierProviderFamily<NoteEditorController, void, NoteModel?>(\r\n@@ -26,8 +27,10 @@\n           newTitle: title,\r\n           newContent: content,\r\n         );\r\n       }\r\n+      // Refresh the notes list\r\n+      ref.invalidate(notesControllerProvider);\r\n       state = const AsyncValue.data(null);\r\n     } catch (e, st) {\r\n       state = AsyncValue.error(e, st);\r\n     }\r\n"
                },
                {
                    "date": 1744912637560,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n import 'package:drivenotes/features/notes/data/drive_service.dart';\r\n import 'package:drivenotes/features/notes/domain/models/note_model.dart';\r\n import 'package:drivenotes/notes_controller.dart';\r\n+import 'package:flutter/foundation.dart';\r\n import 'package:flutter_riverpod/flutter_riverpod.dart';\r\n \r\n final noteEditorControllerProvider =\r\n     AsyncNotifierProviderFamily<NoteEditorController, void, NoteModel?>(\r\n@@ -16,23 +17,35 @@\n     original = arg;\r\n   }\r\n \r\n   Future<void> save(String title, String content) async {\r\n+    debugPrint('NoteEditorController: Starting save...');\r\n     state = const AsyncValue.loading();\r\n+\r\n     try {\r\n       if (original == null) {\r\n+        debugPrint('NoteEditorController: Creating new note: $title');\r\n         await DriveService.instance.createNote(title, content);\r\n       } else {\r\n+        debugPrint(\r\n+          'NoteEditorController: Updating note ${original!.id} to: $title',\r\n+        );\r\n         await DriveService.instance.updateNote(\r\n           fileId: original!.id,\r\n           newTitle: title,\r\n           newContent: content,\r\n         );\r\n       }\r\n-      // Refresh the notes list\r\n-      ref.invalidate(notesControllerProvider);\r\n+\r\n+      // Force refresh the notes list\r\n+      debugPrint('NoteEditorController: Refreshing notes list...');\r\n+      await ref.refresh(notesControllerProvider.future);\r\n+\r\n+      debugPrint('NoteEditorController: Save completed successfully');\r\n       state = const AsyncValue.data(null);\r\n     } catch (e, st) {\r\n+      debugPrint('NoteEditorController: Error during save - $e');\r\n       state = AsyncValue.error(e, st);\r\n+      rethrow;\r\n     }\r\n   }\r\n }\r\n"
                },
                {
                    "date": 1744914293122,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,24 +16,29 @@\n   Future<void> build(NoteModel? arg) async {\r\n     original = arg;\r\n   }\r\n \r\n-  Future<void> save(String title, String content) async {\r\n+  Future<void> save(String title, String content, String fontFamily) async {\r\n     debugPrint('NoteEditorController: Starting save...');\r\n     state = const AsyncValue.loading();\r\n \r\n     try {\r\n       if (original == null) {\r\n         debugPrint('NoteEditorController: Creating new note: $title');\r\n-        await DriveService.instance.createNote(title, content);\r\n+        await DriveService.instance.createNote(\r\n+          title,\r\n+          content,\r\n+          fontFamily: fontFamily,\r\n+        );\r\n       } else {\r\n         debugPrint(\r\n           'NoteEditorController: Updating note ${original!.id} to: $title',\r\n         );\r\n         await DriveService.instance.updateNote(\r\n           fileId: original!.id,\r\n           newTitle: title,\r\n           newContent: content,\r\n+          fontFamily: fontFamily,\r\n         );\r\n       }\r\n \r\n       // Force refresh the notes list\r\n"
                },
                {
                    "date": 1744915132731,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,29 +16,24 @@\n   Future<void> build(NoteModel? arg) async {\r\n     original = arg;\r\n   }\r\n \r\n-  Future<void> save(String title, String content, String fontFamily) async {\r\n+  Future<void> save(String title, String content) async {\r\n     debugPrint('NoteEditorController: Starting save...');\r\n     state = const AsyncValue.loading();\r\n \r\n     try {\r\n       if (original == null) {\r\n         debugPrint('NoteEditorController: Creating new note: $title');\r\n-        await DriveService.instance.createNote(\r\n-          title,\r\n-          content,\r\n-          fontFamily: fontFamily,\r\n-        );\r\n+        await DriveService.instance.createNote(title, content);\r\n       } else {\r\n         debugPrint(\r\n           'NoteEditorController: Updating note ${original!.id} to: $title',\r\n         );\r\n         await DriveService.instance.updateNote(\r\n           fileId: original!.id,\r\n           newTitle: title,\r\n           newContent: content,\r\n-          fontFamily: fontFamily,\r\n         );\r\n       }\r\n \r\n       // Force refresh the notes list\r\n"
                },
                {
                    "date": 1744915620057,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,23 +16,32 @@\n   Future<void> build(NoteModel? arg) async {\r\n     original = arg;\r\n   }\r\n \r\n+  String _ensureTxtExtension(String title) {\r\n+    if (!title.toLowerCase().endsWith('.txt')) {\r\n+      return '$title.txt';\r\n+    }\r\n+    return title;\r\n+  }\r\n+\r\n   Future<void> save(String title, String content) async {\r\n     debugPrint('NoteEditorController: Starting save...');\r\n     state = const AsyncValue.loading();\r\n \r\n     try {\r\n+      final fileName = _ensureTxtExtension(title);\r\n+\r\n       if (original == null) {\r\n-        debugPrint('NoteEditorController: Creating new note: $title');\r\n-        await DriveService.instance.createNote(title, content);\r\n+        debugPrint('NoteEditorController: Creating new note: $fileName');\r\n+        await DriveService.instance.createNote(fileName, content);\r\n       } else {\r\n         debugPrint(\r\n-          'NoteEditorController: Updating note ${original!.id} to: $title',\r\n+          'NoteEditorController: Updating note ${original!.id} to: $fileName',\r\n         );\r\n         await DriveService.instance.updateNote(\r\n           fileId: original!.id,\r\n-          newTitle: title,\r\n+          newTitle: fileName,\r\n           newContent: content,\r\n         );\r\n       }\r\n \r\n"
                },
                {
                    "date": 1744916089908,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n import 'package:drivenotes/features/notes/data/drive_service.dart';\r\n import 'package:drivenotes/features/notes/domain/models/note_model.dart';\r\n import 'package:drivenotes/notes_controller.dart';\r\n+import 'package:drivenotes/features/notes/presentation/providers/note_save_provider.dart';\r\n import 'package:flutter/foundation.dart';\r\n import 'package:flutter_riverpod/flutter_riverpod.dart';\r\n \r\n final noteEditorControllerProvider =\r\n@@ -27,8 +28,14 @@\n   Future<void> save(String title, String content) async {\r\n     debugPrint('NoteEditorController: Starting save...');\r\n     state = const AsyncValue.loading();\r\n \r\n+    // Update save state at the start\r\n+    ref.read(noteSaveProvider.notifier).state = const NoteSaveState(\r\n+      isSaving: true,\r\n+      message: 'Saving note...',\r\n+    );\r\n+\r\n     try {\r\n       final fileName = _ensureTxtExtension(title);\r\n \r\n       if (original == null) {\r\n@@ -50,11 +57,32 @@\n       await ref.refresh(notesControllerProvider.future);\r\n \r\n       debugPrint('NoteEditorController: Save completed successfully');\r\n       state = const AsyncValue.data(null);\r\n+\r\n+      // Update save state on success\r\n+      ref.read(noteSaveProvider.notifier).state = const NoteSaveState(\r\n+        isSaving: false,\r\n+        message: 'Note saved successfully!',\r\n+      );\r\n+\r\n+      // Clear success message after delay\r\n+      Future.delayed(const Duration(seconds: 2), () {\r\n+        // Check if provider still exists before updating\r\n+        if (ref.exists(noteSaveProvider)) {\r\n+          ref.read(noteSaveProvider.notifier).state = const NoteSaveState();\r\n+        }\r\n+      });\r\n     } catch (e, st) {\r\n       debugPrint('NoteEditorController: Error during save - $e');\r\n       state = AsyncValue.error(e, st);\r\n+\r\n+      // Update save state on error\r\n+      ref.read(noteSaveProvider.notifier).state = NoteSaveState(\r\n+        isSaving: false,\r\n+        message: 'Error saving note: $e',\r\n+        isError: true,\r\n+      );\r\n       rethrow;\r\n     }\r\n   }\r\n }\r\n"
                },
                {
                    "date": 1744917288205,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,8 +36,9 @@\n     );\r\n \r\n     try {\r\n       final fileName = _ensureTxtExtension(title);\r\n+      final now = DateTime.now();\r\n \r\n       if (original == null) {\r\n         debugPrint('NoteEditorController: Creating new note: $fileName');\r\n         await DriveService.instance.createNote(fileName, content);\r\n@@ -48,8 +49,9 @@\n         await DriveService.instance.updateNote(\r\n           fileId: original!.id,\r\n           newTitle: fileName,\r\n           newContent: content,\r\n+          modifiedTime: now,\r\n         );\r\n       }\r\n \r\n       // Force refresh the notes list\r\n"
                },
                {
                    "date": 1744917313059,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,9 +40,13 @@\n       final now = DateTime.now();\r\n \r\n       if (original == null) {\r\n         debugPrint('NoteEditorController: Creating new note: $fileName');\r\n-        await DriveService.instance.createNote(fileName, content);\r\n+        await DriveService.instance.createNote(\r\n+          fileName,\r\n+          content,\r\n+          modifiedTime: now,\r\n+        );\r\n       } else {\r\n         debugPrint(\r\n           'NoteEditorController: Updating note ${original!.id} to: $fileName',\r\n         );\r\n"
                },
                {
                    "date": 1744917584449,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n import 'package:drivenotes/features/notes/data/drive_service.dart';\r\n import 'package:drivenotes/features/notes/domain/models/note_model.dart';\r\n import 'package:drivenotes/notes_controller.dart';\r\n import 'package:drivenotes/features/notes/presentation/providers/note_save_provider.dart';\r\n+import 'package:drivenotes/features/notes/presentation/providers/drive_service_provider.dart';\r\n import 'package:flutter/foundation.dart';\r\n import 'package:flutter_riverpod/flutter_riverpod.dart';\r\n \r\n final noteEditorControllerProvider =\r\n@@ -37,26 +38,18 @@\n \r\n     try {\r\n       final fileName = _ensureTxtExtension(title);\r\n       final now = DateTime.now();\r\n+      final driveService = ref.read(driveServiceProvider);\r\n \r\n       if (original == null) {\r\n         debugPrint('NoteEditorController: Creating new note: $fileName');\r\n-        await DriveService.instance.createNote(\r\n-          fileName,\r\n-          content,\r\n-          modifiedTime: now,\r\n-        );\r\n+        await driveService.createNote(fileName, content);\r\n       } else {\r\n         debugPrint(\r\n           'NoteEditorController: Updating note ${original!.id} to: $fileName',\r\n         );\r\n-        await DriveService.instance.updateNote(\r\n-          fileId: original!.id,\r\n-          newTitle: fileName,\r\n-          newContent: content,\r\n-          modifiedTime: now,\r\n-        );\r\n+        await driveService.updateNote(original!.id, fileName, content);\r\n       }\r\n \r\n       // Force refresh the notes list\r\n       debugPrint('NoteEditorController: Refreshing notes list...');\r\n"
                },
                {
                    "date": 1744917598509,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,87 +1,88 @@\n-import 'package:drivenotes/features/notes/data/drive_service.dart';\r\n-import 'package:drivenotes/features/notes/domain/models/note_model.dart';\r\n-import 'package:drivenotes/notes_controller.dart';\r\n-import 'package:drivenotes/features/notes/presentation/providers/note_save_provider.dart';\r\n-import 'package:drivenotes/features/notes/presentation/providers/drive_service_provider.dart';\r\n-import 'package:flutter/foundation.dart';\r\n-import 'package:flutter_riverpod/flutter_riverpod.dart';\r\n-\r\n-final noteEditorControllerProvider =\r\n-    AsyncNotifierProviderFamily<NoteEditorController, void, NoteModel?>(\r\n-      NoteEditorController.new,\r\n-    );\r\n-\r\n-class NoteEditorController extends FamilyAsyncNotifier<void, NoteModel?> {\r\n-  late final NoteModel? original;\r\n-\r\n-  @override\r\n-  Future<void> build(NoteModel? arg) async {\r\n-    original = arg;\r\n-  }\r\n-\r\n-  String _ensureTxtExtension(String title) {\r\n-    if (!title.toLowerCase().endsWith('.txt')) {\r\n-      return '$title.txt';\r\n-    }\r\n-    return title;\r\n-  }\r\n-\r\n-  Future<void> save(String title, String content) async {\r\n-    debugPrint('NoteEditorController: Starting save...');\r\n-    state = const AsyncValue.loading();\r\n-\r\n-    // Update save state at the start\r\n-    ref.read(noteSaveProvider.notifier).state = const NoteSaveState(\r\n-      isSaving: true,\r\n-      message: 'Saving note...',\r\n-    );\r\n-\r\n-    try {\r\n-      final fileName = _ensureTxtExtension(title);\r\n-      final now = DateTime.now();\r\n-      final driveService = ref.read(driveServiceProvider);\r\n-\r\n-      if (original == null) {\r\n-        debugPrint('NoteEditorController: Creating new note: $fileName');\r\n-        await driveService.createNote(fileName, content);\r\n-      } else {\r\n-        debugPrint(\r\n-          'NoteEditorController: Updating note ${original!.id} to: $fileName',\r\n-        );\r\n-        await driveService.updateNote(original!.id, fileName, content);\r\n-      }\r\n-\r\n-      // Force refresh the notes list\r\n-      debugPrint('NoteEditorController: Refreshing notes list...');\r\n-      await ref.refresh(notesControllerProvider.future);\r\n-\r\n-      debugPrint('NoteEditorController: Save completed successfully');\r\n-      state = const AsyncValue.data(null);\r\n-\r\n-      // Update save state on success\r\n-      ref.read(noteSaveProvider.notifier).state = const NoteSaveState(\r\n-        isSaving: false,\r\n-        message: 'Note saved successfully!',\r\n-      );\r\n-\r\n-      // Clear success message after delay\r\n-      Future.delayed(const Duration(seconds: 2), () {\r\n-        // Check if provider still exists before updating\r\n-        if (ref.exists(noteSaveProvider)) {\r\n-          ref.read(noteSaveProvider.notifier).state = const NoteSaveState();\r\n-        }\r\n-      });\r\n-    } catch (e, st) {\r\n-      debugPrint('NoteEditorController: Error during save - $e');\r\n-      state = AsyncValue.error(e, st);\r\n-\r\n-      // Update save state on error\r\n-      ref.read(noteSaveProvider.notifier).state = NoteSaveState(\r\n-        isSaving: false,\r\n-        message: 'Error saving note: $e',\r\n-        isError: true,\r\n-      );\r\n-      rethrow;\r\n-    }\r\n-  }\r\n-}\r\n+import 'package:drivenotes/features/notes/data/drive_service.dart';\n+import 'package:drivenotes/features/notes/domain/models/note_model.dart';\n+import 'package:drivenotes/notes_controller.dart';\n+import 'package:drivenotes/features/notes/presentation/providers/note_save_provider.dart';\n+import 'package:flutter/foundation.dart';\n+import 'package:flutter_riverpod/flutter_riverpod.dart';\n+\n+final noteEditorControllerProvider =\n+    AsyncNotifierProviderFamily<NoteEditorController, void, NoteModel?>(\n+      NoteEditorController.new,\n+    );\n+\n+class NoteEditorController extends FamilyAsyncNotifier<void, NoteModel?> {\n+  late final NoteModel? original;\n+\n+  @override\n+  Future<void> build(NoteModel? arg) async {\n+    original = arg;\n+  }\n+\n+  String _ensureTxtExtension(String title) {\n+    if (!title.toLowerCase().endsWith('.txt')) {\n+      return '$title.txt';\n+    }\n+    return title;\n+  }\n+\n+  Future<void> save(String title, String content) async {\n+    debugPrint('NoteEditorController: Starting save...');\n+    state = const AsyncValue.loading();\n+\n+    // Update save state at the start\n+    ref.read(noteSaveProvider.notifier).state = const NoteSaveState(\n+      isSaving: true,\n+      message: 'Saving note...',\n+    );\n+\n+    try {\n+      final fileName = _ensureTxtExtension(title);\n+\n+      if (original == null) {\n+        debugPrint('NoteEditorController: Creating new note: $fileName');\n+        await DriveService.instance.createNote(fileName, content);\n+      } else {\n+        debugPrint(\n+          'NoteEditorController: Updating note ${original!.id} to: $fileName',\n+        );\n+        await DriveService.instance.updateNote(\n+          fileId: original!.id,\n+          newTitle: fileName,\n+          newContent: content,\n+        );\n+      }\n+\n+      // Force refresh the notes list\n+      debugPrint('NoteEditorController: Refreshing notes list...');\n+      await ref.refresh(notesControllerProvider.future);\n+\n+      debugPrint('NoteEditorController: Save completed successfully');\n+      state = const AsyncValue.data(null);\n+\n+      // Update save state on success\n+      ref.read(noteSaveProvider.notifier).state = const NoteSaveState(\n+        isSaving: false,\n+        message: 'Note saved successfully!',\n+      );\n+\n+      // Clear success message after delay\n+      Future.delayed(const Duration(seconds: 2), () {\n+        // Check if provider still exists before updating\n+        if (ref.exists(noteSaveProvider)) {\n+          ref.read(noteSaveProvider.notifier).state = const NoteSaveState();\n+        }\n+      });\n+    } catch (e, st) {\n+      debugPrint('NoteEditorController: Error during save - $e');\n+      state = AsyncValue.error(e, st);\n+\n+      // Update save state on error\n+      ref.read(noteSaveProvider.notifier).state = NoteSaveState(\n+        isSaving: false,\n+        message: 'Error saving note: $e',\n+        isError: true,\n+      );\n+      rethrow;\n+    }\n+  }\n+}\n"
                },
                {
                    "date": 1744970557333,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,21 +36,29 @@\n     );\n \n     try {\n       final fileName = _ensureTxtExtension(title);\n+      final note = NoteModel.create(title: fileName, content: content);\n \n-      if (original == null) {\n-        debugPrint('NoteEditorController: Creating new note: $fileName');\n-        await DriveService.instance.createNote(fileName, content);\n-      } else {\n-        debugPrint(\n-          'NoteEditorController: Updating note ${original!.id} to: $fileName',\n-        );\n-        await DriveService.instance.updateNote(\n-          fileId: original!.id,\n-          newTitle: fileName,\n-          newContent: content,\n-        );\n+      // Save locally first\n+      await ref.read(localDatabaseProvider).insertNote(note);\n+\n+      // Try to sync to Drive if online\n+      try {\n+        if (original == null) {\n+          debugPrint('NoteEditorController: Creating new note: $fileName');\n+          await DriveService.instance.createNote(fileName, content);\n+        } else {\n+          debugPrint('NoteEditorController: Updating note ${original!.id} to: $fileName');\n+          await DriveService.instance.updateNote(\n+            fileId: original!.id,\n+            newTitle: fileName,\n+            newContent: content,\n+          );\n+        }\n+      } catch (e) {\n+        debugPrint('NoteEditorController: Note saved locally, will sync when online: $e');\n+        // Note is saved locally, will sync when online\n       }\n \n       // Force refresh the notes list\n       debugPrint('NoteEditorController: Refreshing notes list...');\n@@ -66,9 +74,8 @@\n       );\n \n       // Clear success message after delay\n       Future.delayed(const Duration(seconds: 2), () {\n-        // Check if provider still exists before updating\n         if (ref.exists(noteSaveProvider)) {\n           ref.read(noteSaveProvider.notifier).state = const NoteSaveState();\n         }\n       });\n"
                },
                {
                    "date": 1744970564181,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,14 +3,17 @@\n import 'package:drivenotes/notes_controller.dart';\n import 'package:drivenotes/features/notes/presentation/providers/note_save_provider.dart';\n import 'package:flutter/foundation.dart';\n import 'package:flutter_riverpod/flutter_riverpod.dart';\n+import 'package:drivenotes/features/notes/data/local_database.dart';\n \n final noteEditorControllerProvider =\n     AsyncNotifierProviderFamily<NoteEditorController, void, NoteModel?>(\n       NoteEditorController.new,\n     );\n \n+final localDatabaseProvider = Provider<LocalDatabase>((ref) => LocalDatabase());\n+\n class NoteEditorController extends FamilyAsyncNotifier<void, NoteModel?> {\n   late final NoteModel? original;\n \n   @override\n@@ -47,17 +50,21 @@\n         if (original == null) {\n           debugPrint('NoteEditorController: Creating new note: $fileName');\n           await DriveService.instance.createNote(fileName, content);\n         } else {\n-          debugPrint('NoteEditorController: Updating note ${original!.id} to: $fileName');\n+          debugPrint(\n+            'NoteEditorController: Updating note ${original!.id} to: $fileName',\n+          );\n           await DriveService.instance.updateNote(\n             fileId: original!.id,\n             newTitle: fileName,\n             newContent: content,\n           );\n         }\n       } catch (e) {\n-        debugPrint('NoteEditorController: Note saved locally, will sync when online: $e');\n+        debugPrint(\n+          'NoteEditorController: Note saved locally, will sync when online: $e',\n+        );\n         // Note is saved locally, will sync when online\n       }\n \n       // Force refresh the notes list\n"
                },
                {
                    "date": 1744971455290,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,21 +1,17 @@\n-import 'package:drivenotes/features/notes/data/drive_service.dart';\n+import 'package:drivenotes/features/notes/data/local_database.dart';\n import 'package:drivenotes/features/notes/domain/models/note_model.dart';\n-import 'package:drivenotes/notes_controller.dart';\n-import 'package:drivenotes/features/notes/presentation/providers/note_save_provider.dart';\n import 'package:flutter/foundation.dart';\n import 'package:flutter_riverpod/flutter_riverpod.dart';\n-import 'package:drivenotes/features/notes/data/local_database.dart';\n \n final noteEditorControllerProvider =\n     AsyncNotifierProviderFamily<NoteEditorController, void, NoteModel?>(\n       NoteEditorController.new,\n     );\n \n-final localDatabaseProvider = Provider<LocalDatabase>((ref) => LocalDatabase());\n-\n class NoteEditorController extends FamilyAsyncNotifier<void, NoteModel?> {\n   late final NoteModel? original;\n+  final _localDatabase = LocalDatabase.instance;\n \n   @override\n   Future<void> build(NoteModel? arg) async {\n     original = arg;\n@@ -31,72 +27,20 @@\n   Future<void> save(String title, String content) async {\n     debugPrint('NoteEditorController: Starting save...');\n     state = const AsyncValue.loading();\n \n-    // Update save state at the start\n-    ref.read(noteSaveProvider.notifier).state = const NoteSaveState(\n-      isSaving: true,\n-      message: 'Saving note...',\n-    );\n-\n     try {\n       final fileName = _ensureTxtExtension(title);\n       final note = NoteModel.create(title: fileName, content: content);\n \n-      // Save locally first\n-      await ref.read(localDatabaseProvider).insertNote(note);\n+      // Save locally\n+      await _localDatabase.insertNote(note);\n \n-      // Try to sync to Drive if online\n-      try {\n-        if (original == null) {\n-          debugPrint('NoteEditorController: Creating new note: $fileName');\n-          await DriveService.instance.createNote(fileName, content);\n-        } else {\n-          debugPrint(\n-            'NoteEditorController: Updating note ${original!.id} to: $fileName',\n-          );\n-          await DriveService.instance.updateNote(\n-            fileId: original!.id,\n-            newTitle: fileName,\n-            newContent: content,\n-          );\n-        }\n-      } catch (e) {\n-        debugPrint(\n-          'NoteEditorController: Note saved locally, will sync when online: $e',\n-        );\n-        // Note is saved locally, will sync when online\n-      }\n-\n-      // Force refresh the notes list\n-      debugPrint('NoteEditorController: Refreshing notes list...');\n-      await ref.refresh(notesControllerProvider.future);\n-\n       debugPrint('NoteEditorController: Save completed successfully');\n       state = const AsyncValue.data(null);\n-\n-      // Update save state on success\n-      ref.read(noteSaveProvider.notifier).state = const NoteSaveState(\n-        isSaving: false,\n-        message: 'Note saved successfully!',\n-      );\n-\n-      // Clear success message after delay\n-      Future.delayed(const Duration(seconds: 2), () {\n-        if (ref.exists(noteSaveProvider)) {\n-          ref.read(noteSaveProvider.notifier).state = const NoteSaveState();\n-        }\n-      });\n     } catch (e, st) {\n       debugPrint('NoteEditorController: Error during save - $e');\n       state = AsyncValue.error(e, st);\n-\n-      // Update save state on error\n-      ref.read(noteSaveProvider.notifier).state = NoteSaveState(\n-        isSaving: false,\n-        message: 'Error saving note: $e',\n-        isError: true,\n-      );\n       rethrow;\n     }\n   }\n }\n"
                },
                {
                    "date": 1744971478624,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,17 +1,21 @@\n-import 'package:drivenotes/features/notes/data/local_database.dart';\n+import 'package:drivenotes/features/notes/data/drive_service.dart';\n import 'package:drivenotes/features/notes/domain/models/note_model.dart';\n+import 'package:drivenotes/notes_controller.dart';\n+import 'package:drivenotes/features/notes/presentation/providers/note_save_provider.dart';\n import 'package:flutter/foundation.dart';\n import 'package:flutter_riverpod/flutter_riverpod.dart';\n+import 'package:drivenotes/features/notes/data/local_database.dart';\n \n final noteEditorControllerProvider =\n     AsyncNotifierProviderFamily<NoteEditorController, void, NoteModel?>(\n       NoteEditorController.new,\n     );\n \n+final localDatabaseProvider = Provider<LocalDatabase>((ref) => LocalDatabase());\n+\n class NoteEditorController extends FamilyAsyncNotifier<void, NoteModel?> {\n   late final NoteModel? original;\n-  final _localDatabase = LocalDatabase.instance;\n \n   @override\n   Future<void> build(NoteModel? arg) async {\n     original = arg;\n@@ -27,20 +31,72 @@\n   Future<void> save(String title, String content) async {\n     debugPrint('NoteEditorController: Starting save...');\n     state = const AsyncValue.loading();\n \n+    // Update save state at the start\n+    ref.read(noteSaveProvider.notifier).state = const NoteSaveState(\n+      isSaving: true,\n+      message: 'Saving note...',\n+    );\n+\n     try {\n       final fileName = _ensureTxtExtension(title);\n       final note = NoteModel.create(title: fileName, content: content);\n \n-      // Save locally\n-      await _localDatabase.insertNote(note);\n+      // Save locally first\n+      await ref.read(localDatabaseProvider).insertNote(note);\n \n+      // Try to sync to Drive if online\n+      try {\n+        if (original == null) {\n+          debugPrint('NoteEditorController: Creating new note: $fileName');\n+          await DriveService.instance.createNote(fileName, content);\n+        } else {\n+          debugPrint(\n+            'NoteEditorController: Updating note ${original!.id} to: $fileName',\n+          );\n+          await DriveService.instance.updateNote(\n+            fileId: original!.id,\n+            newTitle: fileName,\n+            newContent: content,\n+          );\n+        }\n+      } catch (e) {\n+        debugPrint(\n+          'NoteEditorController: Note saved locally, will sync when online: $e',\n+        );\n+        // Note is saved locally, will sync when online\n+      }\n+\n+      // Force refresh the notes list\n+      debugPrint('NoteEditorController: Refreshing notes list...');\n+      await ref.refresh(notesControllerProvider.future);\n+\n       debugPrint('NoteEditorController: Save completed successfully');\n       state = const AsyncValue.data(null);\n+\n+      // Update save state on success\n+      ref.read(noteSaveProvider.notifier).state = const NoteSaveState(\n+        isSaving: false,\n+        message: 'Note saved successfully!',\n+      );\n+\n+      // Clear success message after delay\n+      Future.delayed(const Duration(seconds: 2), () {\n+        if (ref.exists(noteSaveProvider)) {\n+          ref.read(noteSaveProvider.notifier).state = const NoteSaveState();\n+        }\n+      });\n     } catch (e, st) {\n       debugPrint('NoteEditorController: Error during save - $e');\n       state = AsyncValue.error(e, st);\n+\n+      // Update save state on error\n+      ref.read(noteSaveProvider.notifier).state = NoteSaveState(\n+        isSaving: false,\n+        message: 'Error saving note: $e',\n+        isError: true,\n+      );\n       rethrow;\n     }\n   }\n }\n"
                },
                {
                    "date": 1744971535548,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,22 +49,20 @@\n       try {\n         if (original == null) {\n           debugPrint('NoteEditorController: Creating new note: $fileName');\n           await DriveService.instance.createNote(fileName, content);\n+          // Mark as synced\n+          await ref.read(localDatabaseProvider).markNoteAsSynced(note.id, note.id);\n         } else {\n-          debugPrint(\n-            'NoteEditorController: Updating note ${original!.id} to: $fileName',\n-          );\n+          debugPrint('NoteEditorController: Updating note ${original!.id} to: $fileName');\n           await DriveService.instance.updateNote(\n             fileId: original!.id,\n             newTitle: fileName,\n             newContent: content,\n           );\n         }\n       } catch (e) {\n-        debugPrint(\n-          'NoteEditorController: Note saved locally, will sync when online: $e',\n-        );\n+        debugPrint('NoteEditorController: Note saved locally, will sync when online: $e');\n         // Note is saved locally, will sync when online\n       }\n \n       // Force refresh the notes list\n"
                }
            ],
            "date": 1744897311575,
            "name": "Commit-0",
            "content": "import 'package:flutter_riverpod/flutter_riverpod.dart';\r\nimport 'package:drivenotes/features/notes/domain/models/note_model.dart';\r\n\r\nfinal noteEditorControllerProvider = StateNotifierProvider.family<NoteEditorController, AsyncValue<void>, NoteModel?>((ref, note) {\r\n  return NoteEditorController();\r\n});\r\n\r\nclass NoteEditorController extends StateNotifier<AsyncValue<void>> {\r\n  NoteEditorController() : super(const AsyncValue.data(null));\r\n\r\n  Future<void> save(String title, String content) async {\r\n    state = const AsyncValue.loading();\r\n    try {\r\n      // TODO: Implement save logic\r\n      state = const AsyncValue.data(null);\r\n    } catch (e, st) {\r\n      state = AsyncValue.error(e, st);\r\n    }\r\n  }\r\n} "
        }
    ]
}