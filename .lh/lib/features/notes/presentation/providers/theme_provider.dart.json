{
    "sourceFile": "lib/features/notes/presentation/providers/theme_provider.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 13,
            "patches": [
                {
                    "date": 1744916608278,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1744917688985,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,23 +13,40 @@\n \r\n   final _storage = const FlutterSecureStorage();\r\n \r\n   Future<void> _loadTheme() async {\r\n-    final savedTheme = await _storage.read(key: 'theme_mode');\r\n-    if (savedTheme != null) {\r\n-      state = ThemeMode.values.firstWhere(\r\n-        (e) => e.toString() == savedTheme,\r\n-        orElse: () => ThemeMode.system,\r\n-      );\r\n+    try {\r\n+      final savedTheme = await _storage.read(key: 'theme_mode');\r\n+      if (savedTheme != null) {\r\n+        final themeMode = ThemeMode.values.firstWhere(\r\n+          (e) => e.toString() == savedTheme,\r\n+          orElse: () => ThemeMode.system,\r\n+        );\r\n+        if (mounted) state = themeMode;\r\n+      }\r\n+    } catch (e) {\r\n+      debugPrint('Error loading theme: $e');\r\n     }\r\n   }\r\n\\ No newline at end of file\n \r\n   Future<void> toggleTheme() async {\r\n-    state = state == ThemeMode.dark ? ThemeMode.light : ThemeMode.dark;\r\n-    await _storage.write(key: 'theme_mode', value: state.toString());\r\n+    try {\r\n+      state = state == ThemeMode.dark ? ThemeMode.light : ThemeMode.dark;\r\n+      await _storage.write(key: 'theme_mode', value: state.toString());\r\n+    } catch (e) {\r\n+      debugPrint('Error toggling theme: $e');\r\n+      // Revert state if storage fails\r\n+      state = state == ThemeMode.dark ? ThemeMode.light : ThemeMode.dark;\r\n+    }\r\n   }\r\n \r\n   Future<void> setTheme(ThemeMode mode) async {\r\n-    state = mode;\r\n-    await _storage.write(key: 'theme_mode', value: state.toString());\r\n+    try {\r\n+      state = mode;\r\n+      await _storage.write(key: 'theme_mode', value: state.toString());\r\n+    } catch (e) {\r\n+      debugPrint('Error setting theme: $e');\r\n+      // Revert to previous state if storage fails\r\n+      state = state == ThemeMode.dark ? ThemeMode.light : ThemeMode.dark;\r\n+    }\r\n   }\r\n-} \n+}\r\n"
                },
                {
                    "date": 1744917982971,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,52 +1,35 @@\n-import 'package:flutter/material.dart';\r\n-import 'package:flutter_riverpod/flutter_riverpod.dart';\r\n-import 'package:flutter_secure_storage/flutter_secure_storage.dart';\r\n-\r\n-final themeProvider = StateNotifierProvider<ThemeNotifier, ThemeMode>((ref) {\r\n-  return ThemeNotifier();\r\n-});\r\n-\r\n-class ThemeNotifier extends StateNotifier<ThemeMode> {\r\n-  ThemeNotifier() : super(ThemeMode.system) {\r\n-    _loadTheme();\r\n-  }\r\n-\r\n-  final _storage = const FlutterSecureStorage();\r\n-\r\n-  Future<void> _loadTheme() async {\r\n-    try {\r\n-      final savedTheme = await _storage.read(key: 'theme_mode');\r\n-      if (savedTheme != null) {\r\n-        final themeMode = ThemeMode.values.firstWhere(\r\n-          (e) => e.toString() == savedTheme,\r\n-          orElse: () => ThemeMode.system,\r\n-        );\r\n-        if (mounted) state = themeMode;\r\n-      }\r\n-    } catch (e) {\r\n-      debugPrint('Error loading theme: $e');\r\n-    }\r\n-  }\r\n-\r\n-  Future<void> toggleTheme() async {\r\n-    try {\r\n-      state = state == ThemeMode.dark ? ThemeMode.light : ThemeMode.dark;\r\n-      await _storage.write(key: 'theme_mode', value: state.toString());\r\n-    } catch (e) {\r\n-      debugPrint('Error toggling theme: $e');\r\n-      // Revert state if storage fails\r\n-      state = state == ThemeMode.dark ? ThemeMode.light : ThemeMode.dark;\r\n-    }\r\n-  }\r\n-\r\n-  Future<void> setTheme(ThemeMode mode) async {\r\n-    try {\r\n-      state = mode;\r\n-      await _storage.write(key: 'theme_mode', value: state.toString());\r\n-    } catch (e) {\r\n-      debugPrint('Error setting theme: $e');\r\n-      // Revert to previous state if storage fails\r\n-      state = state == ThemeMode.dark ? ThemeMode.light : ThemeMode.dark;\r\n-    }\r\n-  }\r\n-}\n\\ No newline at end of file\n+import 'package:flutter/material.dart';\n+import 'package:flutter_riverpod/flutter_riverpod.dart';\n+import 'package:flutter_secure_storage/flutter_secure_storage.dart';\n+\n+final themeProvider = StateNotifierProvider<ThemeNotifier, ThemeMode>((ref) {\n+  return ThemeNotifier();\n+});\n+\n+class ThemeNotifier extends StateNotifier<ThemeMode> {\n+  ThemeNotifier() : super(ThemeMode.system) {\n+    _loadTheme();\n+  }\n+\n+  final _storage = const FlutterSecureStorage();\n+\n+  Future<void> _loadTheme() async {\n+    final savedTheme = await _storage.read(key: 'theme_mode');\n+    if (savedTheme != null) {\n+      state = ThemeMode.values.firstWhere(\n+        (e) => e.toString() == savedTheme,\n+        orElse: () => ThemeMode.system,\n+      );\n+    }\n+  }\n+\n+  Future<void> toggleTheme() async {\n+    state = state == ThemeMode.dark ? ThemeMode.light : ThemeMode.dark;\n+    await _storage.write(key: 'theme_mode', value: state.toString());\n+  }\n+\n+  Future<void> setTheme(ThemeMode mode) async {\n+    state = mode;\n+    await _storage.write(key: 'theme_mode', value: state.toString());\n+  }\n+}\n"
                },
                {
                    "date": 1744918107850,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,23 +13,39 @@\n \n   final _storage = const FlutterSecureStorage();\n \n   Future<void> _loadTheme() async {\n-    final savedTheme = await _storage.read(key: 'theme_mode');\n-    if (savedTheme != null) {\n-      state = ThemeMode.values.firstWhere(\n-        (e) => e.toString() == savedTheme,\n-        orElse: () => ThemeMode.system,\n-      );\n+    try {\n+      final savedTheme = await _storage.read(key: 'theme_mode');\n+      if (savedTheme != null) {\n+        state = ThemeMode.values.firstWhere(\n+          (e) => e.toString() == savedTheme,\n+          orElse: () => ThemeMode.system,\n+        );\n+      }\n+    } catch (e) {\n+      debugPrint('Error loading theme: $e');\n+      state = ThemeMode.system;\n     }\n   }\n \n   Future<void> toggleTheme() async {\n-    state = state == ThemeMode.dark ? ThemeMode.light : ThemeMode.dark;\n-    await _storage.write(key: 'theme_mode', value: state.toString());\n+    try {\n+      final newTheme = state == ThemeMode.dark ? ThemeMode.light : ThemeMode.dark;\n+      state = newTheme;\n+      await _storage.write(key: 'theme_mode', value: newTheme.toString());\n+    } catch (e) {\n+      debugPrint('Error toggling theme: $e');\n+      state = ThemeMode.system;\n+    }\n   }\n \n   Future<void> setTheme(ThemeMode mode) async {\n-    state = mode;\n-    await _storage.write(key: 'theme_mode', value: state.toString());\n+    try {\n+      state = mode;\n+      await _storage.write(key: 'theme_mode', value: mode.toString());\n+    } catch (e) {\n+      debugPrint('Error setting theme: $e');\n+      state = ThemeMode.system;\n+    }\n   }\n }\n"
                },
                {
                    "date": 1744918310843,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,51 +1,35 @@\n import 'package:flutter/material.dart';\n import 'package:flutter_riverpod/flutter_riverpod.dart';\n import 'package:flutter_secure_storage/flutter_secure_storage.dart';\n \n-final themeProvider = StateNotifierProvider<ThemeNotifier, ThemeMode>((ref) {\n-  return ThemeNotifier();\n+// Simple provider for current theme mode\n+final themeProvider = StateProvider<ThemeMode>((ref) => ThemeMode.system);\n+\n+// Provider for theme persistence\n+final themePersistenceProvider = Provider<ThemePersistence>((ref) {\n+  return ThemePersistence();\n });\n \n-class ThemeNotifier extends StateNotifier<ThemeMode> {\n-  ThemeNotifier() : super(ThemeMode.system) {\n-    _loadTheme();\n+class ThemePersistence {\n+  final _storage = const FlutterSecureStorage();\n+  final _themeKey = 'theme_mode';\n+\n+  Future<void> saveTheme(ThemeMode mode) async {\n+    await _storage.write(key: _themeKey, value: mode.toString());\n   }\n \n-  final _storage = const FlutterSecureStorage();\n-\n-  Future<void> _loadTheme() async {\n+  Future<ThemeMode> loadTheme() async {\n     try {\n-      final savedTheme = await _storage.read(key: 'theme_mode');\n+      final savedTheme = await _storage.read(key: _themeKey);\n       if (savedTheme != null) {\n-        state = ThemeMode.values.firstWhere(\n+        return ThemeMode.values.firstWhere(\n           (e) => e.toString() == savedTheme,\n           orElse: () => ThemeMode.system,\n         );\n       }\n     } catch (e) {\n       debugPrint('Error loading theme: $e');\n-      state = ThemeMode.system;\n     }\n+    return ThemeMode.system;\n   }\n-\n-  Future<void> toggleTheme() async {\n-    try {\n-      final newTheme = state == ThemeMode.dark ? ThemeMode.light : ThemeMode.dark;\n-      state = newTheme;\n-      await _storage.write(key: 'theme_mode', value: newTheme.toString());\n-    } catch (e) {\n-      debugPrint('Error toggling theme: $e');\n-      state = ThemeMode.system;\n-    }\n-  }\n-\n-  Future<void> setTheme(ThemeMode mode) async {\n-    try {\n-      state = mode;\n-      await _storage.write(key: 'theme_mode', value: mode.toString());\n-    } catch (e) {\n-      debugPrint('Error setting theme: $e');\n-      state = ThemeMode.system;\n-    }\n-  }\n }\n"
                },
                {
                    "date": 1744918480232,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,35 +1,35 @@\n import 'package:flutter/material.dart';\n import 'package:flutter_riverpod/flutter_riverpod.dart';\n import 'package:flutter_secure_storage/flutter_secure_storage.dart';\n \n-// Simple provider for current theme mode\n-final themeProvider = StateProvider<ThemeMode>((ref) => ThemeMode.system);\n-\n-// Provider for theme persistence\n-final themePersistenceProvider = Provider<ThemePersistence>((ref) {\n-  return ThemePersistence();\n+final themeProvider = StateNotifierProvider<ThemeNotifier, ThemeMode>((ref) {\n+  return ThemeNotifier();\n });\n \n-class ThemePersistence {\n+class ThemeNotifier extends StateNotifier<ThemeMode> {\n+  ThemeNotifier() : super(ThemeMode.system) {\n+    _loadTheme();\n+  }\n+\n   final _storage = const FlutterSecureStorage();\n-  final _themeKey = 'theme_mode';\n \n-  Future<void> saveTheme(ThemeMode mode) async {\n-    await _storage.write(key: _themeKey, value: mode.toString());\n+  Future<void> _loadTheme() async {\n+    final savedTheme = await _storage.read(key: 'theme_mode');\n+    if (savedTheme != null) {\n+      state = ThemeMode.values.firstWhere(\n+        (e) => e.toString() == savedTheme,\n+        orElse: () => ThemeMode.system,\n+      );\n+    }\n   }\n \n-  Future<ThemeMode> loadTheme() async {\n-    try {\n-      final savedTheme = await _storage.read(key: _themeKey);\n-      if (savedTheme != null) {\n-        return ThemeMode.values.firstWhere(\n-          (e) => e.toString() == savedTheme,\n-          orElse: () => ThemeMode.system,\n-        );\n-      }\n-    } catch (e) {\n-      debugPrint('Error loading theme: $e');\n-    }\n-    return ThemeMode.system;\n+  Future<void> toggleTheme() async {\n+    state = state == ThemeMode.dark ? ThemeMode.light : ThemeMode.dark;\n+    await _storage.write(key: 'theme_mode', value: state.toString());\n   }\n+\n+  Future<void> setTheme(ThemeMode mode) async {\n+    state = mode;\n+    await _storage.write(key: 'theme_mode', value: state.toString());\n+  }\n }\n"
                },
                {
                    "date": 1744918524751,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,25 +11,41 @@\n     _loadTheme();\n   }\n \n   final _storage = const FlutterSecureStorage();\n+  static const _themeKey = 'theme_mode';\n \n   Future<void> _loadTheme() async {\n-    final savedTheme = await _storage.read(key: 'theme_mode');\n-    if (savedTheme != null) {\n-      state = ThemeMode.values.firstWhere(\n-        (e) => e.toString() == savedTheme,\n-        orElse: () => ThemeMode.system,\n+    try {\n+      final savedTheme = await _storage.read(key: _themeKey);\n+      if (savedTheme != null) {\n+        final themeMode = ThemeMode.values.firstWhere(\n+          (mode) => mode.toString() == savedTheme,\n+          orElse: () => ThemeMode.system,\n+        );\n+        state = themeMode;\n+      }\n+    } catch (e) {\n+      debugPrint('Error loading theme: $e');\n+      state = ThemeMode.system;\n+    }\n+  }\n+\n+  Future<void> setTheme(ThemeMode mode) async {\n+    try {\n+      state = mode;\n+      await _storage.write(\n+        key: _themeKey,\n+        value: mode.toString(),\n       );\n+    } catch (e) {\n+      debugPrint('Error saving theme: $e');\n+      // Revert state if save fails\n+      state = ThemeMode.system;\n     }\n   }\n \n   Future<void> toggleTheme() async {\n-    state = state == ThemeMode.dark ? ThemeMode.light : ThemeMode.dark;\n-    await _storage.write(key: 'theme_mode', value: state.toString());\n+    final newMode = state == ThemeMode.dark ? ThemeMode.light : ThemeMode.dark;\n+    await setTheme(newMode);\n   }\n-\n-  Future<void> setTheme(ThemeMode mode) async {\n-    state = mode;\n-    await _storage.write(key: 'theme_mode', value: state.toString());\n-  }\n }\n"
                },
                {
                    "date": 1744918727807,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,15 +32,12 @@\n \n   Future<void> setTheme(ThemeMode mode) async {\n     try {\n       state = mode;\n-      await _storage.write(\n-        key: _themeKey,\n-        value: mode.toString(),\n-      );\n+      await _storage.write(key: _themeKey, value: mode.toString());\n     } catch (e) {\n       debugPrint('Error saving theme: $e');\n-      // Revert state if save fails\n+      // Fallback\n       state = ThemeMode.system;\n     }\n   }\n \n"
                },
                {
                    "date": 1744918882324,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,49 @@\n+// lib/features/notes/presentation/providers/theme_provider.dart\n+import 'package:flutter/material.dart';\n+import 'package:flutter_riverpod/flutter_riverpod.dart';\n+import 'package:flutter_secure_storage/flutter_secure_storage.dart';\n+\n+final themeProvider = StateNotifierProvider<ThemeNotifier, ThemeMode>((ref) {\n+  return ThemeNotifier();\n+});\n+\n+class ThemeNotifier extends StateNotifier<ThemeMode> {\n+  ThemeNotifier() : super(ThemeMode.system) {\n+    _loadTheme();\n+  }\n+  \n+  final _storage = const FlutterSecureStorage();\n+  static const _themeKey = 'theme_mode';\n+  \n+  Future<void> _loadTheme() async {\n+    try {\n+      final savedTheme = await _storage.read(key: _themeKey);\n+      if (savedTheme != null) {\n+        final themeMode = ThemeMode.values.firstWhere(\n+          (mode) => mode.toString() == savedTheme,\n+          orElse: () => ThemeMode.system,\n+        );\n+        state = themeMode;\n+      }\n+    } catch (e) {\n+      debugPrint('Error loading theme: $e');\n+      state = ThemeMode.system;\n+    }\n+  }\n+  \n+  Future<void> setTheme(ThemeMode mode) async {\n+    try {\n+      state = mode;\n+      await _storage.write(key: _themeKey, value: mode.toString());\n+    } catch (e) {\n+      debugPrint('Error saving theme: $e');\n+      // Fallback\n+      state = ThemeMode.system;\n+    }\n+  }\n+  \n+  Future<void> toggleTheme() async {\n+    final newMode = state == ThemeMode.dark ? ThemeMode.light : ThemeMode.dark;\n+    await setTheme(newMode);\n+  }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1744918965170,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,4 @@\n-// lib/features/notes/presentation/providers/theme_provider.dart\n import 'package:flutter/material.dart';\n import 'package:flutter_riverpod/flutter_riverpod.dart';\n import 'package:flutter_secure_storage/flutter_secure_storage.dart';\n \n@@ -11,87 +10,68 @@\n   ThemeNotifier() : super(ThemeMode.system) {\n     _loadTheme();\n   }\n   \n-  final _storage = const FlutterSecureStorage();\n+  // Use a nullable storage to avoid initialization errors\n+  final FlutterSecureStorage? _storage = const FlutterSecureStorage();\n   static const _themeKey = 'theme_mode';\n   \n   Future<void> _loadTheme() async {\n     try {\n-      final savedTheme = await _storage.read(key: _themeKey);\n+      // Add null check for _storage\n+      final storage = _storage;\n+      if (storage == null) {\n+        debugPrint('Storage is null during theme loading');\n+        return;\n+      }\n+      \n+      final savedTheme = await storage.read(key: _themeKey);\n       if (savedTheme != null) {\n-        final themeMode = ThemeMode.values.firstWhere(\n-          (mode) => mode.toString() == savedTheme,\n-          orElse: () => ThemeMode.system,\n-        );\n+        // Parse the saved theme string safely\n+        ThemeMode? themeMode;\n+        try {\n+          themeMode = ThemeMode.values.firstWhere(\n+            (mode) => mode.toString() == savedTheme,\n+            orElse: () => ThemeMode.system,\n+          );\n+        } catch (e) {\n+          debugPrint('Error parsing theme: $e');\n+          themeMode = ThemeMode.system;\n+        }\n+        \n         state = themeMode;\n       }\n     } catch (e) {\n       debugPrint('Error loading theme: $e');\n+      // Fallback to system theme on error\n       state = ThemeMode.system;\n     }\n   }\n   \n   Future<void> setTheme(ThemeMode mode) async {\n     try {\n+      // Set state first to update UI immediately\n       state = mode;\n-      await _storage.write(key: _themeKey, value: mode.toString());\n+      \n+      // Add null check for _storage\n+      final storage = _storage;\n+      if (storage == null) {\n+        debugPrint('Storage is null during theme saving');\n+        return;\n+      }\n+      \n+      // Save theme after state update\n+      await storage.write(key: _themeKey, value: mode.toString());\n+      debugPrint('Theme saved successfully: ${mode.toString()}');\n     } catch (e) {\n       debugPrint('Error saving theme: $e');\n-      // Fallback\n-      state = ThemeMode.system;\n+      // No need to revert state, as the UI is already updated\n     }\n   }\n   \n   Future<void> toggleTheme() async {\n-    final newMode = state == ThemeMode.dark ? ThemeMode.light : ThemeMode.dark;\n+    // Get current theme with null safety\n+    final currentTheme = state;\n+    final newMode = currentTheme == ThemeMode.dark ? ThemeMode.light : ThemeMode.dark;\n     await setTheme(newMode);\n   }\n-}\n-import 'package:flutter/material.dart';\n-import 'package:flutter_riverpod/flutter_riverpod.dart';\n-import 'package:flutter_secure_storage/flutter_secure_storage.dart';\n-\n-final themeProvider = StateNotifierProvider<ThemeNotifier, ThemeMode>((ref) {\n-  return ThemeNotifier();\n-});\n-\n-class ThemeNotifier extends StateNotifier<ThemeMode> {\n-  ThemeNotifier() : super(ThemeMode.system) {\n-    _loadTheme();\n-  }\n-\n-  final _storage = const FlutterSecureStorage();\n-  static const _themeKey = 'theme_mode';\n-\n-  Future<void> _loadTheme() async {\n-    try {\n-      final savedTheme = await _storage.read(key: _themeKey);\n-      if (savedTheme != null) {\n-        final themeMode = ThemeMode.values.firstWhere(\n-          (mode) => mode.toString() == savedTheme,\n-          orElse: () => ThemeMode.system,\n-        );\n-        state = themeMode;\n-      }\n-    } catch (e) {\n-      debugPrint('Error loading theme: $e');\n-      state = ThemeMode.system;\n-    }\n-  }\n-\n-  Future<void> setTheme(ThemeMode mode) async {\n-    try {\n-      state = mode;\n-      await _storage.write(key: _themeKey, value: mode.toString());\n-    } catch (e) {\n-      debugPrint('Error saving theme: $e');\n-      // Fallback\n-      state = ThemeMode.system;\n-    }\n-  }\n-\n-  Future<void> toggleTheme() async {\n-    final newMode = state == ThemeMode.dark ? ThemeMode.light : ThemeMode.dark;\n-    await setTheme(newMode);\n-  }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1744919247369,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,71 +7,79 @@\n });\n \n class ThemeNotifier extends StateNotifier<ThemeMode> {\n   ThemeNotifier() : super(ThemeMode.system) {\n+    debugPrint('ThemeNotifier: Initialized with ThemeMode.system');\n     _loadTheme();\n   }\n-  \n+\n   // Use a nullable storage to avoid initialization errors\n   final FlutterSecureStorage? _storage = const FlutterSecureStorage();\n   static const _themeKey = 'theme_mode';\n-  \n+\n   Future<void> _loadTheme() async {\n     try {\n-      // Add null check for _storage\n+      debugPrint('ThemeNotifier: Loading theme from storage...');\n       final storage = _storage;\n       if (storage == null) {\n-        debugPrint('Storage is null during theme loading');\n+        debugPrint('ThemeNotifier: Storage is null during theme loading');\n         return;\n       }\n-      \n+\n       final savedTheme = await storage.read(key: _themeKey);\n+      debugPrint('ThemeNotifier: Saved theme from storage: $savedTheme');\n+\n       if (savedTheme != null) {\n         // Parse the saved theme string safely\n         ThemeMode? themeMode;\n         try {\n           themeMode = ThemeMode.values.firstWhere(\n             (mode) => mode.toString() == savedTheme,\n             orElse: () => ThemeMode.system,\n           );\n+          debugPrint('ThemeNotifier: Parsed theme mode: $themeMode');\n         } catch (e) {\n-          debugPrint('Error parsing theme: $e');\n+          debugPrint('ThemeNotifier: Error parsing theme: $e');\n           themeMode = ThemeMode.system;\n         }\n-        \n+\n+        debugPrint('ThemeNotifier: Setting state to: $themeMode');\n         state = themeMode;\n       }\n     } catch (e) {\n-      debugPrint('Error loading theme: $e');\n+      debugPrint('ThemeNotifier: Error loading theme: $e');\n       // Fallback to system theme on error\n       state = ThemeMode.system;\n     }\n   }\n-  \n+\n   Future<void> setTheme(ThemeMode mode) async {\n     try {\n-      // Set state first to update UI immediately\n+      debugPrint('ThemeNotifier: Setting theme to: $mode');\n       state = mode;\n-      \n+\n       // Add null check for _storage\n       final storage = _storage;\n       if (storage == null) {\n-        debugPrint('Storage is null during theme saving');\n+        debugPrint('ThemeNotifier: Storage is null during theme saving');\n         return;\n       }\n\\ No newline at end of file\n-      \n+\n       // Save theme after state update\n       await storage.write(key: _themeKey, value: mode.toString());\n-      debugPrint('Theme saved successfully: ${mode.toString()}');\n+      debugPrint('ThemeNotifier: Theme saved successfully: ${mode.toString()}');\n     } catch (e) {\n-      debugPrint('Error saving theme: $e');\n+      debugPrint('ThemeNotifier: Error saving theme: $e');\n       // No need to revert state, as the UI is already updated\n     }\n   }\n-  \n+\n   Future<void> toggleTheme() async {\n     // Get current theme with null safety\n     final currentTheme = state;\n-    final newMode = currentTheme == ThemeMode.dark ? ThemeMode.light : ThemeMode.dark;\n+    debugPrint('ThemeNotifier: Current theme before toggle: $currentTheme');\n+    final newMode =\n+        currentTheme == ThemeMode.dark ? ThemeMode.light : ThemeMode.dark;\n+    debugPrint('ThemeNotifier: Toggling to new theme: $newMode');\n     await setTheme(newMode);\n   }\n-}\n+}\n"
                },
                {
                    "date": 1744919282692,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -81,5 +81,5 @@\n         currentTheme == ThemeMode.dark ? ThemeMode.light : ThemeMode.dark;\n     debugPrint('ThemeNotifier: Toggling to new theme: $newMode');\n     await setTheme(newMode);\n   }\n-}\n\\ No newline at end of file\n+}\n"
                },
                {
                    "date": 1744919496273,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,8 @@\n });\n \n class ThemeNotifier extends StateNotifier<ThemeMode> {\n   ThemeNotifier() : super(ThemeMode.system) {\n-    debugPrint('ThemeNotifier: Initialized with ThemeMode.system');\n     _loadTheme();\n   }\n \n   // Use a nullable storage to avoid initialization errors\n@@ -17,69 +16,63 @@\n   static const _themeKey = 'theme_mode';\n \n   Future<void> _loadTheme() async {\n     try {\n-      debugPrint('ThemeNotifier: Loading theme from storage...');\n+      // Add null check for _storage\n       final storage = _storage;\n       if (storage == null) {\n-        debugPrint('ThemeNotifier: Storage is null during theme loading');\n+        debugPrint('Storage is null during theme loading');\n         return;\n       }\n \n       final savedTheme = await storage.read(key: _themeKey);\n-      debugPrint('ThemeNotifier: Saved theme from storage: $savedTheme');\n-\n       if (savedTheme != null) {\n         // Parse the saved theme string safely\n         ThemeMode? themeMode;\n         try {\n           themeMode = ThemeMode.values.firstWhere(\n             (mode) => mode.toString() == savedTheme,\n             orElse: () => ThemeMode.system,\n           );\n-          debugPrint('ThemeNotifier: Parsed theme mode: $themeMode');\n         } catch (e) {\n-          debugPrint('ThemeNotifier: Error parsing theme: $e');\n+          debugPrint('Error parsing theme: $e');\n           themeMode = ThemeMode.system;\n         }\n \n-        debugPrint('ThemeNotifier: Setting state to: $themeMode');\n         state = themeMode;\n       }\n     } catch (e) {\n-      debugPrint('ThemeNotifier: Error loading theme: $e');\n+      debugPrint('Error loading theme: $e');\n       // Fallback to system theme on error\n       state = ThemeMode.system;\n     }\n   }\n \n   Future<void> setTheme(ThemeMode mode) async {\n     try {\n-      debugPrint('ThemeNotifier: Setting theme to: $mode');\n+      // Set state first to update UI immediately\n       state = mode;\n \n       // Add null check for _storage\n       final storage = _storage;\n       if (storage == null) {\n-        debugPrint('ThemeNotifier: Storage is null during theme saving');\n+        debugPrint('Storage is null during theme saving');\n         return;\n       }\n \n       // Save theme after state update\n       await storage.write(key: _themeKey, value: mode.toString());\n-      debugPrint('ThemeNotifier: Theme saved successfully: ${mode.toString()}');\n+      debugPrint('Theme saved successfully: ${mode.toString()}');\n     } catch (e) {\n-      debugPrint('ThemeNotifier: Error saving theme: $e');\n+      debugPrint('Error saving theme: $e');\n       // No need to revert state, as the UI is already updated\n     }\n   }\n \n   Future<void> toggleTheme() async {\n     // Get current theme with null safety\n     final currentTheme = state;\n-    debugPrint('ThemeNotifier: Current theme before toggle: $currentTheme');\n     final newMode =\n         currentTheme == ThemeMode.dark ? ThemeMode.light : ThemeMode.dark;\n-    debugPrint('ThemeNotifier: Toggling to new theme: $newMode');\n     await setTheme(newMode);\n   }\n }\n"
                },
                {
                    "date": 1744969668774,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n     _loadTheme();\n   }\n \n   // Use a nullable storage to avoid initialization errors\n-  final FlutterSecureStorage? _storage = const FlutterSecureStorage();\n+  final FlutterSecureStorage _storage = const FlutterSecureStorage();\n   static const _themeKey = 'theme_mode';\n \n   Future<void> _loadTheme() async {\n     try {\n"
                }
            ],
            "date": 1744916608278,
            "name": "Commit-0",
            "content": "import 'package:flutter/material.dart';\r\nimport 'package:flutter_riverpod/flutter_riverpod.dart';\r\nimport 'package:flutter_secure_storage/flutter_secure_storage.dart';\r\n\r\nfinal themeProvider = StateNotifierProvider<ThemeNotifier, ThemeMode>((ref) {\r\n  return ThemeNotifier();\r\n});\r\n\r\nclass ThemeNotifier extends StateNotifier<ThemeMode> {\r\n  ThemeNotifier() : super(ThemeMode.system) {\r\n    _loadTheme();\r\n  }\r\n\r\n  final _storage = const FlutterSecureStorage();\r\n\r\n  Future<void> _loadTheme() async {\r\n    final savedTheme = await _storage.read(key: 'theme_mode');\r\n    if (savedTheme != null) {\r\n      state = ThemeMode.values.firstWhere(\r\n        (e) => e.toString() == savedTheme,\r\n        orElse: () => ThemeMode.system,\r\n      );\r\n    }\r\n  }\r\n\r\n  Future<void> toggleTheme() async {\r\n    state = state == ThemeMode.dark ? ThemeMode.light : ThemeMode.dark;\r\n    await _storage.write(key: 'theme_mode', value: state.toString());\r\n  }\r\n\r\n  Future<void> setTheme(ThemeMode mode) async {\r\n    state = mode;\r\n    await _storage.write(key: 'theme_mode', value: state.toString());\r\n  }\r\n} "
        }
    ]
}