{
    "sourceFile": "lib/notes_list_page.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1744895835923,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1744897190476,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,98 +1,87 @@\n import 'package:flutter/material.dart';\r\n+import 'package:flutter_riverpod/flutter_riverpod.dart';\r\n+import '../controllers/notes_controller.dart';\r\n+import '../../data/note_model.dart';\r\n+import 'note_editor_page.dart';\r\n \r\n-/// Placeholder Note model.\r\n-/// Replace with your real model from Drive.\r\n-class Note {\r\n-  final String id;\r\n-  final String title;\r\n-  final String content;\r\n-  Note({required this.id, required this.title, required this.content});\r\n-}\r\n-\r\n-class NotesListPage extends StatefulWidget {\r\n+class NotesListPage extends ConsumerWidget {\r\n   const NotesListPage({super.key});\r\n \r\n   @override\r\n-  State<NotesListPage> createState() => _NotesListPageState();\r\n-}\r\n+  Widget build(BuildContext context, WidgetRef ref) {\r\n+    final notesAsync = ref.watch(notesControllerProvider);\r\n \r\n-class _NotesListPageState extends State<NotesListPage> {\r\n-  // In real implementation, replace with Riverpod/FutureProvider\r\n-  // that fetches notes from Google Drive.\r\n-  List<Note> _notes = [\r\n-    Note(id: '1', title: 'First Note', content: 'This is the body of the first note.'),\r\n-    Note(id: '2', title: 'Shopping List', content: '- Milk\\n- Eggs\\n- Bread'),\r\n-  ];\r\n-\r\n-  void _deleteNote(String id) {\r\n-    setState(() {\r\n-      _notes.removeWhere((n) => n.id == id);\r\n-    });\r\n-    ScaffoldMessenger.of(context).showSnackBar(\r\n-      const SnackBar(content: Text('Note deleted')),\r\n-    );\r\n-  }\r\n-\r\n-  void _openEditor({Note? note}) async {\r\n-    // TODO: Push to your editor page, await result, refresh list\r\n-    // e.g.\r\n-    // final updated = await Navigator.of(context).push(...);\r\n-    // if (updated != null) setState(() => ...);\r\n-  }\r\n-\r\n-  @override\r\n-  Widget build(BuildContext context) {\r\n     return Scaffold(\r\n-      appBar: AppBar(\r\n-        title: const Text('Your Notes'),\r\n-      ),\r\n+      appBar: AppBar(title: const Text('Your Notes')),\r\n       body: Padding(\r\n         padding: const EdgeInsets.all(12),\r\n-        child: Column(\r\n-          children: [\r\n-            // Objective header\r\n-            Card(\r\n-              elevation: 2,\r\n-              child: Padding(\r\n-                padding: const EdgeInsets.all(12),\r\n-                child: Text(\r\n-                  'Objective:\\n'\r\n-                  'Build a Flutter application that allows users to authenticate with Google using OAuth 2.0 and view, create, '\r\n-                  'and update text notes that are stored and synced with the user\\'s Google Drive (as individual text files or in a specific folder).',\r\n-                  style: Theme.of(context).textTheme.bodyLarge,\r\n-                ),\r\n+        child: Column(children: [\r\n+          // Objective header\r\n+          Card(\r\n+            elevation: 2,\r\n+            child: Padding(\r\n+              padding: const EdgeInsets.all(12),\r\n+              child: Text(\r\n+                'Objective:\\n'\r\n+                'Build a Flutter application that allows users to authenticate '\r\n+                'with Google using OAuth 2.0 and view, create, and update text '\r\n+                'notes that are stored and synced with the user\\'s Google Drive.',\r\n+                style: Theme.of(context).textTheme.bodyLarge,\r\n               ),\r\n             ),\r\n-            const SizedBox(height: 12),\r\n+          ),\r\n+          const SizedBox(height: 12),\r\n \r\n-            // Notes list\r\n-            Expanded(\r\n-              child: _notes.isEmpty\r\n-                  ? const Center(child: Text('No notes yet. Tap + to add one.'))\r\n-                  : ListView.builder(\r\n-                      itemCount: _notes.length,\r\n-                      itemBuilder: (context, i) {\r\n-                        final note = _notes[i];\r\n-                        return Card(\r\n-                          child: ListTile(\r\n-                            title: Text(note.title),\r\n-                            onTap: () => _openEditor(note: note),\r\n-                            onLongPress: () => _deleteNote(note.id),\r\n-                          ),\r\n-                        );\r\n-                      },\r\n-                    ),\r\n+          // Notes list / loading / error\r\n+          Expanded(\r\n+            child: notesAsync.when(\r\n+              loading: () => const Center(child: CircularProgressIndicator()),\r\n+              error: (e, _) => Center(child: Text('Error: $e')),\r\n+              data: (notes) {\r\n+                if (notes.isEmpty) {\r\n+                  return const Center(child: Text('No notes yet. Tap + to add one.'));\r\n+                }\r\n+                return ListView.builder(\r\n+                  itemCount: notes.length,\r\n+                  itemBuilder: (ctx, i) {\r\n+                    final note = notes[i];\r\n+                    return Card(\r\n+                      child: ListTile(\r\n+                        title: Text(note.title),\r\n+                        onTap: () => _openEditor(context, ref, note),\r\n+                        onLongPress: () => ref\r\n+                            .read(notesControllerProvider.notifier)\r\n+                            .delete(note.id)\r\n+                            .then((_) => ScaffoldMessenger.of(context).showSnackBar(\r\n+                                  const SnackBar(content: Text('Note deleted')),\r\n+                                )),\r\n+                      ),\r\n+                    );\r\n+                  },\r\n+                );\r\n+              },\r\n             ),\r\n-          ],\r\n-        ),\r\n+          ),\r\n+        ]),\r\n       ),\r\n \r\n-      // Add new note\r\n+      // FAB → new note\r\n       floatingActionButton: FloatingActionButton(\r\n-        onPressed: () => _openEditor(),\r\n+        onPressed: () => _openEditor(context, ref, null),\r\n+        tooltip: 'Add Note',\r\n         child: const Icon(Icons.add),\r\n-        tooltip: 'Add Note',\r\n       ),\r\n     );\r\n   }\r\n+\r\n+  void _openEditor(BuildContext context, WidgetRef ref, NoteModel? note) {\r\n+    Navigator.of(context)\r\n+        .push(MaterialPageRoute(\r\n+          builder: (_) => NoteEditorPage(originalNote: note),\r\n+        ))\r\n+        .then((_) {\r\n+          // when editor pops, refresh list\r\n+          ref.invalidate(notesControllerProvider);\r\n+        });\r\n+  }\r\n }\r\n"
                },
                {
                    "date": 1744897433556,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,7 @@\n import 'package:flutter/material.dart';\r\n import 'package:flutter_riverpod/flutter_riverpod.dart';\r\n-import '../controllers/notes_controller.dart';\r\n-import '../../data/note_model.dart';\r\n+\r\n import 'note_editor_page.dart';\r\n \r\n class NotesListPage extends ConsumerWidget {\r\n   const NotesListPage({super.key});\r\n"
                },
                {
                    "date": 1744897703105,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n import 'package:flutter/material.dart';\r\n import 'package:flutter_riverpod/flutter_riverpod.dart';\r\n-\r\n+import '../controllers/notes_controller.dart';\r\n import 'note_editor_page.dart';\r\n+import '../../data/note_model.dart';\r\n \r\n class NotesListPage extends ConsumerWidget {\r\n   const NotesListPage({super.key});\r\n \r\n@@ -14,9 +15,8 @@\n       appBar: AppBar(title: const Text('Your Notes')),\r\n       body: Padding(\r\n         padding: const EdgeInsets.all(12),\r\n         child: Column(children: [\r\n-          // Objective header\r\n           Card(\r\n             elevation: 2,\r\n             child: Padding(\r\n               padding: const EdgeInsets.all(12),\r\n@@ -29,32 +29,30 @@\n               ),\r\n             ),\r\n           ),\r\n           const SizedBox(height: 12),\r\n-\r\n-          // Notes list / loading / error\r\n           Expanded(\r\n             child: notesAsync.when(\r\n               loading: () => const Center(child: CircularProgressIndicator()),\r\n               error: (e, _) => Center(child: Text('Error: $e')),\r\n               data: (notes) {\r\n                 if (notes.isEmpty) {\r\n-                  return const Center(child: Text('No notes yet. Tap + to add one.'));\r\n+                  return const Center(child: Text('No notes yet.'));\r\n                 }\r\n                 return ListView.builder(\r\n                   itemCount: notes.length,\r\n                   itemBuilder: (ctx, i) {\r\n-                    final note = notes[i];\r\n+                    final n = notes[i];\r\n                     return Card(\r\n                       child: ListTile(\r\n-                        title: Text(note.title),\r\n-                        onTap: () => _openEditor(context, ref, note),\r\n+                        title: Text(n.title),\r\n+                        onTap: () => _openEditor(context, ref, n),\r\n                         onLongPress: () => ref\r\n                             .read(notesControllerProvider.notifier)\r\n-                            .delete(note.id)\r\n-                            .then((_) => ScaffoldMessenger.of(context).showSnackBar(\r\n-                                  const SnackBar(content: Text('Note deleted')),\r\n-                                )),\r\n+                            .delete(n.id)\r\n+                            .then((_) => ScaffoldMessenger.of(context)\r\n+                                .showSnackBar(\r\n+                                    const SnackBar(content: Text('Deleted')))),\r\n                       ),\r\n                     );\r\n                   },\r\n                 );\r\n@@ -62,25 +60,18 @@\n             ),\r\n           ),\r\n         ]),\r\n       ),\r\n-\r\n-      // FAB → new note\r\n       floatingActionButton: FloatingActionButton(\r\n         onPressed: () => _openEditor(context, ref, null),\r\n-        tooltip: 'Add Note',\r\n         child: const Icon(Icons.add),\r\n       ),\r\n     );\r\n   }\r\n \r\n-  void _openEditor(BuildContext context, WidgetRef ref, NoteModel? note) {\r\n-    Navigator.of(context)\r\n+  void _openEditor(BuildContext c, WidgetRef r, NoteModel? n) {\r\n+    Navigator.of(c)\r\n         .push(MaterialPageRoute(\r\n-          builder: (_) => NoteEditorPage(originalNote: note),\r\n-        ))\r\n-        .then((_) {\r\n-          // when editor pops, refresh list\r\n-          ref.invalidate(notesControllerProvider);\r\n-        });\r\n+            builder: (_) => NoteEditorPage(originalNote: n)))\r\n+        .then((_) => r.invalidate(notesControllerProvider));\r\n   }\r\n }\r\n"
                },
                {
                    "date": 1744897808235,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,10 @@\n import 'package:flutter/material.dart';\r\n import 'package:flutter_riverpod/flutter_riverpod.dart';\r\n import '../controllers/notes_controller.dart';\r\n import 'note_editor_page.dart';\r\n-import '../../data/note_model.dart';\r\n \r\n+\r\n class NotesListPage extends ConsumerWidget {\r\n   const NotesListPage({super.key});\r\n \r\n   @override\r\n"
                },
                {
                    "date": 1744897813745,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n+import 'package:drivenotes/notes_controller.dart';\r\n import 'package:flutter/material.dart';\r\n import 'package:flutter_riverpod/flutter_riverpod.dart';\r\n-import '../controllers/notes_controller.dart';\r\n+\r\n import 'note_editor_page.dart';\r\n \r\n \r\n class NotesListPage extends ConsumerWidget {\r\n"
                },
                {
                    "date": 1744897820968,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,5 @@\n+import 'package:drivenotes/features/notes/domain/models/note_model.dart';\r\n import 'package:drivenotes/notes_controller.dart';\r\n import 'package:flutter/material.dart';\r\n import 'package:flutter_riverpod/flutter_riverpod.dart';\r\n \r\n"
                }
            ],
            "date": 1744895835923,
            "name": "Commit-0",
            "content": "import 'package:flutter/material.dart';\r\n\r\n/// Placeholder Note model.\r\n/// Replace with your real model from Drive.\r\nclass Note {\r\n  final String id;\r\n  final String title;\r\n  final String content;\r\n  Note({required this.id, required this.title, required this.content});\r\n}\r\n\r\nclass NotesListPage extends StatefulWidget {\r\n  const NotesListPage({super.key});\r\n\r\n  @override\r\n  State<NotesListPage> createState() => _NotesListPageState();\r\n}\r\n\r\nclass _NotesListPageState extends State<NotesListPage> {\r\n  // In real implementation, replace with Riverpod/FutureProvider\r\n  // that fetches notes from Google Drive.\r\n  List<Note> _notes = [\r\n    Note(id: '1', title: 'First Note', content: 'This is the body of the first note.'),\r\n    Note(id: '2', title: 'Shopping List', content: '- Milk\\n- Eggs\\n- Bread'),\r\n  ];\r\n\r\n  void _deleteNote(String id) {\r\n    setState(() {\r\n      _notes.removeWhere((n) => n.id == id);\r\n    });\r\n    ScaffoldMessenger.of(context).showSnackBar(\r\n      const SnackBar(content: Text('Note deleted')),\r\n    );\r\n  }\r\n\r\n  void _openEditor({Note? note}) async {\r\n    // TODO: Push to your editor page, await result, refresh list\r\n    // e.g.\r\n    // final updated = await Navigator.of(context).push(...);\r\n    // if (updated != null) setState(() => ...);\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Scaffold(\r\n      appBar: AppBar(\r\n        title: const Text('Your Notes'),\r\n      ),\r\n      body: Padding(\r\n        padding: const EdgeInsets.all(12),\r\n        child: Column(\r\n          children: [\r\n            // Objective header\r\n            Card(\r\n              elevation: 2,\r\n              child: Padding(\r\n                padding: const EdgeInsets.all(12),\r\n                child: Text(\r\n                  'Objective:\\n'\r\n                  'Build a Flutter application that allows users to authenticate with Google using OAuth 2.0 and view, create, '\r\n                  'and update text notes that are stored and synced with the user\\'s Google Drive (as individual text files or in a specific folder).',\r\n                  style: Theme.of(context).textTheme.bodyLarge,\r\n                ),\r\n              ),\r\n            ),\r\n            const SizedBox(height: 12),\r\n\r\n            // Notes list\r\n            Expanded(\r\n              child: _notes.isEmpty\r\n                  ? const Center(child: Text('No notes yet. Tap + to add one.'))\r\n                  : ListView.builder(\r\n                      itemCount: _notes.length,\r\n                      itemBuilder: (context, i) {\r\n                        final note = _notes[i];\r\n                        return Card(\r\n                          child: ListTile(\r\n                            title: Text(note.title),\r\n                            onTap: () => _openEditor(note: note),\r\n                            onLongPress: () => _deleteNote(note.id),\r\n                          ),\r\n                        );\r\n                      },\r\n                    ),\r\n            ),\r\n          ],\r\n        ),\r\n      ),\r\n\r\n      // Add new note\r\n      floatingActionButton: FloatingActionButton(\r\n        onPressed: () => _openEditor(),\r\n        child: const Icon(Icons.add),\r\n        tooltip: 'Add Note',\r\n      ),\r\n    );\r\n  }\r\n}\r\n"
        }
    ]
}