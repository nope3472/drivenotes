{
    "sourceFile": "lib/drive_service.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1744897600167,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1744897600167,
            "name": "Commit-0",
            "content": "import 'dart:convert';\r\nimport 'package:google_sign_in/google_sign_in.dart';\r\nimport 'package:googleapis/drive/v3.dart' as drive;\r\nimport 'package:http/http.dart' as http;\r\n\r\n/// Injects Google OAuth headers into HTTP requests.\r\nclass GoogleHttpClient extends http.BaseClient {\r\n  final Map<String, String> _headers;\r\n  final http.Client _inner = http.Client();\r\n  GoogleHttpClient(this._headers);\r\n  @override\r\n  Future<http.StreamedResponse> send(http.BaseRequest req) {\r\n    req.headers.addAll(_headers);\r\n    return _inner.send(req);\r\n  }\r\n}\r\n\r\nclass DriveService {\r\n  DriveService._();\r\n  static final instance = DriveService._();\r\n  final _googleSignIn = GoogleSignIn(scopes: [drive.DriveApi.driveFileScope]);\r\n\r\n  Future<drive.DriveApi> _getApi() async {\r\n    var acct = await _googleSignIn.signInSilently();\r\n    acct ??= await _googleSignIn.signIn();\r\n    if (acct == null) throw Exception('Signâ€‘in aborted');\r\n    final headers = await acct.authHeaders;\r\n    return drive.DriveApi(GoogleHttpClient(headers));\r\n  }\r\n\r\n  Future<String> ensureFolderExists() async {\r\n    final api = await _getApi();\r\n    const name = 'DriveNotes';\r\n    final res = await api.files.list(\r\n      q:\r\n          \"mimeType='application/vnd.google-apps.folder' and name='$name' and trashed=false\",\r\n      $fields: 'files(id)',\r\n    );\r\n    if (res.files != null && res.files!.isNotEmpty) {\r\n      return res.files!.first.id!;\r\n    }\r\n    final folder = drive.File()\r\n      ..name = name\r\n      ..mimeType = 'application/vnd.google-apps.folder';\r\n    final created = await api.files.create(folder);\r\n    return created.id!;\r\n  }\r\n\r\n  Future<List<drive.File>> listRawFiles() async {\r\n    final api = await _getApi();\r\n    final folderId = await ensureFolderExists();\r\n    final res = await api.files.list(\r\n      q:\r\n          \"'$folderId' in parents and mimeType='text/plain' and trashed=false\",\r\n      $fields: 'files(id, name)',\r\n    );\r\n    return res.files ?? [];\r\n  }\r\n\r\n  Future<String> fetchContent(String fileId) async {\r\n    final api = await _getApi();\r\n    final media = await api.files.get(fileId,\r\n        downloadOptions: drive.DownloadOptions.fullMedia) as drive.Media;\r\n    final bytes = <int>[];\r\n    await media.stream.forEach(bytes.addAll);\r\n    return utf8.decode(bytes);\r\n  }\r\n\r\n  Future<void> createNote(String title, String content) async {\r\n    final api = await _getApi();\r\n    final folderId = await ensureFolderExists();\r\n    final meta = drive.File()..name = '$title.txt'..parents = [folderId];\r\n    final data = utf8.encode(content);\r\n    await api.files.create(meta,\r\n        uploadMedia: drive.Media(Stream.value(data), data.length,\r\n            contentType: 'text/plain'));\r\n  }\r\n\r\n  Future<void> updateNote({\r\n    required String fileId,\r\n    required String newTitle,\r\n    required String newContent,\r\n  }) async {\r\n    final api = await _getApi();\r\n    final meta = drive.File()..name = '$newTitle.txt';\r\n    final data = utf8.encode(newContent);\r\n    await api.files.update(meta, fileId,\r\n        uploadMedia: drive.Media(Stream.value(data), data.length,\r\n            contentType: 'text/plain'));\r\n  }\r\n\r\n  Future<void> deleteNote(String fileId) async {\r\n    final api = await _getApi();\r\n    await api.files.delete(fileId);\r\n  }\r\n}\r\n"
        }
    ]
}